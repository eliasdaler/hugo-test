<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>game dev on Elias Daler's blog</title><link>https://eliasdaler.github.io/hugo-test/tags/game-dev/</link><description>Recent content in game dev on Elias Daler's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 May 2020 00:00:00 +0300</lastBuildDate><atom:link href="https://eliasdaler.github.io/hugo-test/tags/game-dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Using CMake and managing dependencies</title><link>https://eliasdaler.github.io/hugo-test/posts/cmake-dependencies/</link><pubDate>Mon, 24 May 2021 00:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/cmake-dependencies/</guid><description>&lt;p>Building C++ projects and managing dependencies is hard. CMake&amp;rsquo;s FetchContent makes it much more manageable and easy to do.&lt;/p>
&lt;p>We&amp;rsquo;ll go step by step and create a simple project which will have SFML, Dear ImGui and ImGui-SFML as its dependencies. The project will clone these dependencies' source code from Github and build them. You won&amp;rsquo;t need to use prebuilt libraries ever again.&lt;/p>
&lt;p>I&amp;rsquo;ll try to explain everything as I go on down to a &amp;ldquo;basic&amp;rdquo; things. It&amp;rsquo;s good to understand everything you do and be able to do it from scratch without any guides. This article will also be a good starting point if you&amp;rsquo;ve never used CMake before.&lt;/p>
&lt;p>If you just want to learn how to manage dependencies with CMake with &lt;code>FetchContent&lt;/code>, you can just jump straight to &lt;a href="#adding-sfml-as-a-dependency">Adding SFML as a dependency&lt;/a> section.&lt;/p>
&lt;p>The source code of the project in the article can be found &lt;a href="https://github.com/eliasdaler/cmake-fetchcontent-tutorial-code">here&lt;/a>.&lt;/p>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#hello-world">Hello, world&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-a-project">Building a project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#managing-dependencies">Managing dependencies&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#manual-management">Manual management&lt;/a>&lt;/li>
&lt;li>&lt;a href="#git-submodules">Git submodules&lt;/a>&lt;/li>
&lt;li>&lt;a href="#package-managers">Package managers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fetchcontent">FetchContent&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#adding-sfml-as-a-dependency">Adding SFML as a dependency&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-dear-imgui-and-imgui-sfml-as-dependencies">Adding Dear ImGui and ImGui-SFML as dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="#speeding-up-your-builds">Speeding up your builds&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-fetchcontent-with-local-source-directories">Using FetchContent with local source directories&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-notes-about-libraries-which-dont-behave-well">Some notes about libraries which don&amp;rsquo;t behave well&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#missing-or-poorly-written-cmake-build">Missing or poorly written CMake build&lt;/a>&lt;/li>
&lt;li>&lt;a href="#build_shared_libs">BUILD_SHARED_LIBS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#copying-dlls-on-windows">Copying DLLs on Windows&lt;/a>&lt;/li>
&lt;li>&lt;a href="#find_package">find_package&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#closing-thoughts">Closing thoughts&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="hello-world">Hello, world&lt;/h2>
&lt;p>First, let&amp;rsquo;s create a bunch of files and directories so that we have a structure like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── CMakeLists.txt
└── src
├── CMakeLists.txt
└── main.cpp
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s start with a CMakeLists.txt from a root directory.&lt;/p>
&lt;p>It&amp;rsquo;s simple:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">cmake_minimum_required&lt;/span>(&lt;span style="color:#b84">VERSION&lt;/span> &lt;span style="color:#b84">3.15&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">project&lt;/span>(&lt;span style="color:#b84">example&lt;/span>
&lt;span style="color:#b84">LANGUAGES&lt;/span> &lt;span style="color:#b84">CXX&lt;/span>
&lt;span style="color:#b84">VERSION&lt;/span> &lt;span style="color:#b84">1.0&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">src&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first line sets up a required minimal version of CMake which can be used to build the project. CMake constantly evolves and it&amp;rsquo;s better to use the latest version for your project as each one brings handy new features, better compiler integration and bug fixes.&lt;/p>
&lt;blockquote class="hint-info">
&lt;p>If you&amp;rsquo;re writing a library, it&amp;rsquo;s better to stick to the lowest version of CMake that makes sense for you. You can find the version of CMake that is available for various distros &lt;a href="https://repology.org/project/cmake/versions">here&lt;/a>. Another way of choosing is to look at other popular libraries and choose the same version.&lt;/p>
&lt;p>For example, &lt;a href="https://github.com/nlohmann/json">JSON for modern C++&lt;/a> and &lt;a href="https://github.com/fmtlib/fmt">fmt&lt;/a> use CMake 3.1. I&amp;rsquo;d recommend using something like CMake 3.8.2 or newer, unless you want to support very old distributions and users who don&amp;rsquo;t want to upgrade to newer versions for some reason.&lt;/p>
&lt;/blockquote>
&lt;p>After &lt;code>cmake_minimum_required&lt;/code>, we have a project declaration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">project&lt;/span>(&lt;span style="color:#b84">example&lt;/span>
&lt;span style="color:#b84">LANGUAGES&lt;/span> &lt;span style="color:#b84">CXX&lt;/span>
&lt;span style="color:#b84">VERSION&lt;/span> &lt;span style="color:#b84">1.0&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The project is similar to a concept of &amp;ldquo;solution&amp;rdquo; in Visual Studio terminology. One project can have multiple &amp;ldquo;targets&amp;rdquo; (which roughly correspond to &amp;ldquo;projects&amp;rdquo; in VS). The target can be an executable, a library or even something which doesn&amp;rsquo;t produce any files after it&amp;rsquo;s built (e.g. it can run unit tests, linters and so on).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;code>LANGUAGES&lt;/code> option in a &lt;code>project&lt;/code> call defines a language which your project uses so that CMake knows what kind of builds to generate. By default it&amp;rsquo;s &lt;code>C&lt;/code> and &lt;code>CXX&lt;/code>, but there are a lot of other options available for you (like &lt;code>CUDA&lt;/code> or &lt;code>Fortran&lt;/code>). If you&amp;rsquo;re doing C or C++ project, it&amp;rsquo;s optional to specify it, but it&amp;rsquo;s still useful as a &amp;ldquo;meta-data&amp;rdquo; for people who&amp;rsquo;re reading your CMake build.&lt;/p>
&lt;p>&lt;code>VERSION&lt;/code> option specifies a current version of your project. It can be used to generate &amp;ldquo;version&amp;rdquo; headers (here&amp;rsquo;s an &lt;a href="https://cmake.org/cmake/help/v3.20/guide/tutorial/index.html#adding-a-version-number-and-configured-header-file">example&lt;/a> of how to do it), write some output in a terminal and so on. I&amp;rsquo;ve seen a lot of people getting &lt;code>VERSION&lt;/code> from a current Git tag or some changelog file, but we&amp;rsquo;ll not go here in this tutorial.&lt;/p>
&lt;p>&lt;code>add_subdirectory(&amp;lt;DIR&amp;gt;)&lt;/code> is like an &amp;ldquo;include&amp;rdquo; and can be thought of as an inclusion of &lt;code>&amp;lt;DIR&amp;gt;/CMakeLists.txt&lt;/code> into another CMake file. It&amp;rsquo;s actually a bit more complex, but it&amp;rsquo;s okay to think about it as &amp;ldquo;include&amp;rdquo; at the beginning.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>For example, if you have an &lt;!-- raw HTML omitted -->examples&lt;!-- raw HTML omitted --> directory, it&amp;rsquo;s good to have a &lt;!-- raw HTML omitted -->examples/CMakeLists.txt&lt;!-- raw HTML omitted --> which will just be a bunch of &lt;!-- raw HTML omitted -->add_subdirectory&lt;!-- raw HTML omitted --> calls for each sub-directory and &lt;!-- raw HTML omitted -->example/some_example/CMakeLists.txt&lt;!-- raw HTML omitted --> will be a build script which contains information on how to build &lt;!-- raw HTML omitted -->some_example&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Here&amp;rsquo;s how &lt;code>src/CMakeLists.txt&lt;/code> looks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">add_executable&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">main.cpp&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, just one line. Here, we define our first target, &lt;code>example_exe&lt;/code>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>In the &lt;code>add_executable&lt;/code> call, we can specify a list of sources needed to build your library or executable. For example, you can have:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">add_executable&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span>
&lt;span style="color:#b84">Game.cpp&lt;/span>
&lt;span style="color:#b84">ResourceManager.cpp&lt;/span>
&lt;span style="color:#b84">main.cpp&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another option is to use &lt;code>target_sources&lt;/code>, which can be especially helpful if your target has .cpp files in several subdirectories, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#998;font-style:italic"># in src/CMakeLists.txt
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">add_executable&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">subdir&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">target_sources&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">PUBLIC&lt;/span> &lt;span style="color:#b84">main.cpp&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#998;font-style:italic"># in src/subdir/CMakeLists.txt
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">target_sources&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">source.cpp&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Read &lt;a href="https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/">this post&lt;/a> to learn more &lt;code>target_sources&lt;/code>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Finally, our &lt;code>main.cpp&lt;/code> looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">main&lt;/span>() {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Hello, world!&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s build this project.&lt;/p>
&lt;h2 id="building-a-project">Building a project&lt;/h2>
&lt;p>Create a &amp;ldquo;build directory&amp;rdquo;. This is a directory where all temporary CMake, build and object files will be. It&amp;rsquo;s also the directory in which your executables and libraries will be built (unless you tell CMake not to do so). Ideally, it should be outside of your &amp;ldquo;source&amp;rdquo; directory.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>So, suppose you have a structure like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>cmake-example
├── CMakeLists.txt
└── src
├── CMakeLists.txt
└── main.cpp
cmake-example-build
&lt;/code>&lt;/pre>&lt;p>When you&amp;rsquo;re in &lt;code>cmake-example-build&lt;/code> directory (it&amp;rsquo;s empty at the moment), do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake ../cmake-example
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the step where CMake does configuration (reading your CMake files, checking their validity, checking your compiler and so on) and generation of build files. If you&amp;rsquo;re on Windows and only have Visual Studio installed, CMake will generate Visual Studio solutions/projects by default. On Linux it&amp;rsquo;ll generate GNU Make &lt;code>Makefile&lt;/code>s.&lt;/p>
&lt;p>To specify a generator, simply pass a &lt;code>-G&lt;/code> option with a name of your generator, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake -GNinja ../cmake-example
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="hint-info">
&lt;a href="https://ninja-build.org/">ninja&lt;/a> is a great build tool. It&amp;rsquo;s blazingly fast and I find that it performs better than GNU Make for me in most cases.
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s an example output of configuration and generation if it goes right:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">-- The CXX compiler identification is GNU 9.3.0
-- Check &lt;span style="font-weight:bold">for&lt;/span> working CXX compiler: /usr/bin/c++
-- Check &lt;span style="font-weight:bold">for&lt;/span> working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - &lt;span style="font-weight:bold">done&lt;/span>
-- Detecting CXX compile features
-- Detecting CXX compile features - &lt;span style="font-weight:bold">done&lt;/span>
-- Configuring &lt;span style="font-weight:bold">done&lt;/span>
-- Generating &lt;span style="font-weight:bold">done&lt;/span>
-- Build files have been written to: ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, let&amp;rsquo;s build the project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also build a specific target if you run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build . --target &amp;lt;target_name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build . --target example_exe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll find the executable in &lt;code>&amp;lt;your-build-dir&amp;gt;/src/&lt;/code> directory or &lt;code>&amp;lt;your-build-dir&amp;gt;/Debug/src&lt;/code> if you&amp;rsquo;re using Visual Studio to build the project.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./src/example_exe
Hello, world!
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="hint-info">
If you&amp;rsquo;ve generated a Visual Studio solution, you can just use Visual Studio for building. It even checks if any CMakeLists.txt was modified and re-generates solution/project which changed. You&amp;rsquo;ll see VS asking if it should reload the project which has changed - you should agree do it so that it works properly.
&lt;/blockquote>
&lt;p>If the target you&amp;rsquo;re building is a library, CMake will build a static one by default. To build a shared library, set &lt;code>BUILD_SHARED_LIBS=ON&lt;/code> like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake -DBUILD_SHARED_LIBS&lt;span style="font-weight:bold">=&lt;/span>ON &amp;lt;source-dir&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some generators (Visual Studio and XCode) support building multiple configurations of your projects in one build directory. You can do it by specifying &lt;code>--config&lt;/code> flag during the build like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build . --target some_target --config Release
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If in Ninja, GNU make and so on, your &lt;code>example_exe&lt;/code> will be located in &lt;code>&amp;lt;build-dir&amp;gt;/src/&lt;/code>, in Visual Studio it will be localted in &lt;code>&amp;lt;build-dir&amp;gt;/src/&amp;lt;config&amp;gt;/&lt;/code> (e.g. &lt;code>&amp;lt;build-dir&amp;gt;/src/Release&lt;/code>).&lt;/p>
&lt;p>For generators which don&amp;rsquo;t support multi-configuration builds in one build directory, you&amp;rsquo;ll have to make multiple build directories for each build type.&lt;/p>
&lt;h2 id="managing-dependencies">Managing dependencies&lt;/h2>
&lt;p>There are a lot of ways of managing dependencies with CMake, so let&amp;rsquo;s to a quick overview of possible ways.&lt;/p>
&lt;h3 id="manual-management">Manual management&lt;/h3>
&lt;p>The simplest way of doing dependency management is to simply copy source code of your dependencies into your project source directory. For example, you can just copy SFML sources to your &lt;code>&amp;lt;source-dir&amp;gt;/dependencies/SFML&lt;/code> and then just do &lt;code>add_subdirectory(dependencies/SFML)&lt;/code> in your main CMake file (and then link to SFML&amp;rsquo;s targets as needed)&lt;/p>
&lt;p>However, this is not the best way of doing it:&lt;/p>
&lt;ul>
&lt;li>It might be hard to know which exact version the dependencies are.&lt;/li>
&lt;li>You also don&amp;rsquo;t get a clear picture if you&amp;rsquo;ve modified the dependencies' sources (e.g. to fix some problem or by mistake when you refactored something). Updating them is not fun then.&lt;/li>
&lt;li>Your source directory might become huge if you have a lot of dependencies (and the repo size might increase dramatically as well).&lt;/li>
&lt;/ul>
&lt;h3 id="git-submodules">Git submodules&lt;/h3>
&lt;p>Git submodules are basically pointers to other repositories. The pointer basically stores repo&amp;rsquo;s URL and the commit you choose to point at (e.g. commit of a specific library version).&lt;/p>
&lt;p>You can directly use &lt;code>add_subdirectory(...)&lt;/code> with dependencies referenced via submodules, but you&amp;rsquo;ll need to check via CMake that dependencies were cloned, otherwise you&amp;rsquo;ll get errors about CMake not being able to find referenced subdirectories.&lt;/p>
&lt;p>You can read more about Git submodules &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">here&lt;/a>. I don&amp;rsquo;t use them myself, as I don&amp;rsquo;t like the git&amp;rsquo;s commands for their management and the metadata about your dependencies is not as clear as it could be.&lt;/p>
&lt;p>But still, it&amp;rsquo;s a thing that works for a lot of people (and I&amp;rsquo;ve seen many libraries/application going with it), so it might work for you well.&lt;/p>
&lt;h3 id="package-managers">Package managers&lt;/h3>
&lt;p>There&amp;rsquo;s a bunch of package managers available for C++ right now: Conan, vcpkg and so on. They can be a great way of managing dependencies.&lt;/p>
&lt;p>I don&amp;rsquo;t like them for a few reasons.&lt;/p>
&lt;p>There&amp;rsquo;s no standard package manager in C++ world as of today, which leads to a fragmentation and build scripts not being available for all your dependencies. These build scripts are not supported by library maintainers most of the time, which leads to them to quickly becoming out of date with the latest version of the library or having some build features not being available to you.&lt;/p>
&lt;p>And finally, I like having few dependencies. I only need Git, a C++ compiler and CMake for building things I write.&lt;/p>
&lt;h3 id="fetchcontent">FetchContent&lt;/h3>
&lt;p>This is the way of managing dependencies that I personally use and like a lot.&lt;/p>
&lt;blockquote class="hint-info">
&lt;strong>Update (2022)&lt;/strong>. Not anymore, I started using git submodules. FetchContent is still fantastic for quick/simple stuff, though!
&lt;/blockquote>
&lt;p>Basically, it allows you to download or clone source code of external projects from the Web (or other source) and then use this sources via &lt;code>add_subdirectory&lt;/code> call and linking to dependency&amp;rsquo;s targets or other means.&lt;/p>
&lt;p>It&amp;rsquo;s a wrapper around &lt;code>ExternalProject&lt;/code> CMake command, which can do a lot of things:&lt;/p>
&lt;ul>
&lt;li>It can download or git clone other project sources&lt;/li>
&lt;li>Configure and build them&lt;/li>
&lt;li>Run some commands at various steps of build process&lt;/li>
&lt;/ul>
&lt;p>A typical &lt;code>ExternalProject&lt;/code> declaration looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">ExternalProject_Add&lt;/span>(&lt;span style="color:#b84">foobar&lt;/span>
&lt;span style="color:#b84">GIT_REPOSITORY&lt;/span> &lt;span style="color:#b84">git@github.com:FooCo/FooBar.git&lt;/span>
&lt;span style="color:#b84">GIT_TAG&lt;/span> &lt;span style="color:#b84">origin/release/1.2.3&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with it was that it did download at &lt;strong>build&lt;/strong> time, which doesn&amp;rsquo;t allow you to link to your dependencies targets - you need to link to library files produced after the build like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">target_include_directories&lt;/span>(&lt;span style="color:#b84">your_target&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">&amp;lt;path-to-foorbar-includes&amp;gt;&lt;/span>
&lt;span style="color:#b84">target_link_libraries(your_target&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">&amp;lt;path-to-a-build-foorbar-library&amp;gt;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This wasn&amp;rsquo;t convenient, as a lot of dependencies build internals spilled into your build files and you needed to do a lot more work than simply linking to dependencies' targets.&lt;/p>
&lt;p>&lt;code>FetchContent&lt;/code> solves that problem by downloading the dependency at &lt;strong>configure&lt;/strong> time, which allows you to do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">FetchContent_Declare&lt;/span>(&lt;span style="color:#b84">foobar&lt;/span>
&lt;span style="color:#b84">GIT_REPOSITORY&lt;/span> &lt;span style="color:#b84">git@github.com:FooCo/FooBar.git&lt;/span>
&lt;span style="color:#b84">GIT_TAG&lt;/span> &lt;span style="color:#b84">origin/release/1.2.3&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">FetchContent_MakeAvailable&lt;/span>(&lt;span style="color:#b84">foobar&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#998;font-style:italic"># somewhere later...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">target_link_libraries&lt;/span>(&lt;span style="color:#b84">your_target&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">foobar_target&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are some downsides to using FetchContent, however:&lt;/p>
&lt;ul>
&lt;li>Your initial configuration step might take a lot of time if you have a lot of dependencies, because some repos might take a lot of time to download (it can take minutes!). However, with &lt;code>ExternalProject&lt;/code> you can get the same problem, but during the build process instead.&lt;/li>
&lt;li>Some libraries might depend on other libraries being built and installed on the system. They will use &lt;code>find_package&lt;/code> or &lt;code>find_library&lt;/code> to find them and this might cause some problems for you. I&amp;rsquo;ll talk about it &lt;a href="#find_package">find_package&lt;/a> section of this article in more detail.&lt;/li>
&lt;/ul>
&lt;h2 id="adding-sfml-as-a-dependency">Adding SFML as a dependency&lt;/h2>
&lt;p>Create &lt;code>depedencies/CMakeLists.txt&lt;/code> and &lt;code>dependencies/sfml/CMakeLists.txt&lt;/code>. We have the following structure now:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── CMakeLists.txt
├── dependencies
│   ├── CMakeLists.txt
│   └── sfml
│   └── CMakeLists.txt
└── src
├── CMakeLists.txt
└── main.cpp
&lt;/code>&lt;/pre>&lt;blockquote class="hint-info">
I like naming dependencies and their directories in lowercase, because it allows me to not have to not think if the third-party dependency directory is named &amp;ldquo;openAL&amp;rdquo;, &amp;ldquo;OpenAL&amp;rdquo; - it&amp;rsquo;ll be just &amp;ldquo;openal&amp;rdquo;. &amp;ldquo;ImGui-SFML&amp;rdquo; will be &amp;ldquo;imgui-sfml&amp;rdquo;.
&lt;/blockquote>
&lt;p>First, let&amp;rsquo;s add &lt;code>add_subdirectory(dependencies)&lt;/code> to our root &lt;code>CMakeLists.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#998;font-style:italic"># ...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">dependencies&lt;/span>) &lt;span style="color:#998;font-style:italic"># add this
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">src&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>dependencies/CMakeLists.txt&lt;/code> looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">include&lt;/span>(&lt;span style="color:#b84">FetchContent&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">FetchContent_Declare&lt;/span>(
&lt;span style="color:#b84">sfml&lt;/span>
&lt;span style="color:#b84">GIT_REPOSITORY&lt;/span> &lt;span style="color:#b84">&amp;#34;https://github.com/SFML/SFML&amp;#34;&lt;/span>
&lt;span style="color:#b84">GIT_TAG&lt;/span> &lt;span style="color:#b84">2f11710abc5aa478503a7ff3f9e654bd2078ebab&lt;/span> &lt;span style="color:#998;font-style:italic"># 2.5.1
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">sfml&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that you can specify &lt;code>GIT_TAG&lt;/code> by the name and not by the commit hash, but referencing by commit hash makes &lt;code>FetchContent&lt;/code> quicker, because it doesn&amp;rsquo;t have to connect the remote to check if the tag hasn&amp;rsquo;t been modified.&lt;/p>
&lt;p>Next, &lt;code>dependencies/sfml/CMakeLists.txt&lt;/code> (I&amp;rsquo;ll explain what goes on here a bit later):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">message&lt;/span>(&lt;span style="color:#b84">STATUS&lt;/span> &lt;span style="color:#b84">&amp;#34;Fetching SFML...&amp;#34;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#998;font-style:italic"># No need to build audio and network modules
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">SFML_BUILD_AUDIO&lt;/span> &lt;span style="color:#b84">FALSE&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">SFML_BUILD_NETWORK&lt;/span> &lt;span style="color:#b84">FALSE&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">FetchContent_MakeAvailable&lt;/span>(&lt;span style="color:#b84">sfml&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>src/CMakeLists.txt&lt;/code> looks like this now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">add_executable&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">main.cpp&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">target_link_libraries&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">sfml-graphics&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally, let&amp;rsquo;s change our &lt;code>src/main.cpp&lt;/code> to the following &amp;ldquo;SFML Hello world&amp;rdquo; code which is used in its many examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Graphics.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">main&lt;/span>()
{
sf&lt;span style="font-weight:bold">::&lt;/span>RenderWindow window(sf&lt;span style="font-weight:bold">::&lt;/span>VideoMode(&lt;span style="color:#099">200&lt;/span>, &lt;span style="color:#099">200&lt;/span>), &lt;span style="color:#b84">&amp;#34;SFML works!&amp;#34;&lt;/span>);
sf&lt;span style="font-weight:bold">::&lt;/span>CircleShape shape(&lt;span style="color:#099">100.f&lt;/span>);
shape.setFillColor(sf&lt;span style="font-weight:bold">::&lt;/span>Color&lt;span style="font-weight:bold">::&lt;/span>Green);
&lt;span style="font-weight:bold">while&lt;/span> (window.isOpen())
{
sf&lt;span style="font-weight:bold">::&lt;/span>Event event;
&lt;span style="font-weight:bold">while&lt;/span> (window.pollEvent(event))
{
&lt;span style="font-weight:bold">if&lt;/span> (event.type &lt;span style="font-weight:bold">==&lt;/span> sf&lt;span style="font-weight:bold">::&lt;/span>Event&lt;span style="font-weight:bold">::&lt;/span>Closed)
window.close();
}
window.clear();
window.draw(shape);
window.display();
}
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#099">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you&amp;rsquo;re building on Windows, run the generation step again and set &lt;code>BUILD_SHARED_LIBS&lt;/code> to &lt;code>OFF&lt;/code> so that SFML doesn&amp;rsquo;t make it &lt;code>ON&lt;/code> causing issues with DLLs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake -DBUILD_SHARED_LIBS&lt;span style="font-weight:bold">=&lt;/span>OFF &amp;lt;source-dir&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>More about this in &lt;a href="#copying-dlls-on-windows">&amp;ldquo;Copying DLLs on Windows&amp;rdquo;&lt;/a> section.&lt;/p>
&lt;p>Now, let&amp;rsquo;s build the project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A lot of the time can pass after &amp;ldquo;Fetching SFML&amp;hellip;&amp;rdquo; message is displayed (even a minute or so).&lt;/p>
&lt;p>This is normal and can be caused by your Internet connection, GitHub being slow, or older versions of CMake where &lt;code>FetchContent&lt;/code> is not as quick as it can be (the developers seem to be working on its speed, so try to use the oldest version of CMake).&lt;/p>
&lt;p>A lot of dependencies can be downloaded much quicker if you download a release zip instead, for example for SFML we can do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">FetchContent_Declare&lt;/span>(
&lt;span style="color:#b84">sfml&lt;/span>
&lt;span style="color:#b84">URL&lt;/span> &lt;span style="color:#b84">https://github.com/SFML/SFML/archive/refs/tags/2.5.1.zip&lt;/span>
&lt;span style="color:#b84">URL_HASH&lt;/span> &lt;span style="color:#b84">2c4438b3e5b2d81a6e626ecf72bf75be&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s also a good idea to specify &lt;code>URL_HASH&lt;/code> here to not download anything which you didn&amp;rsquo;t expect. You can usually find md5 hash or release in release notes or calculate it yourself using &lt;code>md5sum&lt;/code>.&lt;/p>
&lt;p>Finally, run &lt;code>src/example_exe&lt;/code> and you&amp;rsquo;ll see this:&lt;/p>
&lt;figure>&lt;img src="sfml-simple.png"/>
&lt;/figure>
&lt;p>Now, let&amp;rsquo;s see what&amp;rsquo;s going on in &lt;code>dependencies/sfml/CMakeLists.txt&lt;/code>.&lt;/p>
&lt;p>First of all, we have a message which just prints &amp;ldquo;Fetching SFML&amp;hellip;&amp;quot;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">message&lt;/span>(&lt;span style="color:#b84">&amp;#34;Fetching SFML...&amp;#34;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also have it say where it will fetch SFML from, at which commit, which version, etc. Having something printed there is useful, because otherwise you&amp;rsquo;ll not be able to take which dependency takes a lot of time to download (or fails at configuration step). However, it will also print it every time you run a generation step, even if nothing will get downloaded. I think it&amp;rsquo;s not a big deal.&lt;/p>
&lt;p>Then, we have a couple of &lt;code>set&lt;/code> calls which need to be done before &lt;code>FetchContent_MakeAvailable&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">SFML_BUILD_AUDIO&lt;/span> &lt;span style="color:#b84">FALSE&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">SFML_BUILD_NETWORK&lt;/span> &lt;span style="color:#b84">FALSE&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>A lot of libraries allow you to modify their behaviour and build process by setting CMake variables. CMake has a complex way of how &lt;code>option&lt;/code> and &lt;code>set(... CACHE ...)&lt;/code> behave depending on if you have defined the variable or not. Sometimes a simple &lt;code>set&lt;/code> is not enough and you&amp;rsquo;ll need to do a &lt;code>set(... CACHE ...)&lt;/code> and even &lt;code>set(... CACHE ... FORCE)&lt;/code> to stop dependency&amp;rsquo;s CMakeLists.txt from overwriting the variable you&amp;rsquo;re trying to set.&lt;/p>
&lt;blockquote class="hint-info">
It&amp;rsquo;s a good practice to take a look at what gets built by default in your dependencies and tell CMake to build only what you need from the dependency (some libraries can build examples, docs and tests by default, which you probably don&amp;rsquo;t need).
&lt;/blockquote>
&lt;p>Finally, we call &lt;code>FetchContent_MakeAvailable&lt;/code> which basically does some internal &lt;code>FetchContent&lt;/code> variable and then calls &lt;code>add_subdirectory&lt;/code> for the directory it has downloaded making dependency&amp;rsquo;s targets available to you.&lt;/p>
&lt;blockquote class="hint-info">
The source files of SFML can now be found in &lt;code>*build_dir*/_deps/sfml-src&lt;/code>, SFML&amp;rsquo;s build directory and produced binaries can be found in &lt;code>*build_dir*/_deps/sfml-build&lt;/code>.
&lt;/blockquote>
&lt;h2 id="adding-dear-imgui-and-imgui-sfml-as-dependencies">Adding Dear ImGui and ImGui-SFML as dependencies&lt;/h2>
&lt;p>Now, let&amp;rsquo;s look at something more complicated.&lt;/p>
&lt;p>I want to add &lt;a href="https://github.com/eliasdaler/imgui-sfml">ImGui-SFML&lt;/a> as a dependency - it&amp;rsquo;s the library that allows you to easily integrate &lt;a href="https://github.com/ocornut/imgui">Dear ImGui&lt;/a> and SFML. Let&amp;rsquo;s add Dear ImGui as a dependency first.&lt;/p>
&lt;p>Add this to &lt;code>dependencies/CMakeLists.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">FetchContent_Declare&lt;/span>(
&lt;span style="color:#b84">imgui&lt;/span>
&lt;span style="color:#b84">GIT_REPOSITORY&lt;/span> &lt;span style="color:#b84">https://github.com/ocornut/imgui&lt;/span>
&lt;span style="color:#b84">GIT_TAG&lt;/span> &lt;span style="color:#b84">35b1148efb839381b84de9290d9caf0b66ad7d03&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">FetchContent_MakeAvailable&lt;/span>(&lt;span style="color:#b84">imgui&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dear ImGui doesn&amp;rsquo;t have a CMake build for the time of writing. We still need to call &lt;code>FetchContent_MakeAvailable&lt;/code>, though, so that we get &lt;code>imgui_SOURCE_DIR&lt;/code> variable set which we&amp;rsquo;ll use when setting up ImGui-SFML in a moment.&lt;/p>
&lt;p>Next, let&amp;rsquo;s add ImGui-SFML to &lt;code>dependencies/CMakeLists.txt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">FetchContent_Declare&lt;/span>(
&lt;span style="color:#b84">imgui-sfml&lt;/span>
&lt;span style="color:#b84">GIT_REPOSITORY&lt;/span> &lt;span style="color:#b84">https://github.com/eliasdaler/imgui-sfml&lt;/span>
&lt;span style="color:#b84">GIT_TAG&lt;/span> &lt;span style="color:#b84">82dc2033e51b8323857c3ae1cf1f458b3a933c35&lt;/span>
)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">add_subdirectory&lt;/span>(&lt;span style="color:#b84">imgui-sfml&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, we&amp;rsquo;ll create &lt;code>dependency/imgui-sfml/CMakeLists.txt&lt;/code>, which looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">message&lt;/span>(&lt;span style="color:#b84">STATUS&lt;/span> &lt;span style="color:#b84">&amp;#34;Fetching ImGui-SFML...&amp;#34;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">IMGUI_DIR&lt;/span> &lt;span style="font-weight:bold">${&lt;/span>&lt;span style="color:#008080">imgui_SOURCE_DIR&lt;/span>&lt;span style="font-weight:bold">}&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">IMGUI_SFML_FIND_SFML&lt;/span> &lt;span style="color:#b84">OFF&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">set&lt;/span>(&lt;span style="color:#b84">IMGUI_SFML_IMGUI_DEMO&lt;/span> &lt;span style="color:#b84">ON&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">FetchContent_MakeAvailable&lt;/span>(&lt;span style="color:#b84">imgui-sfml&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nothing special - we need to set &lt;code>IMGUI_DIR&lt;/code> to a place where Dear ImGui sources can be found and set &lt;code>IMGUI_SFML_FIND_SFML&lt;/code> to &lt;code>OFF&lt;/code> so that ImGui-SFML doesn&amp;rsquo;t attempt to call &lt;code>find_package(SFML)&lt;/code> which will fail (more about that in &lt;code>find_package&lt;/code> section a bit later).&lt;/p>
&lt;p>Note that &lt;code>add_subdirectory(imgui-sfml)&lt;/code> should be place before &lt;code>FetchContent_MakeAvailable(imgui)&lt;/code> call so that &lt;code>imgui_SOURCE_DIR&lt;/code> gets defined.&lt;/p>
&lt;p>Next, let&amp;rsquo;s change the contents of &lt;code>src/main.cpp&lt;/code> to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Graphics/RenderWindow.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/System/Clock.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Window/Event.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;imgui-SFML.h&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;imgui.h&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">main&lt;/span>() {
sf&lt;span style="font-weight:bold">::&lt;/span>RenderWindow window(sf&lt;span style="font-weight:bold">::&lt;/span>VideoMode(&lt;span style="color:#099">1280&lt;/span>, &lt;span style="color:#099">720&lt;/span>), &lt;span style="color:#b84">&amp;#34;ImGui + SFML = &amp;lt;3&amp;#34;&lt;/span>);
window.setFramerateLimit(&lt;span style="color:#099">60&lt;/span>);
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Init(window);
sf&lt;span style="font-weight:bold">::&lt;/span>Clock deltaClock;
&lt;span style="font-weight:bold">while&lt;/span> (window.isOpen()) {
sf&lt;span style="font-weight:bold">::&lt;/span>Event event;
&lt;span style="font-weight:bold">while&lt;/span> (window.pollEvent(event)) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>ProcessEvent(event);
&lt;span style="font-weight:bold">if&lt;/span> (event.type &lt;span style="font-weight:bold">==&lt;/span> sf&lt;span style="font-weight:bold">::&lt;/span>Event&lt;span style="font-weight:bold">::&lt;/span>Closed) {
window.close();
}
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Update(window, deltaClock.restart());
ImGui&lt;span style="font-weight:bold">::&lt;/span>ShowDemoWindow();
window.clear();
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Render(window);
window.display();
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Shutdown();
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#099">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a &amp;ldquo;hello world&amp;rdquo; of ImGui-SFML - it calls all the necessary functions for ImGui-SFML to do its thing and calls &lt;code>ImGui::ShowDemoWindow&lt;/code> which is a great way to see how many things Dear ImGui can do.&lt;/p>
&lt;p>Finally, we change &lt;code>target_link_libraries&lt;/code> call in &lt;code>src/CMakeLists.txt&lt;/code> to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">target_link_libraries&lt;/span>(&lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">ImGui-SFML::ImGui-SFML&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, that&amp;rsquo;s it! Notice that the implicit linking to the &lt;code>sfml-graphics&lt;/code> is gone - ImGui-SFML links to it in its build files, so now you don&amp;rsquo;t need to link to SFML directly.&lt;/p>
&lt;p>Finally, let&amp;rsquo;s build our program and you&amp;rsquo;ll see something like this (I opened a few menus to make the screenshot more interesting).&lt;/p>
&lt;figure>&lt;img src="imgui-sfml.png"/>
&lt;/figure>
&lt;h2 id="speeding-up-your-builds">Speeding up your builds&lt;/h2>
&lt;p>Of course, having to rebuild dependencies from scratch can take a lot of time. There&amp;rsquo;s a simple solution to that: &lt;a href="https://github.com/ccache/ccache">ccache&lt;/a>. This amazing program will cache all the object files you build and then instead of compiling the same source file from scratch over and over, it&amp;rsquo;ll just use the cached object file instead of doing compilation.&lt;/p>
&lt;p>It works with Clang and GCC and a couple of other compilers. MSVC is not supported, unfortunately.&lt;/p>
&lt;p>To use it, simply install it somewhere on your system and then do this on CMake configuration step:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake ... --DCMAKE_CXX_COMPILER_LAUNCHER&lt;span style="font-weight:bold">=&lt;/span>ccache ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also add this to your CMake builds to not have to set &lt;code>CMAKE_CXX_COMPILER_LAUNCHER&lt;/code> manually every time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">find_program&lt;/span>(&lt;span style="color:#b84">CCACHE_FOUND&lt;/span> &lt;span style="color:#b84">ccache&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">if&lt;/span>(&lt;span style="color:#b84">CCACHE_FOUND&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999">set_property&lt;/span>(&lt;span style="color:#b84">GLOBAL&lt;/span> &lt;span style="color:#b84">PROPERTY&lt;/span> &lt;span style="color:#b84">RULE_LAUNCH_COMPILE&lt;/span> &lt;span style="color:#b84">ccache&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">endif&lt;/span>(&lt;span style="color:#b84">CCACHE_FOUND&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-fetchcontent-with-local-source-directories">Using FetchContent with local source directories&lt;/h2>
&lt;p>Sometimes it can be useful to download sources for dependencies and have FetchContent use them instead of fetching them from the Web. This can be needed for a few reasons:&lt;/p>
&lt;ul>
&lt;li>You don&amp;rsquo;t want to download sources again and again when you remove your build directories&lt;/li>
&lt;li>You&amp;rsquo;re going somewhere where Internet connection is poor or not available&lt;/li>
&lt;li>You want to do some source changes and see how the dependency will behave with them.&lt;/li>
&lt;/ul>
&lt;p>This is easy to do. Just set &lt;code>FETCHCONTENT_SOURCE_DIR_&amp;lt;lib&amp;gt;&lt;/code> to your dependency source dir and you&amp;rsquo;re done, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake -DFETCHCOUNTENT_SOURCE_DIR_SFML&lt;span style="font-weight:bold">=&lt;/span>&amp;lt;sfml-dir&amp;gt; &amp;lt;main-project-source-dir&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that even if your library is named &lt;code>sfml&lt;/code> in CMake, you&amp;rsquo;ll need to set &lt;code>FETCHCONTENT_SOURCE_DIR_SFML&lt;/code> and not &lt;code>FETCHCONTENT_SOURCE_DIR_sfml&lt;/code>.&lt;/p>
&lt;h2 id="some-notes-about-libraries-which-dont-behave-well">Some notes about libraries which don&amp;rsquo;t behave well&lt;/h2>
&lt;p>In the example I&amp;rsquo;ve showed you, everything went pretty well. In most cases it won&amp;rsquo;t - you&amp;rsquo;ll spend a lot more time trying to get the library to work with your project, so let&amp;rsquo;s look at some common cases.&lt;/p>
&lt;h3 id="missing-or-poorly-written-cmake-build">Missing or poorly written CMake build&lt;/h3>
&lt;p>Not all libraries are built with CMake, Dear ImGui and Lua being examples. In some cases, there&amp;rsquo;s a CMake build, but it can be outdated or written in older CMake which makes build targets essentially useless (e.g. instead of &lt;code>target_include_libraries&lt;/code> which carry transitive include directory dependencies, the library can use &lt;code>include_directories&lt;/code> which will force you to manually specify include directories and other things for the library you link to).&lt;/p>
&lt;p>There are several ways of handling this:&lt;/p>
&lt;ul>
&lt;li>The best, but most complicated way is to fork the project, fix the CMake build and submit a PR. Until the PR is merged, you point &lt;code>FetchContent&lt;/code> to the branch of your fork and wait. It&amp;rsquo;s difficult, but it helps a lot of people in the future. I&amp;rsquo;ve done it myself and noticed that CMake builds of the libraries I use (SDL, for example) have improved gradually over the years thanks to other people&amp;rsquo;s contributions&lt;/li>
&lt;li>Use some &amp;ldquo;alternative&amp;rdquo; CMake build/fork of a library. For example, for Lua I use &lt;a href="https://github.com/LuaDist/lua">this repo&lt;/a> and for GLEW, I use &lt;a href="https://github.com/Perlmint/glew-cmake">this one&lt;/a>.&lt;/li>
&lt;li>You can use &lt;code>FetchContent&lt;/code> for getting source code of the library and then write the needed CMake build code from scratch as I&amp;rsquo;ve done in &lt;a href="https://github.com/eliasdaler/imgui-fetchcontent">this example&lt;/a> of using Dear ImGui with SDL with FetchContent.&lt;/li>
&lt;/ul>
&lt;h3 id="build_shared_libs">BUILD_SHARED_LIBS&lt;/h3>
&lt;p>A lot of libraries tend to ignore &lt;code>BUILD_SHARED_LIBS&lt;/code> and either build shared libraries by default or build both static and shared library unless you tell it not to do that. You&amp;rsquo;ll probably need to look at your dependency&amp;rsquo;s &lt;code>CMakeList.txt&lt;/code> to understand how to build a static or shared library depending on your needs.&lt;/p>
&lt;p>In SFML&amp;rsquo;s case, if you don&amp;rsquo;t set &lt;code>BUILD_SHARED_LIBS&lt;/code> to &lt;code>OFF&lt;/code>, it&amp;rsquo;ll just build shared libraries, which is a bit frustrating. To fix this, you&amp;rsquo;ll need to set &lt;code>BUILD_SHARED_LIBS&lt;/code> to &lt;code>OFF&lt;/code> if you need to build SFML as static libraries.&lt;/p>
&lt;h3 id="copying-dlls-on-windows">Copying DLLs on Windows&lt;/h3>
&lt;p>If you&amp;rsquo;re using dynamic linking when building on Windows, you&amp;rsquo;ll need to copy DLLs to the directory where your executable is built, so that it can find them. This can be done by adding the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#998;font-style:italic"># Copy DLLs needed for runtime on Windows
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999">if&lt;/span>(&lt;span style="color:#b84">WIN32&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999">if&lt;/span> (&lt;span style="color:#b84">BUILD_SHARED_LIBS&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999">add_custom_command&lt;/span>(&lt;span style="color:#b84">TARGET&lt;/span> &lt;span style="color:#b84">example_exe&lt;/span> &lt;span style="color:#b84">POST_BUILD&lt;/span>
&lt;span style="color:#b84">COMMAND&lt;/span> &lt;span style="font-weight:bold">${&lt;/span>&lt;span style="color:#008080">CMAKE_COMMAND&lt;/span>&lt;span style="font-weight:bold">}&lt;/span> &lt;span style="color:#b84">-E&lt;/span> &lt;span style="color:#b84">copy_if_different&lt;/span>
&lt;span style="font-weight:bold">$&amp;lt;&lt;/span>&lt;span style="color:#008080">TARGET_FILE:ImGui-SFML::ImGui-SFML&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">$&amp;lt;&lt;/span>&lt;span style="color:#008080">TARGET_FILE:sfml-graphics&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">$&amp;lt;&lt;/span>&lt;span style="color:#008080">TARGET_FILE:sfml-window&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">$&amp;lt;&lt;/span>&lt;span style="color:#008080">TARGET_FILE:sfml-system&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">$&amp;lt;&lt;/span>&lt;span style="color:#008080">TARGET_FILE_DIR:example_exe&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999">endif&lt;/span>()&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">endif&lt;/span>()&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basically, CMake will take build artifacts of &lt;code>ImGui-SFML&lt;/code>, &lt;code>sfml-graphics&lt;/code>, &lt;code>sfml-window&lt;/code> and &lt;code>sfml-system&lt;/code> targets (DLLs) and copy them to the directory where executable &lt;code>example_exe&lt;/code> will be built. Note that this is only done when you&amp;rsquo;re building your project, not installing it (when you run &lt;code>cmake --build . --target install&lt;/code>). For that, you&amp;rsquo;ll need to add similar install steps to your build script.&lt;/p>
&lt;h3 id="find_package">find_package&lt;/h3>
&lt;p>If your dependency depends on other dependencies and uses &lt;code>find_package&lt;/code> to find them, this can lead to a lot of problems, because in some cases, &lt;code>find_package&lt;/code> tries to find built library files and does it in system directories. If you don&amp;rsquo;t have this library built or installed system-wide, &lt;code>find_package&lt;/code> will fail, even though you build the dependency of dependency yourself. This issue is still not solved and discussion about it can be found &lt;a href="https://gitlab.kitware.com/cmake/cmake/-/issues/17735">here&lt;/a>.&lt;/p>
&lt;p>To handle this, make a PR or ask a library maintainer to add an option to skip &lt;code>find_package&lt;/code> call if some option like &lt;code>XXX_FIND_Y&lt;/code> is set to &lt;code>FALSE&lt;/code>. For example, ImGui-SFML will not call &lt;code>find_package(SFML)&lt;/code> if &lt;code>IMGUI_SFML_FIND_SFML&lt;/code> is set to &lt;code>FALSE&lt;/code>. Another way to make your library more friendly is to check if the targets you want to link to are already present, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">if&lt;/span> (&lt;span style="color:#b84">NOT&lt;/span> &lt;span style="color:#b84">TARGET&lt;/span> &lt;span style="color:#b84">&amp;lt;target_of_dependency&amp;gt;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999">find_package&lt;/span>(&lt;span style="color:#b84">&amp;lt;dependency&amp;gt;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">endif&lt;/span>()&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#998;font-style:italic"># ...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">target_link_libraries&lt;/span>(&lt;span style="color:#b84">&amp;lt;target&amp;gt;&lt;/span> &lt;span style="color:#b84">PUBLIC&lt;/span> &lt;span style="color:#b84">&amp;lt;target_of_dependency&amp;gt;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I did this to fix SDL_image not behaving well with its dependency on SDL which can be seen in &lt;a href="https://github.com/libsdl-org/SDL_image/pull/170">this PR&lt;/a>.&lt;/p>
&lt;p>If you can&amp;rsquo;t do that for some reason, you&amp;rsquo;ll have to use &lt;code>ExternalProject&lt;/code>. For example, if libA depends on libB and uses &lt;code>find_package&lt;/code> to find libB, then you need to to build and install &lt;code>libB&lt;/code> first via &lt;code>ExternalProject&lt;/code> and only then build &lt;code>libA&lt;/code>&amp;rsquo;s so that &lt;code>find_package(libB)&lt;/code> succeeds. This is very complicated, which makes the first solution (modifying the CMakeLists.txt which calls &lt;code>find_package&lt;/code> via any means) much easier in practice.&lt;/p>
&lt;h2 id="closing-thoughts">Closing thoughts&lt;/h2>
&lt;p>CMake is quite complex, and I think I only scratched the surface of how to manage a CMake project and its dependencies. However, I hope that you&amp;rsquo;ve found this article useful and it&amp;rsquo;ll be a good step to get you started and make your builds easier to manage.&lt;/p>
&lt;p>Here are some recommended CMake resources to help you further:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://crascit.com/professional-cmake/">Professional CMake: A Practical Guide&lt;/a> by Craig Scott. The best and most up-to-date book about CMake. It will teach you most of the things you&amp;rsquo;ll ever need from CMake. I use it as a CMake reference all the time.&lt;/li>
&lt;li>&lt;a href="https://cmake.org/cmake/help/v3.20/guide/tutorial/index.html">CMake tutorial&lt;/a> and &lt;a href="https://cmake.org/cmake/help/v3.20/manual/cmake-buildsystem.7.html">cmake-buildsystem(7)&lt;/a> - nice overview of main CMake things and main CMake concepts in general&lt;/li>
&lt;li>&lt;a href="https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/">&amp;ldquo;It&amp;rsquo;s time to do CMake Right&amp;rdquo;&lt;/a> &lt;a href="https://web.archive.org/web/20210415182304/https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/">(archive)&lt;/a> by Pablo Arias. A fantastic article about writing CMake for libraries meant to be used for other people and easy to include as a dependency in other projects.&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=eC9-iRN2b04">&amp;ldquo;Using Modern CMake Patterns to Enforce a Good Modular Design&amp;rdquo;&lt;/a> by Mathieu Ropert. A very nice talk about writing good CMake scripts.&lt;/li>
&lt;/ul></description></item><item><title>Porting my engine from SFML to SDL</title><link>https://eliasdaler.github.io/hugo-test/posts/porting-to-sdl/</link><pubDate>Sun, 17 May 2020 00:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/porting-to-sdl/</guid><description>&lt;p>Recently I&amp;rsquo;ve ported my game/engine from SFML to SDL. This was not an easy task
and took me two weeks of hard work (3-4 hours on weekdays, 6-8 hours on
weekends). This article will explain why I did it and which challenges I&amp;rsquo;ve
faced in the process.&lt;/p>
&lt;figure>&lt;img src="title-image.png"/>
&lt;/figure>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#intro">Intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why-port-my-game-to-sdl">Why port my game to SDL?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#porting-to-sdl---the-process">Porting to SDL - the process&lt;/a>&lt;/li>
&lt;li>&lt;a href="#results">Results&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;figure>&lt;img src="first-game.png"
alt="My first SFML project"/>&lt;figcaption>
&lt;p>My first SFML project&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>SFML has played a huge part in my life. I&amp;rsquo;ve started using it 8 years ago (in
2012) and it was then when things finally clicked for me in game programming.&lt;/p>
&lt;figure>&lt;img src="re-creation.gif"
alt="My second SFML project"/>&lt;figcaption>
&lt;p>My second SFML project&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>SFML is a perfect library for a beginner. In one framework you have pretty much everything
to make a simple 2D game: window creation, 2D graphics helpers, TTF rendering,
audio, input, networking and so on. In a few lines of code you can get your
simple prototype running, compared to SDL or GLFW, where you need to do much
more (it was especially true before &lt;code>SDL_Renderer&lt;/code> became better and didn&amp;rsquo;t have
accelerated graphics support). If you&amp;rsquo;re not planning to make a huge game, but
still don&amp;rsquo;t want to use an engine, SFML is a solid choice. &lt;a href="https://www.youtube.com/playlist?list=PLB_ibvUSN7mzUffhiay5g5GUHyJRO4DYr">These
videos&lt;/a> show
how powerful SFML can be and how fast you can iterate with it.&lt;/p>
&lt;h2 id="why-port-my-game-to-sdl">Why port my game to SDL?&lt;/h2>
&lt;p>My main reason for porting to SDL was my engine&amp;rsquo;s preservation and future. SDL
is a very stable framework and is &lt;a href="https://en.wikipedia.org/wiki/List_of_games_using_SDL">widely
used&lt;/a> and supported
(especially by Valve - it&amp;rsquo;s basically integrated into Steam at this point and
been used as a main tool for porting many games to Linux).&lt;/p>
&lt;p>As I developed my games and engine for yet another year, I&amp;rsquo;ve realized that my
engine will be with me for a really long time. At the same time, OSes don&amp;rsquo;t
stand still - they sometimes change their APIs (macOS especially loves to do
this), they introduce new bugs and incompatibilities. SFML was pretty
up-to-date in the 2012-2017, but then I&amp;rsquo;ve felt that it just couldn&amp;rsquo;t keep up
with rapidly changing environment. It still supported very old joysticks, for
example, but had some bugs popping up on macOS and its mobile phone support was
not supported well.&lt;/p>
&lt;p>SDL is a widely used framework and it&amp;rsquo;s a very nice thing - the bugs are
reported faster and get resolved quicker. When you have a lot of games running
on a framework, you don&amp;rsquo;t want to see it being broken - and so you tend to put
more effort into its support and preservation. This is not the same for SFML -
there are only a couple of commercial games made with it, and most of them are
not made by AAA or even AA studios.&lt;/p>
&lt;p>Another issue with SFML is a crawling speed of its development. There are &lt;a href="https://en.sfml-dev.org/forums/index.php?board=2.0">a
lot&lt;/a> of
long-awaited features and bugs to be fixed. This is a direct result of what I&amp;rsquo;ve
talked in the paragraph above - SFML is mostly a hobbyist library, so there&amp;rsquo;s
not a lot of developers working on it. Even one full-time developer would have
made a world of difference, but SFML doesn&amp;rsquo;t have them.&lt;/p>
&lt;p>One example of this is scancodes - I&amp;rsquo;ve provided &lt;a href="https://github.com/SFML/SFML/pull/1400">a PR for Linux
implementation&lt;/a>
two years ago. And even though the code was accepted, the implementation is not
merged into master, because other implementations are still not complete or buggy.&lt;/p>
&lt;p>There&amp;rsquo;s also a lot of conservatism from some people on SFML team - it&amp;rsquo;s mostly
justifiable, given that there&amp;rsquo;s not enough developer time to support all the
extra features and APIs, but at the same time it feels like you don&amp;rsquo;t have
enough things that could easily be added and be very useful.&lt;/p>
&lt;p>There&amp;rsquo;s also an &amp;ldquo;SFML 3&amp;rdquo; discussion floating around, which is about dropping
C++03 support in SFML and finally starting to use C++11 (and later) features and
making SFML&amp;rsquo;s API easier and safer to use, and dropping support for a lot of
things at the same time (e.g. the abstraction on threads can be removed, because
we have std::thread now). The discussion has been going around for years, but
there is still no clear sign of when such thing will be finally developed.&lt;/p>
&lt;p>You get the idea. SFML could be much greater than it is now, but basically
nothing has happened with it in the past 5 years, except for implementing some
features which SDL had for a long time.&lt;/p>
&lt;blockquote class="hint-info">
&lt;strong>Update (2022)&lt;/strong>: &lt;a href="https://vittorioromeo.info/">Vittorio Romeo&lt;/a> has been doing a lot of SFML modernization lately. So it&amp;rsquo;s not as grim as it seemed back then.
&lt;/blockquote>
&lt;p>I can go on, but here&amp;rsquo;s a summarization of all the things which made me choose
SDL over SFML:&lt;/p>
&lt;ul>
&lt;li>SDL has commercial support, which results in bugs being found and resolved
quicker&lt;/li>
&lt;li>SDL has better portability&lt;/li>
&lt;li>SDL deals with a lot of OS quirks (down to update versions for Windows, for
example)&lt;/li>
&lt;li>SFML will probably not get features which will make it superior for modern C++
development soon, so at this point using a C library is as good as using C++03
library for me.&lt;/li>
&lt;li>SDL has better gamepad support (thanks to its huge &lt;a href="https://github.com/gabomdq/SDL_GameControllerDB">controller
DB&lt;/a>).&lt;/li>
&lt;li>SDL handles multi-display setups better&lt;/li>
&lt;li>SDL has various features not present in SFML (IO streams abstraction, message
box abstraction, and so on)&lt;/li>
&lt;/ul>
&lt;h2 id="porting-to-sdl---the-process">Porting to SDL - the process&lt;/h2>
&lt;p>The porting process was very daunting at first - even though I&amp;rsquo;ve tried to keep
my SFML-related code separate, parts of it still leaked into higher level
things. I&amp;rsquo;ve also used a lot of graphical features of SFML, which SDL doesn&amp;rsquo;t
have in its &lt;code>SDL_Renderer&lt;/code> module to this day or which have entirely different
API from SFML&amp;rsquo;s.&lt;/p>
&lt;p>One thing that helped me moving quicker is realization that I can replace SFML
code with SDL code without breaking SFML part. Imagine if I just chose to not
link to SFML and start to rewrite all the things module by module - it would
take a lot of time to even get the thing to compile, getting it to run properly
would be even harder.&lt;/p>
&lt;p>I&amp;rsquo;ve decided to not use &lt;code>SDL_Renderer&lt;/code> or &lt;code>SDL_gpu&lt;/code> for rendering, because I&amp;rsquo;ve
realized that the porting would be much easier if I could write my own similar
classes for sprites, render textures and other stuff, so that its behaviour is
similar to SFML&amp;rsquo;s graphical primitives. I&amp;rsquo;ve chosen to write the whole graphics
part in OpenGL.&lt;/p>
&lt;figure>&lt;img src="imgui.png"
alt="Getting Dear ImGui to work with SDL/OpenGL was encouranging"/>&lt;figcaption>
&lt;p>Getting Dear ImGui to work with SDL/OpenGL was encouranging&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Before that, the only thing I knew about OpenGL is how to draw a triangle with
it, so it was additional challenge for me, but one that I took with a great
interest, because I wanted to properly learn modern OpenGL for a long time.&lt;/p>
&lt;p>However, this presented new problems - SFML uses legacy OpenGL (its immediate
mode with &lt;code>glBegin&lt;/code> and &lt;code>glEnd&lt;/code> everywhere), so I couldn&amp;rsquo;t just follow SFML&amp;rsquo;s
implementation to get my own version of its graphics API. I&amp;rsquo;m still glad that I
used so many parts of SFML&amp;rsquo;s graphics module, though, because a lot of OpenGL
concepts like vertex buffers (&lt;code>sf::VertexBuffer&lt;/code>), frame buffers
(&lt;code>sf::RenderTexture&lt;/code>), shaders (&lt;code>sf::Shader&lt;/code>), viewport matrix (&lt;code>sf::View&lt;/code>) and
other things had abstractions in SFML, so I understood the concepts well.&lt;/p>
&lt;p>A lot of tutorials helped me get used to OpenGL. Here are some of them:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learnopengl.com">learnopengl.com&lt;/a>, Joey de Vries tutorials&lt;/li>
&lt;li>&lt;a href="https://www.tomdalling.com/blog/category/modern-opengl/">Tom Dalling&amp;rsquo;s modern OpenGL
tutorials&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Table-of-Contents.html">Joe Groff&amp;rsquo;s OpenGL
articles&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For the math library, I&amp;rsquo;ve chosen &lt;a href="https://glm.g-truc.net/">glm&lt;/a>, which proved to be amazing and helped
me out with a lot of math stuff (especially matrices and transforms). I&amp;rsquo;ve
eventually replaced my own vector class with &lt;code>glm::vec2&lt;/code>/&lt;code>glm::ivec2&lt;/code> and
now it&amp;rsquo;s used consistently through the whole codebase (with SFML I had to
convert to &lt;code>sf::Vector2&amp;lt;T&amp;gt;&lt;/code> back and forth, which was annoying).&lt;/p>
&lt;p>The only huge problem I had with &lt;code>glm&lt;/code> is that it didn&amp;rsquo;t initialize its vectors
and matrices to zero by default. It wasn&amp;rsquo;t noticeable at first, but then I&amp;rsquo;ve
spent a few hours debugging some sprites being missing from time to time&amp;hellip;
turns out it was caused by uninitialized &lt;code>glm::vec2&lt;/code>. I turned on
&lt;code>GLM_FORCE_CTOR_INIT&lt;/code> and never looked back (I still try to initialize vectors
explicitly, but sometimes you just forget to do it!).&lt;/p>
&lt;p>As the result, I now have a bunch of classes closely following SFML&amp;rsquo;s API, but I
could finally change the API to my liking and not implement all the things that
I didn&amp;rsquo;t like or didn&amp;rsquo;t use.&lt;/p>
&lt;p>There was another problem - SFML screwed with OpenGL context even if I wasn&amp;rsquo;t
rendering anything with SFML&amp;rsquo;s graphics API. For example, creating an instance of
&lt;code>sf::RenderTexture&lt;/code> caused graphical errors and crashes. I didn&amp;rsquo;t even need to
call &lt;code>sf::RenderTexture::create&lt;/code> for it to happen! But other than that, creating
SFML objects along my own graphics objects didn&amp;rsquo;t cause any problems, so
good-ol' &lt;code>ifdef&lt;/code>&amp;rsquo;s came to the rescue:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">GraphicsComponent&lt;/span> &lt;span style="font-weight:bold">:&lt;/span> ... {
...
sf&lt;span style="font-weight:bold">::&lt;/span>Sprite sprite;
edge&lt;span style="font-weight:bold">::&lt;/span>Sprite sprite2; &lt;span style="color:#998;font-style:italic">// my verision of sprite
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>};
&lt;span style="color:#998;font-style:italic">// somewhere in the rendering system
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#999;font-weight:bold">#ifdef USE_SFML
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span> window.draw(gc.sprite);
&lt;span style="color:#999;font-weight:bold">#else
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span> window_sdl.draw(gc.sprite2);
&lt;span style="color:#999;font-weight:bold">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Why &lt;code>sprite&lt;/code> and &lt;code>sprite2&lt;/code>, you might ask? Because If I had written something
like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">GraphicsComponent&lt;/span> &lt;span style="font-weight:bold">:&lt;/span> ... {
...
&lt;span style="color:#999;font-weight:bold">#ifdef USE_SFML
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span> sf&lt;span style="font-weight:bold">::&lt;/span>Sprite sprite;
&lt;span style="color:#999;font-weight:bold">#else
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span> Sprite sprite;
&lt;span style="color:#999;font-weight:bold">#endif
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; then I&amp;rsquo;d get a lot of compiler errors in all the systems which used &lt;code>sprite&lt;/code>
in any way, but I chose a more iterative approach - I didn&amp;rsquo;t allow some
systems/functions to run in SDL mode and got them working properly one by one.&lt;/p>
&lt;p>Another thing that really saved me was making a small project with my engine
before the porting began. This way, it was easier to get things working
iteratively without breaking my main big project. Once I could get all the
graphical things working one by one in this small environments, I could finally
move on to making my game work correctly.&lt;/p>
&lt;p>Porting input was easy - I&amp;rsquo;m using an abstraction on keyboards and gamepads:
when you press &amp;ldquo;Z&amp;rdquo; on the keyboard or &amp;ldquo;A&amp;rdquo; on the gamepad, the &amp;ldquo;PrimaryAction&amp;rdquo;
event gets sent and the game logic handles it, instead of checking for
keyboard/gamepad state manually. Therefore, all I had to do was to replace the
code which handled framework&amp;rsquo;s events (&lt;code>sf::Event&lt;/code> to &lt;code>SDL_event&lt;/code>), and it was
all done - no changes to game input logic.&lt;/p>
&lt;p>At this point, my game was up and running. Even if it didn&amp;rsquo;t have proper shaders
and had some graphical issues, it was fully playable, which was really
satisfying, because it proved to me that my game logic was independent from the
framework it was running on (I didn&amp;rsquo;t need to change a thing in game logic, in
part because I didn&amp;rsquo;t export any SFML classes to Lua, so I only had to change
implementation of some C++/Lua bindings like &lt;code>setSpriteColor&lt;/code> or &lt;code>setTexture&lt;/code>)&lt;/p>
&lt;figure>&lt;img src="tomb-painter-1.png"
alt="Tomb Painter running Tomb Painter running for the first time on SDL. Some animations were broken, no palette or lighting shaders, but it’s playable!"/>&lt;figcaption>
&lt;p>Tomb Painter running Tomb Painter running for the first time on SDL. Some animations were broken, no palette or lighting shaders, but it’s playable!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>The audio proved to be a lot more trickier - I&amp;rsquo;ve initially just commented out
all audio code until I was done with everything else, but once I needed to port
my audio code I&amp;rsquo;ve decided to implement some simple Sound and Music class
similar to SFML&amp;rsquo;s using OpenAL-soft - and &lt;a href="https://indiegamedev.net/2020/02/15/the-complete-guide-to-openal-with-c-part-1-playing-a-sound/">these
tutorials&lt;/a>
really helped me out with it.&lt;/p>
&lt;p>Porting level editor was not easy. There were absolutely no problems with Dear
ImGui running on SDL instead of SFML - not much has changed in UI code, except
for me having to make some wrappers around my &lt;code>Sprite&lt;/code> classes to get
&lt;code>ImGui::Image&lt;/code> and &lt;code>ImGui::ImageButton&lt;/code> to work. However, I used a lot of SFML&amp;rsquo;s
more complex features for implementing level editor camera and drawing debug
info, so I had to spend a lot of time porting all of that to my own graphics system.&lt;/p>
&lt;figure>&lt;img src="editor.png"
alt="Level editor running"/>&lt;figcaption>
&lt;p>Level editor running&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="results">Results&lt;/h2>
&lt;p>Here&amp;rsquo;s the result of my porting efforts:&lt;/p>
&lt;figure>&lt;img src="commit.png"
alt="The final commit in porting branch. Game &amp;#43; engine is ~40k loc in total, so I change quite a big percentage of it."/>&lt;figcaption>
&lt;p>The final commit in porting branch. Game + engine is ~40k loc in total, so I change quite a big percentage of it.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>10 days have passed since the porting was finished, and so far I didn&amp;rsquo;t notice
any bugs caused by it. In fact, it was just yesterday that I remembered that I
have ported my game at all to SDL. And it&amp;rsquo;s a good thing, which makes that the
engine&amp;rsquo;s base is stronger than ever, but my main development process has not
slowed down a bit.&lt;/p>
&lt;p>SDL with modern OpenGL are pleasant to use, and now as I&amp;rsquo;m closer to low level, I can
implement things that wouldn&amp;rsquo;t be as easy to do with just SFML. Let&amp;rsquo;s see where
it leads me!&lt;/p>
&lt;p>Thanks for reading!&lt;/p></description></item><item><title>LuaVela - the LuaJIT fork I've worked on</title><link>https://eliasdaler.github.io/hugo-test/posts/luavela/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/luavela/</guid><description>&lt;p>Recently, IPONWEB open sourced its fork of LuaJIT called
&lt;a href="https://github.com/iponweb/luavela">LuaVela&lt;/a>. The original announcement post
can be found &lt;a href="http://lua-users.org/lists/lua-l/2019-08/msg00041.html">here&lt;/a>
where a lot of details about it can be found. For those who don&amp;rsquo;t know - my real
name is Ilya Daylidyonok, and I&amp;rsquo;m mentioned in the announcement!&lt;/p>
&lt;p>I&amp;rsquo;ve worked on LuaVela for the last 7 months and now I want to tell about my
experience.&lt;/p>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#intro">Intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="#luajits-2gb-problem">LuaJIT&amp;rsquo;s 2GB problem&lt;/a>&lt;/li>
&lt;li>&lt;a href="#forking-luajit">Forking LuaJIT&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-ive-found-interesting-about-luajit">What I&amp;rsquo;ve found interesting about LuaJIT&lt;/a>&lt;/li>
&lt;li>&lt;a href="#luavelas-new-features">LuaVela&amp;rsquo;s new features&lt;/a>&lt;/li>
&lt;li>&lt;a href="#my-contributions-to-luavela">My contributions to LuaVela&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future">Future&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Lua has been dear for me for a long time. It&amp;rsquo;s an amazing language. It&amp;rsquo;s easy to
integrate it with C++, it&amp;rsquo;s fast, and it&amp;rsquo;s a joy to write code with it. I&amp;rsquo;ve
used it in my games and other projects for the last 6 years, so it&amp;rsquo;s my &amp;ldquo;mother
tongue&amp;rdquo; as much as C++ at this point.&lt;/p>
&lt;p>Another thing that makes Lua dear to me is that &lt;a href="https://eliasdaler.wordpress.com/tag/tutorial/">the
articles&lt;/a> I&amp;rsquo;ve written about it
were received very well and this has given me a lot of motivation to write more.
If you Google &amp;ldquo;Lua C++&amp;rdquo;, you&amp;rsquo;ll see my blog somewhere on the first page (maybe
it&amp;rsquo;ll even be the first result!). That&amp;rsquo;s how popular the articles have gotten.&lt;/p>
&lt;p>I&amp;rsquo;ve been fascinated by compilers for a long time, and I&amp;rsquo;ve always wanted to do
some work in that field. And this became possible when I&amp;rsquo;ve started working at
IPONWEB.&lt;/p>
&lt;h2 id="luajits-2gb-problem">LuaJIT&amp;rsquo;s 2GB problem&lt;/h2>
&lt;p>You don&amp;rsquo;t usually stumble upon companies working on their own compilers (or even
forks of them). One of the reasons IPONWEB choose to do so, is that it hit
(in)famous limitation of LuaJIT: its 2GB RAM limit.&lt;/p>
&lt;p>LuaJIT was originally written with 32 bit architecture/pointers in mind. When
you ran it on 64 bit platforms, you had a limitation: you could only adress 1GB
of RAM (because of mmap limitations), so this was LuaJIT&amp;rsquo;s memory limit. In
newer Linux kernels the limit was raised to 2GB, but it still wasn&amp;rsquo;t enough for
some projects IPONWEB did. This became a serious problem by 2015. LuaJIT 2.1
wasn&amp;rsquo;t stable enough for production use at this point, and other possible
solutions to the problem the problem just weren&amp;rsquo;t good enough. People at IPONWEB
decided to fork LuaJIT.&lt;/p>
&lt;h2 id="forking-luajit">Forking LuaJIT&lt;/h2>
&lt;p>Lua community is one of the most segmented communities I&amp;rsquo;ve ever seen. LuaJIT
can be partially blamed for that. A lot of people stayed somewhere between Lua
5.1 and Lua 5.2 because they used LuaJIT. LuaJIT got huge performance gains
for them, so migrating to Lua 5.2 and Lua 5.3 was not possible.&lt;/p>
&lt;p>LuaJIT also has a lot forks. People add optimizations which work well for them,
but don&amp;rsquo;t work that well in general case. People fix bugs, which can&amp;rsquo;t be easily
ported to upstream, because of its cross-platform support and very high
standards to which patches must conform (which are justified!).&lt;/p>
&lt;p>When LuaVela (called uJIT internally until the release) became yet another fork,
people who started it wanted for it to conform to the standard (vanilla) Lua as
much as possible. A lot of tests were added to ensure standard conformance.
LuaVela is a &amp;ldquo;drop-in&amp;rdquo; replacement for Lua 5.1 and LuaJIT. It&amp;rsquo;s likely that if
you replace your Lua/LuaJIT headers in your code, you&amp;rsquo;ll just get LuaVela to
work with your code and might see performance benifits immediately.&lt;/p>
&lt;p>Another thing that was done early on was dropping cross-platform support. We
used LuaVela for projects which ran on x86-64 Linux only and it was difficult
for our small team to try to support all the other platforms.&lt;/p>
&lt;h2 id="what-ive-found-interesting-about-luajit">What I&amp;rsquo;ve found interesting about LuaJIT&lt;/h2>
&lt;p>During my first days at IPONWEB, I&amp;rsquo;ve started digging into LuaVela&amp;rsquo;s and
LuaJIT&amp;rsquo;s codebase. There is an in-depth
&lt;a href="http://lua-users.org/lists/lua-l/2009-11/msg00089.html">e-mail&lt;/a> by Mike Pall
(the author of LuaJIT) which explains some of the stuff about how LuaJIT works
and why it is so fast and good at generating assembly. I&amp;rsquo;ll go over a few things
I&amp;rsquo;ve found fascinating about LuaJIT&amp;rsquo;s implementation.&lt;/p>
&lt;p>First of all, LuaJIT&amp;rsquo;s interpreter is written in assembly (in
&lt;a href="https://luajit.org/dynasm.html">DynASM&lt;/a>, to be precise) and &lt;a href="http://luajit.org/performance_x86.html">it can perform
faster&lt;/a> than vanilla Lua 5.1 in 2-4
times. One of the reasons for that are some incredible performance optimizations
that were done in handcrafted assembly to reduce the number of RAM lookups and
stores. A lot of the computations are done using CPU registers - most of the
time you have function&amp;rsquo;s parameters and local variables stored in CPU registers
and so a lot of computations are done without accessing the RAM. There are also
some optimizations (like expression folding) which are done at script&amp;rsquo;s initial
convertion to bytecode (when your module is loaded by Lua).&lt;/p>
&lt;p>Another cool thing is that LuaJIT and C share the same stack and LuaJIT honors
C ABI to do function calls. This is one of the reason why Lua/C calls are so
cheap there - they&amp;rsquo;re almost identical to C function calls.&lt;/p>
&lt;p>LuaJIT&amp;rsquo;s interpreter is written in DynASM, a higher level assembly, which allows
you to write &amp;ldquo;macros&amp;rdquo;, have constants and other things to make your assembly
writing process faster, safer and easier to read. You can find LuaVela&amp;rsquo;s
improved interpreter
&lt;a href="https://github.com/iponweb/luavela/blob/master/src/vm_x86.dasc">here&lt;/a>. A lot
was done to refactor and document &lt;a href="https://github.com/LuaJIT/LuaJIT/blob/v2.1/src/vm_x86.dasc">original LuaJIT&amp;rsquo;s
interpreter&lt;/a>, so I
think that it&amp;rsquo;s a useful learning resource even if you don&amp;rsquo;t plan to use LuaVela
in your project.&lt;/p>
&lt;p>When it comes to JIT/compilation part, LuaJIT shines again - it uses a huge
number of optimizations to make generated assembly fast. It generates linear
&amp;ldquo;traces&amp;rdquo; - assembly without branches and jumps. The only jumps that are
there are &lt;em>exit conditions&lt;/em>: you compile a trace using some invariants and
assumptions, e.g. that some variable should stay constant or have a certain
type. When this assumption gets broken, you &lt;em>exit&lt;/em> the trace, and either find
another trace or just continue execution in the interpreter.&lt;/p>
&lt;p>All function calls in a trace are inlined - this one also gives a considerable
performance boost. There is also a huge number of &amp;ldquo;fold&amp;rdquo; optimizations which
transform things like &lt;code>2 + 2 + x + x&lt;/code> into &lt;code>4 + 2*x&lt;/code> (even function calls,
especially to math functions can be folded sometimes!).&lt;/p>
&lt;p>There are also built-ins like &lt;code>string.find&lt;/code> or &lt;code>math.abs&lt;/code> which are either
written in C/asm, or are written as C functions which tell LuaJIT which IRs to
emit, so you get very efficient assembly as the result of a final trace
generation.&lt;/p>
&lt;p>For example, calling &lt;code>math.abs&lt;/code> essentially turns into few instructions in a
trace. There&amp;rsquo;s no table lookup into &lt;code>math&lt;/code> table, there&amp;rsquo;s even no call to C&amp;rsquo;s
&lt;code>abs&lt;/code> function!&lt;/p>
&lt;p>LuaJIT&amp;rsquo;s IR is linear: it&amp;rsquo;s laid out contiguously in memory. It&amp;rsquo;s one of the
reasons why optimizations and code generation happen quickly and don&amp;rsquo;t have
noticeable performance overhead in most cases.&lt;/p>
&lt;h2 id="luavelas-new-features">LuaVela&amp;rsquo;s new features&lt;/h2>
&lt;p>What makes LuaVela different from other LuaJIT forks? I&amp;rsquo;ll quote the &lt;a href="http://lua-users.org/lists/lua-l/2019-08/msg00041.html">original
announcement post&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Full support for 64-bit memory without any tricks or hacks in the
interpreter and JIT compiler;&lt;/li>
&lt;li>&amp;ldquo;Sealing&amp;rdquo;: An ability to hide some data from the garbage collector.
In IPONWEB, we use this generation-like (or, better, Eden-like) trick
to mark data with the same lifetime as the application instance itself
reducing overall pressure on GC;&lt;/li>
&lt;li>Immutability: Data structures may be (recursively) marked immutable
in run-time. This implemented via an extension API, the syntax of the
language is unaffected;&lt;/li>
&lt;li>Coroutine timeouts: There are C-level extension APIs that allow to
control the life time of coroutines – once a coroutine runs for too
long, it is terminated by the virtual machine;&lt;/li>
&lt;li>Some new optimizations in the JIT compiler (but some of them are not
brand new if one compares with LuaJIT 2.1);&lt;/li>
&lt;li>New C- and Lua-level extension APIs;&lt;/li>
&lt;li>Platform-level sampling profiler;&lt;/li>
&lt;li>Memory usage profiler;&lt;/li>
&lt;li>Platform-level code coverage.&lt;/li>
&lt;li>CMake is used as a build system for the project;&lt;/li>
&lt;li>6 test suites are bundled with the project: Lua 5.1 test suite,
LuaJIT test suite, CERN MAD test suite (partially), lua-Harness test
suite and two suites written inside IPONWEB (for testing at Lua- and
C-level, respectively);&lt;/li>
&lt;li>Documentation bundle is included into the release, too. All the docs
are in the RST format and &lt;code>make docs&lt;/code> will build you the HTML version
if you have Sphinx installed.&lt;/li>
&lt;/ul>
&lt;h2 id="my-contributions-to-luavela">My contributions to LuaVela&lt;/h2>
&lt;p>Here&amp;rsquo;s some of the stuff I did in the 7 months that I&amp;rsquo;ve worked on LuaVela:&lt;/p>
&lt;ul>
&lt;li>Added &lt;code>ujit.table.size&lt;/code> built-in for counting non-nil elements in a Lua table (both array and hash parts)&lt;/li>
&lt;li>Created &lt;code>ujit.math&lt;/code> module which is used to test if number is finite, +-ifn or NaN (in &lt;a href="https://en.wikipedia.org/wiki/IEEE_754-1985">IEEE-754&lt;/a> terms)&lt;/li>
&lt;li>Implemented &lt;code>ujit.string.trim&lt;/code> and &lt;code>ujit.string.split&lt;/code> built-ins - the first one removes whitespace from both ends of the string, and another allows you to iterate over strings like this:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> t &lt;span style="font-weight:bold">=&lt;/span> {}
&lt;span style="font-weight:bold">for&lt;/span> token &lt;span style="font-weight:bold">in&lt;/span> ujit.string.split(&lt;span style="color:#b84">&amp;#34;a,b,c&amp;#34;&lt;/span>, &lt;span style="color:#b84">&amp;#34;,&amp;#34;&lt;/span>) &lt;span style="font-weight:bold">do&lt;/span>
table.insert(t)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="color:#998;font-style:italic">-- t == { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; }&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Improved byte code dumping. LuaJIT and LuaVela have &amp;ldquo;-b&amp;rdquo; flag used for
printing byte code of a Lua chunk. I&amp;rsquo;ve figured out that you can actually do
something close to gdb&amp;rsquo;s &lt;code>disas /s&lt;/code> with it (when source code lines are printed next to corresponding assembly). The resulting flag &amp;ldquo;-B&amp;rdquo; does this:&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="bytecode.png"/>
&lt;/figure>
&lt;ul>
&lt;li>Improved testing system and helped make it more consistent across different testing suites.&lt;/li>
&lt;li>Migrated repo from hg to Git. I used
&lt;a href="https://github.com/frej/fast-export">hg-fast-export&lt;/a> for this, but it wasn&amp;rsquo;t
simple as that. Initially uJIT started inside another repo, and so the history
was full of empty commits when the transfer to another repository happened.
Also &amp;ldquo;closing branch&amp;rdquo; commits from hg were adding a lot of noise. I&amp;rsquo;ve written a Python script which iterated over the entire history and rewrote it while excluding empty commits and saving authorship, time of commit and feature branches from HG repo.&lt;/li>
&lt;li>Made tons of CMake improvements - the most significant was adding support for
out of source build and testing. Another cool thing was migrating to
&lt;code>ExternalProject&lt;/code> for third party libraries, which made the build process a
lot cleaner. I also introduced some modern CMake practices in our build scripts, which made everyone&amp;rsquo;s lives a bit easier.&lt;/li>
&lt;li>Fixed non-conformant code to enable &lt;code>-std=c11&lt;/code> and &lt;code>-pedantic&lt;/code>. LuaJIT used
something close to GNU 99 standard for everything, but didn&amp;rsquo;t really specify
the standard. It turned out that GCC is using &lt;code>-std=gnu11&lt;/code> by default since
GCC 5, so we&amp;rsquo;ve decided to fix all non-conforming code. Some interesting changes:
&lt;ul>
&lt;li>&lt;code>-std=gnu11&lt;/code> allows you to forward declare enums, ISO C doesn&amp;rsquo;t&lt;/li>
&lt;li>You need to explicitly cast pointers to &lt;code>void*&lt;/code> before printing them with
&lt;code>printf&lt;/code>, e.g.:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="font-weight:bold">struct&lt;/span> some_type&lt;span style="font-weight:bold">*&lt;/span> ptr &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">&amp;amp;&lt;/span>some_obj;
printf(&lt;span style="color:#b84">&amp;#34;pointer: %p&amp;#34;&lt;/span>, (&lt;span style="color:#458;font-weight:bold">void&lt;/span>&lt;span style="font-weight:bold">*&lt;/span>)ptr);
&lt;span style="color:#998;font-style:italic">// ^^^^^^^
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Casting a function pointer to &lt;code>void*&lt;/code> is not allowed by C standard, but this is okay to do on Linux, and LuaJIT uses it often for storing callbacks, and dlsym returns void*, so I had to disable -pedantic for lines that do so.&lt;/li>
&lt;li>&lt;code>##__VA_ARGS__&lt;/code> is not in ISO C, which is painful, because if you have a macro with variadic arguments, you can&amp;rsquo;t pass &amp;ldquo;nothing&amp;rdquo; in such macros&lt;/li>
&lt;li>enum values must be initialized with integer constant expressions, but
LuaJIT used &lt;code>uint32_t&lt;/code> for &lt;code>x86Op&lt;/code> &lt;code>enum&lt;/code>&lt;/li>
&lt;li>expressions like these are permitted in GNU C, but not in ISO C:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span>() {
&lt;span style="font-weight:bold">return&lt;/span> g();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Implemented a process of mirroring patches from internal repo to a public one.
We have some internal docs and other secret stuff in the private repo, so I&amp;rsquo;ve
made a script which excludes changes to these files&lt;/li>
&lt;li>I&amp;rsquo;ve also done a lot of clean up for the code base in general to make
sure that when we open source the project, it looks as good as possible.&lt;/li>
&lt;/ul>
&lt;h2 id="future">Future&lt;/h2>
&lt;p>At the moment, the development of LuaVela is finished. We&amp;rsquo;ll fix critical bugs,
but we felt that LuaVela is close to being feature complete and fast enough for
most of our use cases, so we&amp;rsquo;ve moved on to other projects. LuaVela was open
sourced as a &amp;ldquo;thank you&amp;rdquo; for Lua and LuaJIT community and developers. I hope
that some of the unique things LuaVela has will be later ported to other active
forks and make the software which uses it even faster and better.&lt;/p>
&lt;p>I&amp;rsquo;ve enjoyed working on LuaVela: I&amp;rsquo;ve learned a lot about Lua and JIT
compilation. I&amp;rsquo;ve also got some real life C programming experience. It was
great.&lt;/p>
&lt;p>Thanks for reading!&lt;/p></description></item><item><title>Tomb Painter. The first dev log (2017-2018)</title><link>https://eliasdaler.github.io/hugo-test/posts/tomb-painter-first-dev-log/</link><pubDate>Sun, 06 Jan 2019 23:22:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/tomb-painter-first-dev-log/</guid><description>&lt;hr>
&lt;p>Hello, everyone. Today I&amp;rsquo;m ready to officially announce and talk about the game I&amp;rsquo;m currently working on!&lt;/p>
&lt;figure>&lt;img src="tomb-painter-logo.png"/>
&lt;/figure>
&lt;p>It&amp;rsquo;s called Tomb Painter and I&amp;rsquo;ve been working on it since August of 2017.&lt;/p>
&lt;figure>&lt;img src="characters.png"/>
&lt;/figure>
&lt;p>In the game, a painter arrives on mysterious island, which has strange things going on with it. Blob-shaped monsters made of paint start to appear from an ancient tomb. The only way to stop this is to paint beautiful patterns which were washed away by a flood that happened some time ago.&lt;/p>
&lt;p>The main mechanic is that you can draw on floors and paint stuff by hitting it with your brush. By painting on the floor, you solve different puzzles.&lt;/p>
&lt;figure>&lt;img src="gameplay.gif"/>
&lt;/figure>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#start-of-development">Start of development&lt;/a>&lt;/li>
&lt;li>&lt;a href="#game--engine-separation">Game / engine separation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cmake--fetchcontent--third-party-dependencies">CMake / FetchContent / Third party dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cutscene-system">Cutscene system&lt;/a>&lt;/li>
&lt;li>&lt;a href="#quest-and-saving-system">Quest and saving system&lt;/a>&lt;/li>
&lt;li>&lt;a href="#replay-system">Replay system&lt;/a>&lt;/li>
&lt;li>&lt;a href="#data--script-separation">Data / script separation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#other">Other&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="start-of-development">Start of development&lt;/h2>
&lt;p>I&amp;rsquo;ve started to work on this game, because developing &lt;a href="https://eliasdaler.github.io/re-creation/">Re:creation&lt;/a> became too hard for me. It had gigantic scope and pretty detailed art, which took a long time to produce, so I&amp;rsquo;ve decided to make something simpler as my first game.&lt;/p>
&lt;p>It all started with this prototype art, which was highly inspired by &lt;a href="http://minitgame.com/">Minit&lt;/a>:&lt;/p>
&lt;figure>&lt;img src="tomb-painter-first-prototype.png"/>
&lt;/figure>
&lt;p>I was pretty surprised that so much can be accomplished with only two colors, but I wanted a bit more detail, so I&amp;rsquo;ve decided to use 4 colors, just like Game Boy did:&lt;/p>
&lt;figure>&lt;img src="tomb-painter-early.png"/>
&lt;/figure>
&lt;figure>&lt;img src="early-gameplay.gif"/>
&lt;/figure>
&lt;p>The game&amp;rsquo;s internal resolution is 160x144 pixels, same as Game Boy again. I&amp;rsquo;ve decided not to follow all limitations of Game Boy, as it would be pretty hard to make a good looking game with them, but still, 4 colors and 160x144 is pretty limiting, while it can also look good. It also takes a lot less time to produce art.&lt;/p>
&lt;p>I&amp;rsquo;ve also experimented with adding a second palette (just like Super Game Boy on SNES did) and it looked pretty interesting:&lt;/p>
&lt;figure>&lt;img src="early-gameplay2.gif"/>
&lt;/figure>
&lt;p>You can also see first painting system which was improved later.&lt;/p>
&lt;p>So now I have two palettes with 4 colors each. The game is rendered in shades of grey and I can easily map each shade to whatever color I want to get different palettes, including the original Game Boy one:&lt;/p>
&lt;figure>&lt;img src="gameboy.png"/>
&lt;/figure>
&lt;p>I also made some simple shaders for fade in and fade out:&lt;/p>
&lt;figure>&lt;img src="fadein-fadeout.gif"/>
&lt;/figure>
&lt;p>and for lighting simulation:&lt;/p>
&lt;figure>&lt;img src="light.gif"/>
&lt;/figure>
&lt;p>It&amp;rsquo;s still 4 colors, but it looks pretty nice.&lt;/p>
&lt;p>A lot of time was spent on making paint look and feel good. Note that the tiles of paint change depending on direction you&amp;rsquo;re painting in, so it looks like a continuous trail, and you can also have multiples layer of paint. The paint also changes the color of what&amp;rsquo;s below it and that was pretty interesting to implement too. I may write about all that shader magic in the future.&lt;/p>
&lt;figure>&lt;img src="painting.gif"/>
&lt;/figure>
&lt;p>As for more technical details: I&amp;rsquo;ve used Re:creation&amp;rsquo;s engine and started to modify it as I needed. I had working prototype of Tomb Painter in two weeks and it felt good to not start from scratch. All the abstractions and worries about design were worth it!&lt;/p>
&lt;p>I&amp;rsquo;ve improved the engine quite a lot and if I start to go over it all in detail, so I&amp;rsquo;ll make a short summary here, and if you want to have it explained in depth, ask about stuff you want to be covered in comments!&lt;/p>
&lt;h2 id="game--engine-separation">Game / engine separation&lt;/h2>
&lt;p>Right now I&amp;rsquo;m still working on better game / engine separation, but basically the engine is now a statically linked library. I&amp;rsquo;ve decided to call the engine &lt;strong>EDGE&lt;/strong> (Elias Daler&amp;rsquo;s Game Engine). The &amp;ldquo;game&amp;rdquo; part is just several .cpp files and mostly just Lua code, because I prefer to code game logic in it. Once I feel that engine is decoupled enough and I have some time to make a simple game with it, I plan to open source the engine part!&lt;/p>
&lt;h2 id="cmake--fetchcontent--third-party-dependencies">CMake / FetchContent / Third party dependencies&lt;/h2>
&lt;p>I&amp;rsquo;ve learned a lot about CMake (thanks to &lt;a href="https://crascit.com/professional-cmake/">Professional CMake book&lt;/a>) and finally achieved a perfect setup for me. I&amp;rsquo;ve managed to get all third party dependencies (9 of them) to be fetched at configure time. Then, I build all the dependencies and my game. It works perfectly - it&amp;rsquo;s easy to start with a clean folder and just build everything!
It&amp;rsquo;s also very easy to update to new versions of the libraries, here&amp;rsquo;s the only thing I need to do:&lt;/p>
&lt;figure>&lt;img src="changing-lib-versions.png"/>
&lt;/figure>
&lt;h2 id="cutscene-system">Cutscene system&lt;/h2>
&lt;p>I&amp;rsquo;ve written an article about how I write cutscenes with coroutines &lt;a href="https://eliasdaler.github.io/how-to-implement-action-sequences-and-cutscenes/">here&lt;/a>. It&amp;rsquo;s pretty great! A lot of code was simplified and now I can easily write complex action sequences, multi-branch cutscenes and dialogue trees with it. So, with the code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> answer &lt;span style="font-weight:bold">=&lt;/span> girl:say(&lt;span style="color:#b84">&amp;#39;do_you_love_lua&amp;#39;&lt;/span>,
{ &lt;span style="color:#b84">&amp;#39;YES&amp;#39;&lt;/span>, &lt;span style="color:#b84">&amp;#39;NO&amp;#39;&lt;/span> })
&lt;span style="font-weight:bold">if&lt;/span> answer &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;YES&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
girl:setMood(&lt;span style="color:#b84">&amp;#39;happy&amp;#39;&lt;/span>)
girl:say(&lt;span style="color:#b84">&amp;#39;happy_response&amp;#39;&lt;/span>)
&lt;span style="font-weight:bold">else&lt;/span>
girl:setMood(&lt;span style="color:#b84">&amp;#39;angry&amp;#39;&lt;/span>)
girl:say(&lt;span style="color:#b84">&amp;#39;angry_response&amp;#39;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I get this:&lt;/p>
&lt;figure>&lt;img src="dialogue.gif"/>
&lt;/figure>
&lt;h2 id="quest-and-saving-system">Quest and saving system&lt;/h2>
&lt;p>It&amp;rsquo;s now possible to have a main quest line in the game, but also side quests with multiple states which are easy to write, modify and read.&lt;/p>
&lt;p>Previously, Re:creation had a very simple save system which saved your inventory, main quest progression, etc. But I&amp;rsquo;ve decided that I needed something more complex for Tomb Painter, to store consequences of NPC interactions or side quest progression. The current system tracks game&amp;rsquo;s state in real time and saves all important stuff in a Lua table once it happens (by catching events). Then, when you save, this table is just converted to JSON and saved to a file. Pretty awesome!&lt;/p>
&lt;h2 id="replay-system">Replay system&lt;/h2>
&lt;p>I&amp;rsquo;ve also implemented a replay system which lets me record all input and then replay it in any speed I want. I can record minutes of gameplay and then run it very fast! I can also use it to quickly repeat some tasks (e.g. kill two enemies than go to room X) and then continue playing the game. Here&amp;rsquo;s how all this looks in action:&lt;/p>
&lt;figure>&lt;img src="replay.gif"/>
&lt;/figure>
&lt;h2 id="data--script-separation">Data / script separation&lt;/h2>
&lt;p>Previously, I&amp;rsquo;ve stored all information about prefabs in Lua scripts. But then I&amp;rsquo;ve decided that they&amp;rsquo;d look better in JSON and it&amp;rsquo;ll be much easier to write a GUI tool for modifying prefabs in the future. Here&amp;rsquo;s an example of how prefab looks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#b84">&amp;#34;slime&amp;#34;&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">:&lt;/span> {
&lt;span style="color:#000080">&amp;#34;ai&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;type&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;chaser&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;viewRadius&amp;#34;&lt;/span> : &lt;span style="color:#099">60&lt;/span>,
&lt;span style="color:#000080">&amp;#34;viewAngle&amp;#34;&lt;/span> : &lt;span style="color:#099">90&lt;/span>
},
&lt;span style="color:#000080">&amp;#34;animation&amp;#34;&lt;/span> : { },
&lt;span style="color:#000080">&amp;#34;collision&amp;#34;&lt;/span> : { &lt;span style="color:#000080">&amp;#34;boundingBox&amp;#34;&lt;/span> : [ &lt;span style="color:#099">6&lt;/span>, &lt;span style="color:#099">4&lt;/span> ] },
&lt;span style="color:#000080">&amp;#34;damage&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;amount&amp;#34;&lt;/span> : &lt;span style="color:#099">1&lt;/span>,
&lt;span style="color:#000080">&amp;#34;type&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;physical&amp;#34;&lt;/span>
},
&lt;span style="color:#000080">&amp;#34;graphics&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;spriteOrigin&amp;#34;&lt;/span> : [ &lt;span style="color:#099">8&lt;/span>, &lt;span style="color:#099">10&lt;/span> ],
&lt;span style="color:#000080">&amp;#34;overlays&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;paint&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;slime_overlay&amp;#34;&lt;/span>
}
},
&lt;span style="color:#000080">&amp;#34;health&amp;#34;&lt;/span> : { &lt;span style="color:#000080">&amp;#34;maxHealth&amp;#34;&lt;/span> : &lt;span style="color:#099">2&lt;/span> },
&lt;span style="color:#000080">&amp;#34;movement&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;moveSpeed&amp;#34;&lt;/span> : [ &lt;span style="color:#099">15.0&lt;/span>, &lt;span style="color:#099">15.0&lt;/span> ],
&lt;span style="color:#000080">&amp;#34;mass&amp;#34;&lt;/span> : &lt;span style="color:#099">0.5&lt;/span>
},
&lt;span style="color:#000080">&amp;#34;sound&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;sounds&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;hit&amp;#34;&lt;/span> : { &lt;span style="color:#000080">&amp;#34;file&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;enemy_hit&amp;#34;&lt;/span> },
&lt;span style="color:#000080">&amp;#34;die&amp;#34;&lt;/span> : { &lt;span style="color:#000080">&amp;#34;file&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;enemy_die&amp;#34;&lt;/span> }
}
},
&lt;span style="color:#000080">&amp;#34;stateMachine&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;main&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;initialState&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;IdleState&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;transitionTable&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;hero&amp;#34;&lt;/span>
},
&lt;span style="color:#000080">&amp;#34;ai&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;initialState&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;AIPatrolState&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;transitionTable&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;ai_slime&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, it&amp;rsquo;s easy to read. Transition tables are still written in Lua, because they usually have conditions inside of them and they look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">{
IdleState &lt;span style="font-weight:bold">=&lt;/span> {
update &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(entity)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> entity:getVelocity():isZero() &lt;span style="font-weight:bold">then&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#b84">&amp;#34;MoveState&amp;#34;&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
},
MoveState &lt;span style="font-weight:bold">=&lt;/span> {
update &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(entity)
&lt;span style="font-weight:bold">if&lt;/span> entity:getVelocity():isZero() &lt;span style="font-weight:bold">then&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#b84">&amp;#34;IdleState&amp;#34;&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
},
DyingState &lt;span style="font-weight:bold">=&lt;/span> {
[EventType.AnimationFinished] &lt;span style="font-weight:bold">=&lt;/span> {
callback &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(entity, event)
&lt;span style="font-weight:bold">if&lt;/span> event.data.animationName &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#34;dying&amp;#34;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#b84">&amp;#34;DiedState&amp;#34;&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
}
},
...
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Update fuction can either call &lt;code>setState&lt;/code> explicitly, or just return a name of the state to transition into. Another way to transition is by catching the event. So, if entity is in &lt;code>DyingState&lt;/code> and it catches &lt;code>AnimationFinished&lt;/code> event, the callback is called where it can then transition into another state.&lt;/p>
&lt;h2 id="other">Other&lt;/h2>
&lt;p>All GUI widgets are now entities, which is very useful as they can be manipulated as normal game objects and I don&amp;rsquo;t have any repeating rendering/movement code.&lt;/p>
&lt;p>Also, I&amp;rsquo;ve worked a lot on resource and entity prefab management. Now, entity prefabs are ref counted and if entity prefab is unused on another level, it&amp;rsquo;s unloaded with all resources which it was using (unless other prefabs use it too). The system is very complex to explain in a few paragraphs and I might write an article about it later.&lt;/p>
&lt;p>And there was a lot of refactoring, of course. All the code is now in its best condition ever.&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;figure>&lt;img src="shadows.png"/>
&lt;/figure>
&lt;p>Right now, my next goal is making game look even prettier shadows (see the screenshot above), animated tiles, a new level, the first boss and the first awesome mini-game. Overall, the progress looks very good and I&amp;rsquo;m very happy with my engine and I can&amp;rsquo;t wait to start working on the game again. I&amp;rsquo;ll also have a lot more time to work on the game (find out why in the next post!), so it&amp;rsquo;s going to be awesome.&lt;/p>
&lt;p>See you soon! Thanks for reading.&lt;/p></description></item><item><title>How to implement action sequences and cutscenes</title><link>https://eliasdaler.github.io/hugo-test/posts/how-to-implement-action-sequences-and-cutscenes/</link><pubDate>Wed, 03 Oct 2018 21:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/how-to-implement-action-sequences-and-cutscenes/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://habr.com/post/427135/">Russian translation&lt;/a>&lt;/p>
&lt;p>This post will show ways of implementing actions sequences and cutscenes in video games. The code is written in Lua, but the patterns can be implemented with other languages (except the coroutine approach, because not all languages have coroutines).&lt;/p>
&lt;p>Action sequences frequently appear in games. In cutscenes, for example: a character approaches an enemy, says something, the enemy responds and so on. But action sequences often appear in gameplay as well. Take a look at this gif for example:&lt;/p>
&lt;figure>&lt;img src="going-into-bar.gif"/>
&lt;/figure>
&lt;p>We see the following sequence of actions:&lt;/p>
&lt;ol>
&lt;li>The door is opened&lt;/li>
&lt;li>The player goes inside the house&lt;/li>
&lt;li>The door closes&lt;/li>
&lt;li>The screen fades out&lt;/li>
&lt;li>Level changes&lt;/li>
&lt;li>The screen fades in&lt;/li>
&lt;li>The player enters the building&lt;/li>
&lt;/ol>
&lt;p>Action sequences can be used when scripting NPC behavior and boss fights. For example, you can have a boss throw something at you, then laugh, then shook its fist in your direction. But implementing such things is not an easy task&amp;hellip;&lt;/p>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-problem">The problem&lt;/a>&lt;/li>
&lt;li>&lt;a href="#booleans-enums-state-machines">Booleans, enums, state machines&lt;/a>&lt;/li>
&lt;li>&lt;a href="#action-lists">Action lists&lt;/a>&lt;/li>
&lt;li>&lt;a href="#coroutines">Coroutines&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#coroutines-basics">Coroutines basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implementing-cutscenes-with-coroutines">Implementing cutscenes with coroutines&lt;/a>&lt;/li>
&lt;li>&lt;a href="#advanced-usage">Advanced usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pros-and-cons-of-coroutines">Pros and cons of coroutines&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Unfortunately, standard game loop doesn&amp;rsquo;t make it easy for us. Suppose we have this game loop:&lt;/p>
&lt;figure>&lt;img src="game-loop.png"/>
&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">while&lt;/span> game:isRunning() &lt;span style="font-weight:bold">do&lt;/span>
processInput()
dt &lt;span style="font-weight:bold">=&lt;/span> clock.delta()
update(dt)
render()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, suppose you want to implement the following cutscene: a player goes to an NPC, and the NPC says &amp;ldquo;You did it!&amp;rdquo;, and then after short delay it says &amp;ldquo;Thank you!&amp;rdquo;. In ideal world, we&amp;rsquo;d want to write it like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">player:goTo(npc)
npc:say(&lt;span style="color:#b84">&amp;#34;You did it!&amp;#34;&lt;/span>)
delay(&lt;span style="color:#099">0.5&lt;/span>)
npc:say(&lt;span style="color:#b84">&amp;#34;Thank you&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s when we hit the first roadblock. All these actions take some time to complete. Some might even require user input - for example, to close a dialogue window before the cutscene can proceed further. As for &lt;code>delay&lt;/code>, you can&amp;rsquo;t just call &lt;code>sleep&lt;/code> function there, because the game will freeze. It won&amp;rsquo;t be updated and will be stuck in one iteration of the game loop.&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at some of the possible solutions to the problem.&lt;/p>
&lt;h2 id="booleans-enums-state-machines">Booleans, enums, state machines&lt;/h2>
&lt;p>The most obvious and brute-force way to implement action sequence is to store the information about its state in booleans, strings or enums. The code will look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
&lt;span style="font-weight:bold">if&lt;/span> cutsceneState &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;playerGoingToNpc&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
player:continueGoingTo(npc)
&lt;span style="font-weight:bold">if&lt;/span> player:closeTo(npc) &lt;span style="font-weight:bold">then&lt;/span>
cutsceneState &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#39;npcSayingYouDidIt&amp;#39;&lt;/span>
dialogueWindow:show(&lt;span style="color:#b84">&amp;#34;You did it!&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">elseif&lt;/span> cutsceneState &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;npcSayingYouDidIt&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
&lt;span style="font-weight:bold">if&lt;/span> dialogueWindow:wasClosed() &lt;span style="font-weight:bold">then&lt;/span>
cutsceneState &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#39;delay&amp;#39;&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">elseif&lt;/span> ...
... &lt;span style="color:#998;font-style:italic">-- so on...&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach can easily lead to spaghetti code and long if-else chains, so I&amp;rsquo;d recommend to avoid it.&lt;/p>
&lt;h2 id="action-lists">Action lists&lt;/h2>
&lt;p>Action lists are similar to state machines. Action list is a list of actions which are executed sequentially. You can think of an action as a state in state machine. We update the current action in every iteration of game loop. If we see that the action has finished, we move on to the next one.&lt;/p>
&lt;p>In our example, we can implement the following actions: &lt;code>GoToAction&lt;/code>, &lt;code>DialogueAction&lt;/code> and &lt;code>DelayAction&lt;/code>. Let&amp;rsquo;s look at the implementation of &lt;code>DelayAction&lt;/code>.&lt;/p>
&lt;blockquote class="hint-info">
I&amp;rsquo;m using &lt;a href="https://github.com/kikito/middleclass">middleclass&lt;/a> library for OOP in Lua
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="color:#998;font-style:italic">-- constructor&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">DelayAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">initialize&lt;/span>(params)
self.delay &lt;span style="font-weight:bold">=&lt;/span> params.delay
self.currentTime &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
self.isFinished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">false&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">DelayAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
self.currentTime &lt;span style="font-weight:bold">=&lt;/span> self.currentTime &lt;span style="font-weight:bold">+&lt;/span> dt
&lt;span style="font-weight:bold">if&lt;/span> self.currentTime &lt;span style="font-weight:bold">&amp;gt;&lt;/span> self.delay &lt;span style="font-weight:bold">then&lt;/span>
self.isFinished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ActionList&lt;/code>&amp;rsquo;s &lt;code>update&lt;/code> function looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ActionList&lt;/span>:&lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> self.isFinished &lt;span style="font-weight:bold">then&lt;/span>
self.currentAction:update(dt)
&lt;span style="font-weight:bold">if&lt;/span> self.currentAction.isFinished &lt;span style="font-weight:bold">then&lt;/span>
self:goToNextAction()
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> self.currentAction &lt;span style="font-weight:bold">then&lt;/span>
self.isFinished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally, our cutscene looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">makeCutsceneActionList&lt;/span>(player, npc)
&lt;span style="font-weight:bold">return&lt;/span> ActionList:new {
GoToAction:new {
entity &lt;span style="font-weight:bold">=&lt;/span> player,
target &lt;span style="font-weight:bold">=&lt;/span> npc
},
SayAction:new {
entity &lt;span style="font-weight:bold">=&lt;/span> npc,
text &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#34;You did it!&amp;#34;&lt;/span>
},
DelayAction:new {
delay &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0.5&lt;/span>
},
SayAction:new {
entity &lt;span style="font-weight:bold">=&lt;/span> npc,
text &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#34;Thank you&amp;#34;&lt;/span>
}
}
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="color:#998;font-style:italic">-- ... and then somewhere in update:&lt;/span>
actionList:update(dt)
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="hint-info">
In Lua &lt;code>someFunction({ ... })&lt;/code> can be written as &lt;code>someFunction{...}&lt;/code>, that&amp;rsquo;s why instead of writing &lt;code>DelayAction:new({delay = 0.5})&lt;/code> we can write &lt;code>DelayAction:new{ delay = 0.5 }&lt;/code>
&lt;/blockquote>
&lt;p>This looks much better. We now have a clear sequence of actions. If we want to insert new action in a cutscene, we can easily do so. And we can reuse common actions in lots of action sequences.&lt;/p>
&lt;p>See &lt;a href="https://www.youtube.com/watch?v=o6CaB-hmqoE">this talk&lt;/a> by Sean Middleditch for more details and trickier usages of action lists:&lt;/p>
&lt;p>Action lists are very useful. I&amp;rsquo;ve used them for several years before discovering coroutine approach and was very happy. But then I wanted to make more complex cutscenes like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">cutscene&lt;/span>(player, npc)
player:goTo(npc)
&lt;span style="font-weight:bold">if&lt;/span> player:hasCompleted(quest) &lt;span style="font-weight:bold">then&lt;/span>
npc:say(&lt;span style="color:#b84">&amp;#34;You did it!&amp;#34;&lt;/span>)
delay(&lt;span style="color:#099">0.5&lt;/span>)
npc:say(&lt;span style="color:#b84">&amp;#34;Thank you&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">else&lt;/span>
npc:say(&lt;span style="color:#b84">&amp;#34;Please help me&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With action lists you&amp;rsquo;ll need non-linear lists to make this happen. This can be accomplished by actions having tags. Then, you&amp;rsquo;ll be able to jump to a tagged action instead of the next one. This works, but it is not as readable as the function above.&lt;/p>
&lt;p>We can make this code real with coroutines.&lt;/p>
&lt;h2 id="coroutines">Coroutines&lt;/h2>
&lt;h3 id="coroutines-basics">Coroutines basics&lt;/h3>
&lt;p>Coroutine is a function which can be &amp;ldquo;paused&amp;rdquo; and &amp;ldquo;resumed&amp;rdquo;. It is executed in &lt;strong>the same thread&lt;/strong> as your main program. No new threads are created for it.&lt;/p>
&lt;p>Coroutines can be paused with &lt;code>coroutine.yield&lt;/code> and resumed with &lt;code>coroutine.resume&lt;/code>. Here&amp;rsquo;s a simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span>()
print(&lt;span style="color:#b84">&amp;#34;hello&amp;#34;&lt;/span>)
coroutine.yield()
print(&lt;span style="color:#b84">&amp;#34;world!&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> c &lt;span style="font-weight:bold">=&lt;/span> coroutine.create(f)
coroutine.resume(c)
print(&lt;span style="color:#b84">&amp;#34;uhh...&amp;#34;&lt;/span>)
coroutine.resume(c)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hello
uhh...
world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>First we create a coroutine with &lt;code>coroutine.create&lt;/code>. Coroutine doesn&amp;rsquo;t start to execute after it&amp;rsquo;s created. It needs to be launched by &lt;code>coroutine.resume&lt;/code>. &lt;code>f&lt;/code> function is called then, it prints &amp;ldquo;hello&amp;rdquo; and then pauses itself by yielding. You can think of it as a form of &lt;code>return&lt;/code>, but we can still resume the function afterwards by calling &lt;code>coroutine.resume&lt;/code> if coroutine hasn&amp;rsquo;t finished its function.&lt;/p>
&lt;p>If you pass arguments when calling &lt;code>coroutine.yield&lt;/code>, they&amp;rsquo;re returned by &lt;code>coroutine.resume&lt;/code> in the &amp;ldquo;main thread&amp;rdquo;. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span>()
...
coroutine.yield(&lt;span style="color:#099">42&lt;/span>, &lt;span style="color:#b84">&amp;#34;some text&amp;#34;&lt;/span>)
...
&lt;span style="font-weight:bold">end&lt;/span>
ok, num, text &lt;span style="font-weight:bold">=&lt;/span> coroutine.resume(c)
print(num, text) &lt;span style="color:#998;font-style:italic">-- will print &amp;#39;42 &amp;#34;some text&amp;#34;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, &lt;code>ok&lt;/code> is a bool, which shows the status of coroutine. If &lt;code>ok&lt;/code> is &lt;code>true&lt;/code> then everything is okay and next returned values are arguments of the last &lt;code>coroutine.yield&lt;/code> call. However, if &lt;code>f&lt;/code> calls &lt;code>error&lt;/code> function or fails at some point, the first value will be &lt;code>false&lt;/code> and the error message will be the second return of the function. Let&amp;rsquo;s see a failing coroutine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span>()
print(&lt;span style="color:#099">1&lt;/span> &lt;span style="font-weight:bold">+&lt;/span> notDefined)
&lt;span style="font-weight:bold">end&lt;/span>
c &lt;span style="font-weight:bold">=&lt;/span> coroutine.create(f)
ok, msg &lt;span style="font-weight:bold">=&lt;/span> coroutine.resume(c)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> ok &lt;span style="font-weight:bold">then&lt;/span>
print(&lt;span style="color:#b84">&amp;#34;Coroutine failed!&amp;#34;&lt;/span>, msg)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">Coroutine failed!
input:4: attempt to perform arithmetic on a nil value &lt;span style="font-weight:bold">(&lt;/span>global ‘notDefined’&lt;span style="font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, you can pass values to a coroutine when calling &lt;code>coroutine.resume&lt;/code> and the results will be returned by &lt;code>coroutine.yield&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">f&lt;/span>()
...
someNum &lt;span style="font-weight:bold">=&lt;/span> coroutine.yield()
print(someNum) &lt;span style="color:#998;font-style:italic">-- will print &amp;#34;42&amp;#34;&lt;/span>
...
&lt;span style="font-weight:bold">end&lt;/span>
...
coroutine.resume(c, &lt;span style="color:#099">42&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Coroutine can be in different states which you can check by calling &lt;code>coroutine.status&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;running&amp;quot;&lt;/code> - coroutine is currently running. This means that &lt;code>coroutine.status&lt;/code> was launched from inside the coroutine&amp;rsquo;s function.&lt;/li>
&lt;li>&lt;code>&amp;quot;suspended&amp;quot;&lt;/code> - coroutine was paused or hasn&amp;rsquo;t been launched yet.&lt;/li>
&lt;li>&lt;code>&amp;quot;normal&amp;quot;&lt;/code> - coroutine is active, but isn&amp;rsquo;t currently running (it has resumed another coroutine).&lt;/li>
&lt;li>&lt;code>&amp;quot;dead&amp;quot;&lt;/code> - the coroutine has finished running - function has finished its execution.&lt;/li>
&lt;/ul>
&lt;p>Now, let&amp;rsquo;s implement coroutine-based action sequence system with this knowledge.&lt;/p>
&lt;h3 id="implementing-cutscenes-with-coroutines">Implementing cutscenes with coroutines&lt;/h3>
&lt;p>Here&amp;rsquo;s how our basic action will look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">Action&lt;/span>:&lt;span style="color:#900;font-weight:bold">launch&lt;/span>()
self:init()
&lt;span style="font-weight:bold">while&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> self.finished &lt;span style="font-weight:bold">do&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> dt &lt;span style="font-weight:bold">=&lt;/span> coroutine.yield() &lt;span style="color:#998;font-style:italic">-- the most important part&lt;/span>
self:update(dt)
&lt;span style="font-weight:bold">end&lt;/span>
self:exit()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is similar to what we have with action lists: the action calls &lt;code>update&lt;/code> function until it&amp;rsquo;s finished. But it yields on each game loop iteration (&lt;code>Action:launch&lt;/code> is called from some coroutine), while somewhere in our main &lt;code>update&lt;/code> (for example, in some &lt;code>ActionSequenceManager&lt;/code> which tracks the state of all action sequences) we resume it like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">coroutine.resume(c, dt) &lt;span style="color:#998;font-style:italic">-- note that we pass dt here&lt;/span>
&lt;span style="color:#998;font-style:italic">-- which is later used in actions&amp;#39;s update&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our cutscene is a coroutine now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">cutscene&lt;/span>(player, npc)
player:goTo(npc)
npc:say(&lt;span style="color:#b84">&amp;#34;You did it!&amp;#34;&lt;/span>)
delay(&lt;span style="color:#099">0.5&lt;/span>)
npc:say(&lt;span style="color:#b84">&amp;#34;Thank you&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="color:#998;font-style:italic">-- later...&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> c &lt;span style="font-weight:bold">=&lt;/span> coroutine.create(cutscene, player, npc)
coroutine.resume(c, dt)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s how &lt;code>delay&lt;/code> is implemented:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">delay&lt;/span>(time)
action &lt;span style="font-weight:bold">=&lt;/span> DelayAction:new { delay &lt;span style="font-weight:bold">=&lt;/span> time }
action:launch()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Having such wrapper functions is very useful to make your cutscenes easier to read and use. Next, let&amp;rsquo;s see how &lt;code>DelayAction&lt;/code> is implemented:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="color:#998;font-style:italic">-- Action is a base class of DelayAction&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> DelayAction &lt;span style="font-weight:bold">=&lt;/span> class(&lt;span style="color:#b84">&amp;#34;DelayAction&amp;#34;&lt;/span>, Action)
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">DelayAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">initialize&lt;/span>(params)
self.delay &lt;span style="font-weight:bold">=&lt;/span> params.delay
self.currentTime &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
self.isFinished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">false&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">DelayAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
self.currentTime &lt;span style="font-weight:bold">=&lt;/span> self.currentTime &lt;span style="font-weight:bold">+&lt;/span> dt
&lt;span style="font-weight:bold">if&lt;/span> self.currentTime &lt;span style="font-weight:bold">&amp;gt;=&lt;/span> self.delayTime &lt;span style="font-weight:bold">then&lt;/span>
self.finished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is identical to action lists approach! Let&amp;rsquo;s take a look at &lt;code>Action&lt;/code>&amp;rsquo;s &lt;code>launch&lt;/code> function again to understand how it works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">Action&lt;/span>:&lt;span style="color:#900;font-weight:bold">launch&lt;/span>()
self:init()
&lt;span style="font-weight:bold">while&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> self.finished &lt;span style="font-weight:bold">do&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> dt &lt;span style="font-weight:bold">=&lt;/span> coroutine.yield() &lt;span style="color:#998;font-style:italic">-- the most important part&lt;/span>
self:update(dt)
&lt;span style="font-weight:bold">end&lt;/span>
self:exit()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, we can create &lt;code>init&lt;/code> and &lt;code>exit&lt;/code> functions to do something when action begins and ends. But the most important part is the &lt;code>while&lt;/code> loop which executes until the action is finished. Here&amp;rsquo;s a visualization of the order of execution which makes it easier to understand:&lt;/p>
&lt;figure>&lt;img src="coroutine-game-loop.png"/>
&lt;/figure>
&lt;p>Now, let&amp;rsquo;s see how we can implement &lt;code>goTo&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">Entity&lt;/span>:&lt;span style="color:#900;font-weight:bold">goTo&lt;/span>(target)
&lt;span style="font-weight:bold">local&lt;/span> action &lt;span style="font-weight:bold">=&lt;/span> GoToAction:new { entity &lt;span style="font-weight:bold">=&lt;/span> self, target &lt;span style="font-weight:bold">=&lt;/span> target }
action:launch()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="color:#998;font-style:italic">-- constructor is ommited&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">GoToAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> self.entity:closeTo(self.target) &lt;span style="font-weight:bold">then&lt;/span>
... &lt;span style="color:#998;font-style:italic">-- perform AI movement logic here&lt;/span>
&lt;span style="font-weight:bold">else&lt;/span>
self.finished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s very easy to implement new types of actions.&lt;/p>
&lt;p>Now, let&amp;rsquo;s see how we can use coroutines with events. Let&amp;rsquo;s implement &lt;code>WaitForEventAction&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">WaitForEventAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">initialize&lt;/span>(params)
self.finished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">false&lt;/span>
eventManager:subscribe {
listener &lt;span style="font-weight:bold">=&lt;/span> self,
eventType &lt;span style="font-weight:bold">=&lt;/span> params.eventType,
callback &lt;span style="font-weight:bold">=&lt;/span> WaitForEventAction.onEvent
}
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">WaitForEventAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">onEvent&lt;/span>(event)
self.finished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can leave the &lt;code>update&lt;/code> function empty for that one. This action will execute until an event of &lt;code>eventType&lt;/code> is sent. As a practical example of &lt;code>WaitForEventAction&lt;/code> usage, let&amp;rsquo;s implement &lt;code>say&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">Entity&lt;/span>:&lt;span style="color:#900;font-weight:bold">say&lt;/span>(text)
DialogueWindow:show(text)
&lt;span style="font-weight:bold">local&lt;/span> action &lt;span style="font-weight:bold">=&lt;/span> WaitForEventAction:new {
eventType &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#39;DialogueWindowClosed&amp;#39;&lt;/span>
}
action:launch()
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nice and easy. Now, when dialogue window is closed by the player by the press of the button, it will send &lt;code>DialogueWindowClosed&lt;/code> event. The action will finish and the next one will start.&lt;/p>
&lt;p>It&amp;rsquo;s easy to implement non-linear cutscenes, which depend on player&amp;rsquo;s choice, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> answer &lt;span style="font-weight:bold">=&lt;/span> girl:say(&lt;span style="color:#b84">&amp;#39;do_you_love_lua&amp;#39;&lt;/span>,
{ &lt;span style="color:#b84">&amp;#39;YES&amp;#39;&lt;/span>, &lt;span style="color:#b84">&amp;#39;NO&amp;#39;&lt;/span> })
&lt;span style="font-weight:bold">if&lt;/span> answer &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;YES&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
girl:setMood(&lt;span style="color:#b84">&amp;#39;happy&amp;#39;&lt;/span>)
girl:say(&lt;span style="color:#b84">&amp;#39;happy_response&amp;#39;&lt;/span>)
&lt;span style="font-weight:bold">else&lt;/span>
girl:setMood(&lt;span style="color:#b84">&amp;#39;angry&amp;#39;&lt;/span>)
girl:say(&lt;span style="color:#b84">&amp;#39;angry_response&amp;#39;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="dialogue.gif"/>
&lt;/figure>
&lt;p>The implementation of &lt;code>say&lt;/code> function is trickier there, because now you need to somehow return player&amp;rsquo;s dialogue choice, but it&amp;rsquo;s not that hard to implement. As you can see, we don&amp;rsquo;t need to implement special mechanisms for if-else statements and loops.&lt;/p>
&lt;h3 id="advanced-usage">Advanced usage&lt;/h3>
&lt;p>It&amp;rsquo;s easy to make quests and tutorials using coroutines. Consider this function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">girl:say(&lt;span style="color:#b84">&amp;#34;Kill that monster!&amp;#34;&lt;/span>)
waitForEvent(&lt;span style="color:#b84">&amp;#39;EnemyKilled&amp;#39;&lt;/span>)
girl:setMood(&lt;span style="color:#b84">&amp;#39;happy&amp;#39;&lt;/span>)
girl:say(&lt;span style="color:#b84">&amp;#34;You did it! Thank you!&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="kill-monster-quest.gif"/>
&lt;/figure>
&lt;p>You can also use coroutines for AI. For example, to make a monster traverse a path, you can do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">followPath&lt;/span>(monster, path)
&lt;span style="font-weight:bold">local&lt;/span> numberOfPoints &lt;span style="font-weight:bold">=&lt;/span> path:getNumberOfPoints()
&lt;span style="font-weight:bold">local&lt;/span> i &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#998;font-style:italic">-- index of current waypoint on path&lt;/span>
&lt;span style="font-weight:bold">while&lt;/span> &lt;span style="font-weight:bold">true&lt;/span> &lt;span style="font-weight:bold">do&lt;/span>
monster:goTo(path:getPoint(i))
&lt;span style="font-weight:bold">if&lt;/span> i &lt;span style="font-weight:bold">&amp;lt;&lt;/span> numberOfPoints &lt;span style="font-weight:bold">-&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
i &lt;span style="font-weight:bold">=&lt;/span> i &lt;span style="font-weight:bold">+&lt;/span> &lt;span style="color:#099">1&lt;/span> &lt;span style="color:#998;font-style:italic">-- go to the next point&lt;/span>
&lt;span style="font-weight:bold">else&lt;/span> &lt;span style="color:#998;font-style:italic">-- start from the beginning&lt;/span>
i &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="monster-follows-path.gif"/>
&lt;/figure>
&lt;p>When monster will see the player, we can just not resume the coroutine, so while that &lt;code>while&lt;/code> loop looks endless, it isn&amp;rsquo;t.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to implement &amp;ldquo;parallel&amp;rdquo; actions in a way that both actions are performed at the same time, but the action sequence goes to next action only when both actions are finished. For example, consider two NPCs moving at different speeds. When they meet at &lt;code>meetingPoint&lt;/code>, the cat says &amp;ldquo;meow&amp;rdquo;. We can implement it like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">cutscene&lt;/span>(cat, girl, meetingPoint)
&lt;span style="font-weight:bold">local&lt;/span> c1 &lt;span style="font-weight:bold">=&lt;/span> coroutine.create(
&lt;span style="font-weight:bold">function&lt;/span>()
cat:goTo(meetingPoint)
&lt;span style="font-weight:bold">end&lt;/span>)
&lt;span style="font-weight:bold">local&lt;/span> c2 &lt;span style="font-weight:bold">=&lt;/span> coroutine.create(
&lt;span style="font-weight:bold">function&lt;/span>()
girl:goTo(meetingPoint)
&lt;span style="font-weight:bold">end&lt;/span>)
c1.resume()
c2.resume()
&lt;span style="color:#998;font-style:italic">-- synchronization&lt;/span>
waitForFinish(c1, c2)
&lt;span style="color:#998;font-style:italic">-- cutscene continues&lt;/span>
cat:say(&lt;span style="color:#b84">&amp;#34;meow&amp;#34;&lt;/span>)
...
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important part here is &lt;code>waitForFinish&lt;/code> function which is a wrapper around &lt;code>WaitForFinishAction&lt;/code> which can be implemented like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">WaitForFinishAction&lt;/span>:&lt;span style="color:#900;font-weight:bold">update&lt;/span>(dt)
&lt;span style="font-weight:bold">if&lt;/span> coroutine.status(self.c1) &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;dead&amp;#39;&lt;/span> &lt;span style="font-weight:bold">and&lt;/span>
coroutine.status(self.c2) &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#39;dead&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
self.finished &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
&lt;span style="font-weight:bold">else&lt;/span>
&lt;span style="font-weight:bold">if&lt;/span> coroutine.status(self.c1) &lt;span style="font-weight:bold">~=&lt;/span> &lt;span style="color:#b84">&amp;#39;dead&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
coroutine.resume(self.c1, dt)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">if&lt;/span> coroutine.status(self.c2) &lt;span style="font-weight:bold">~=&lt;/span> &lt;span style="color:#b84">&amp;#39;dead&amp;#39;&lt;/span> &lt;span style="font-weight:bold">then&lt;/span>
coroutine.resume(self.c2, dt)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also take it a step further and allow &lt;code>WaitForFinishAction&lt;/code> to take an arbitrary amount of actions to synchronize. You can also implement an action which waits until one of the actions is finished. For example, this can be used for racing mini-games. You&amp;rsquo;ll be able to check when one of the cars arrives the finish line and then execute some action sequence.&lt;/p>
&lt;h3 id="pros-and-cons-of-coroutines">Pros and cons of coroutines&lt;/h3>
&lt;p>Coroutine approach is very powerful. The action sequences and cutscenes written with it can be easily read and modified, even by non-programmers.&lt;/p>
&lt;p>What&amp;rsquo;s also great is about it is that everything happens in one thread, so you don&amp;rsquo;t have synchronization or data racing problems.&lt;/p>
&lt;p>The approach is not perfect, however. For example, it&amp;rsquo;s hard to handle saving. For example, suppose that you have a long tutorial which is just one big coroutine. The player won&amp;rsquo;t be able to save during this tutorial, because you&amp;rsquo;d have to serialize coroutine&amp;rsquo;s state and then resume coroutine exactly from the point it was paused at.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>This is not a problem if you use coroutines for cutscenes, as it&amp;rsquo;s usually not allowed for player to save during them.&lt;/p>
&lt;p>As for the long tutorial example - you can just separate your tutorial in chunks and then allow player to only save between them. For example, part A of the tutorial happens in a room without a save point. Then, there&amp;rsquo;s another room with a save point to which player goes once part A is finished. Then, part B begins. If you separate tutorial into two coroutines, serializing won&amp;rsquo;t be a problem, as you&amp;rsquo;ll only need to save a string which will contain info about the point of tutorial which player has completed.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>As you can see, there are different approaches to implementing actions sequences and cutscenes. I believe coroutine approach is one of the most useful and clearest for writing action sequences and cutscenes. I hope this approach will make your life easier and you&amp;rsquo;ll make tons of complex and fun cutscenes with it.&lt;/p>
&lt;p>Thanks for reading!&lt;/p></description></item><item><title>How my little C++ meta-serialization library works and how I wrote it</title><link>https://eliasdaler.github.io/hugo-test/posts/meta-stuff/</link><pubDate>Wed, 27 Sep 2017 22:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/meta-stuff/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A year ago I wrote a small library called &lt;a href="https://github.com/eliasdaler/MetaStuff">MetaStuff&lt;/a>. It is used to register meta info about classes, which can be later used for serialization, deserialization, making GUI and so on. The cool thing about it is that you can write a serializer for your own data format, be it JSON, Lua or anything else. The library is very small, it uses C++14, requires no pre-build process, RTTI, macros&amp;hellip; It&amp;rsquo;s just templates!&lt;/p>
&lt;p>Let&amp;rsquo;s look at how registration and serialization work. Suppose you have the following struct:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Person&lt;/span> {
&lt;span style="color:#458;font-weight:bold">int&lt;/span> age;
std&lt;span style="font-weight:bold">::&lt;/span>string name;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You register it like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">namespace&lt;/span> meta {
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">inline&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span> registerMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>()
{
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#900;font-weight:bold">members&lt;/span>(
member(&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>age),
member(&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>name)
);
}
} &lt;span style="color:#998;font-style:italic">// end of namespace meta
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now you can serialize / deserialize it to / from JSON! (I&amp;rsquo;ll be using Niels Lohmann&amp;rsquo;s &lt;a href="https://github.com/nlohmann/json">JSON for Modern C++&lt;/a> library in this article)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">Person person;
person.age &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">30&lt;/span>;
person.name &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>;
&lt;span style="color:#998;font-style:italic">// serialize
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>json j;
j &lt;span style="font-weight:bold">=&lt;/span> person;
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>setw(&lt;span style="color:#099">4&lt;/span>) &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>endl;
&lt;span style="color:#998;font-style:italic">// deserialize
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>Person p2;
p2 &lt;span style="font-weight:bold">=&lt;/span> j.get&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(j);
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Name = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p2.name &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;, age = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p2.age &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="font-weight:bold">{&lt;/span>
&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>: 30,
&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>
&lt;span style="font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple as that!&lt;/p>
&lt;p>One more example. In &lt;a href="https://eliasdaler.github.io/re-creation/">my game&lt;/a> I have &lt;code>Animation&lt;/code> class registered. I also have a bunch of functions for &lt;a href="https://github.com/ocornut/imgui">Dear ImGui&lt;/a> which can automatically build GUI for me, so I can easily change animation parameters. I just do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">ImGui&lt;span style="font-weight:bold">::&lt;/span>Input(animation);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And I get this (the &amp;ldquo;Animation properties&amp;rdquo; table is generated by MetaStuff):&lt;/p>
&lt;figure>&lt;img src="animation-editor.gif"/>
&lt;/figure>
&lt;h2 id="using-metastuff">Using MetaStuff&lt;/h2>
&lt;p>The most important thing about MetaStuff is that it stores information about class members in a tuple without losing their types. To do something for all members of the class, you write this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>doForAllMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(
[&lt;span style="font-weight:bold">&amp;amp;&lt;/span>person](&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> member)
{
&lt;span style="color:#998;font-style:italic">// do something for member
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> });
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The type of &lt;code>member&lt;/code> inside the lambda is &lt;code>meta::Member&amp;lt;Person, T&amp;gt;&lt;/code>, where &lt;code>T&lt;/code> is a type of a member you previously registered. This is really nice, because just by calling &lt;code>Member&amp;lt;Person, T&amp;gt;::get(person)&lt;/code>, you get a reference to an object from &lt;code>person&lt;/code> instance, which you can modify and use in other functions.&lt;/p>
&lt;p>Let&amp;rsquo;s look at a simple example.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">Person person;
person.age &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">30&lt;/span>;
person.name &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>;
meta&lt;span style="font-weight:bold">::&lt;/span>doForAllMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(
[&lt;span style="font-weight:bold">&amp;amp;&lt;/span>person](&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> member)
{
&lt;span style="font-weight:bold">using&lt;/span> MemberT &lt;span style="font-weight:bold">=&lt;/span> meta&lt;span style="font-weight:bold">::&lt;/span>get_member_type&lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">decltype&lt;/span>(member)&lt;span style="font-weight:bold">&amp;gt;&lt;/span>;
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;* &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> member.getName() &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span>
&lt;span style="color:#b84">&amp;#34;, value = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> member.get(person) &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span>
&lt;span style="color:#b84">&amp;#34;, type = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="font-weight:bold">typeid&lt;/span>(MemberT).name() &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#39;\n&amp;#39;&lt;/span>;
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">* age, &lt;span style="color:#008080">value&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> 30, &lt;span style="color:#999">type&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> int
* name, &lt;span style="color:#008080">value&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> John, &lt;span style="color:#999">type&lt;/span> &lt;span style="font-weight:bold">=&lt;/span>
class std::basic_string&amp;lt;
char,struct std::char_traits&amp;lt;char&amp;gt;,class std::allocator&amp;lt;char&amp;gt;
&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>You can iterate over all members and call template functions or functions with overloads. Suppose you have a function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> T&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#458;font-weight:bold">void&lt;/span> print(T obj) {};
&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">print&lt;/span>(&lt;span style="color:#458;font-weight:bold">int&lt;/span> i)
{
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;It&amp;#39;s an int! Value = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i;
}
&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">print&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;amp;&lt;/span> str)
{
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;It&amp;#39;s a string! Value = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> str;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now we do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>doForAllMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(
[&lt;span style="font-weight:bold">&amp;amp;&lt;/span>person](&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> member)
{
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;* &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;What is &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> member.getName() &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34; ? &amp;#34;&lt;/span>;
print(member.get(person));
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#39;\n&amp;#39;&lt;/span>;
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">* What is age ? It&lt;span style="color:#b84">&amp;#39;s an int! Value = 30
&lt;/span>&lt;span style="color:#b84">* What is name ? It&amp;#39;&lt;/span>s a string! &lt;span style="color:#008080">Value&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> John
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/eliasdaler/MetaStuff/blob/master/example/JsonCast.inl#L86">Here&lt;/a> you can look at how JSON serialization / deserialization is performed. It&amp;rsquo;s not that complicated: we just need to write some overloads for non-trivial cases (&lt;code>std::vector&lt;/code> should be processed as JSON array and &lt;code>std::unordered_map&lt;/code> as JSON object). For the main serialization / deserialization loop, we just need to iterate over all registered members and do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">jsonObject[member.getName()] &lt;span style="font-weight:bold">=&lt;/span> member.get(person);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The serializer can handle much more complex cases, than shown previously, such as instance of one class, being in another class: the serialization will work correctly for registered classes! For example, for the following classes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Health&lt;/span> {
&lt;span style="color:#458;font-weight:bold">int&lt;/span> hp &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">20&lt;/span>;
};
&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Hero&lt;/span> {
Health health;
&lt;span style="color:#458;font-weight:bold">int&lt;/span> attackPower &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">30&lt;/span>;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we&amp;rsquo;ll get this JSON:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;attackPower&amp;#34;&lt;/span> : &lt;span style="color:#099">10&lt;/span>,
&lt;span style="color:#000080">&amp;#34;health&amp;#34;&lt;/span> : {
&lt;span style="color:#000080">&amp;#34;hp&amp;#34;&lt;/span> : &lt;span style="color:#099">20&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nice-things-about-metastuff">Nice things about MetaStuff&lt;/h2>
&lt;ul>
&lt;li>It doesn&amp;rsquo;t require you to perform some pre-build process to generate additional code.&lt;/li>
&lt;li>It doesn&amp;rsquo;t use RTTI.&lt;/li>
&lt;li>You don&amp;rsquo;t need to modify your class to register meta info about it. This allows you to register classes from code you can&amp;rsquo;t modify, such as libraries.&lt;/li>
&lt;li>It&amp;rsquo;s not constrained to one format or library: you can implement your own serializer / deserializer to any format you want.&lt;/li>
&lt;li>Surprisingly, the code works pretty fast and compilers optimize a lot behind the scenes. My game loads animations using MetaStuff and the performance is pretty close to JSON deserialization written by hand.&lt;/li>
&lt;li>This library can be used for other things other than serialization, such as building GUIs.&lt;/li>
&lt;li>You can use it with getters and setters, instead of raw member pointers.&lt;/li>
&lt;/ul>
&lt;p>Suppose our &lt;code>Person&lt;/code> class now looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">Person&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="color:#458;font-weight:bold">void&lt;/span> setAge(&lt;span style="color:#458;font-weight:bold">int&lt;/span> a) { age &lt;span style="font-weight:bold">=&lt;/span> a; }
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">getAge&lt;/span>() &lt;span style="font-weight:bold">const&lt;/span> { &lt;span style="font-weight:bold">return&lt;/span> age; }
&lt;span style="color:#998;font-style:italic">// ... same for name
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="color:#458;font-weight:bold">int&lt;/span> age;
std&lt;span style="font-weight:bold">::&lt;/span>string name;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We pass getter and setter to MetaStuff during registration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">member(&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>getAge, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>setAge)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, when we&amp;rsquo;ll serialize object, &lt;code>Person::getAge&lt;/code> will get called when getting value of &amp;ldquo;age&amp;rdquo; member.&lt;/p>
&lt;hr>
&lt;p>You can make more complex serialization process easier by using getters and setters in a non-standard way.
Suppose that you have &lt;code>Sprite&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">Sprite&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="color:#998;font-style:italic">// ...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
Texture texture;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do you deserialize it? It&amp;rsquo;s not possible to store &lt;code>Texture&lt;/code> in a JSON, so we&amp;rsquo;ll store a texture filename instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;texture&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;res/images/hero.png&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But how do we load texture when reading data from JSON? One solution is to register variable, which will store texture&amp;rsquo;s filename, and later call some &lt;code>postInit&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>member(&lt;span style="color:#b84">&amp;#34;texture&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Sprite&lt;span style="font-weight:bold">::&lt;/span>textureFilename);
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#458;font-weight:bold">void&lt;/span> Sprite&lt;span style="font-weight:bold">::&lt;/span>postInit()
{
texture.loadFromFile(textureFilename);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">Sprite s;
s &lt;span style="font-weight:bold">=&lt;/span> j.get&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Sprite&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(); &lt;span style="color:#998;font-style:italic">// here we&amp;#39;ll get textureFilename
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>s.postInit(); &lt;span style="color:#998;font-style:italic">// and here our texture we&amp;#39;ll be loaded
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works, but we can do better! Let&amp;rsquo;s register a &lt;code>loadTexture&lt;/code> function as a setter for &amp;ldquo;texture&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>member(&lt;span style="color:#b84">&amp;#34;texture&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Sprite&lt;span style="font-weight:bold">::&lt;/span>getTextureFilename, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Sprite&lt;span style="font-weight:bold">::&lt;/span>loadTexture);
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">const&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;amp;&lt;/span> Sprite&lt;span style="font-weight:bold">::&lt;/span>getTextureFilename() &lt;span style="font-weight:bold">const&lt;/span>
{
&lt;span style="font-weight:bold">return&lt;/span> textureFilename;
}
&lt;span style="color:#458;font-weight:bold">void&lt;/span> Sprite&lt;span style="font-weight:bold">::&lt;/span>loadTexture(&lt;span style="font-weight:bold">const&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;amp;&lt;/span> filename)
{
textureFilename &lt;span style="font-weight:bold">=&lt;/span> filename;
texture.loadFromFile(filename);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, when you&amp;rsquo;ll deserialize from JSON, &lt;code>loadTexture&lt;/code> will be called and the texture will get loaded as you want it to. And when you serialize &lt;code>Sprite&lt;/code> class to JSON, texture filename gets saved there.&lt;/p>
&lt;p>Now, let&amp;rsquo;s implement simple meta info holder and see how I came from its design to MetaStuff.&lt;/p>
&lt;h2 id="simple-approach-that-kinda-works">Simple approach (that kinda works)&lt;/h2>
&lt;p>It all started from a simple, yet somewhat flawed approach. One easy way to build a meta system is to make it with type-erasure and virtual functions. Full working example can be found &lt;a href="https://gist.github.com/eliasdaler/213d42051958ae21185adbc7edbff915">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">IMember&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="font-weight:bold">virtual&lt;/span> &lt;span style="font-weight:bold">~&lt;/span>IMember() &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">default&lt;/span>;
&lt;span style="font-weight:bold">virtual&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">fromJson&lt;/span>(Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj, &lt;span style="font-weight:bold">const&lt;/span> json&lt;span style="font-weight:bold">&amp;amp;&lt;/span> j) &lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>;
&lt;span style="font-weight:bold">virtual&lt;/span> json &lt;span style="color:#900;font-weight:bold">toJson&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj) &lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>IMember&lt;/code> is a base class for &lt;code>Member&lt;/code> class which will store member info.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> Class, &lt;span style="font-weight:bold">typename&lt;/span> T&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">Member&lt;/span> &lt;span style="font-weight:bold">:&lt;/span> &lt;span style="font-weight:bold">public&lt;/span> IMember&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
Member(T Class&lt;span style="font-weight:bold">::*&lt;/span> ptr) &lt;span style="font-weight:bold">:&lt;/span> ptr(ptr) {}
&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">fromJson&lt;/span>(Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj, &lt;span style="font-weight:bold">const&lt;/span> json&lt;span style="font-weight:bold">&amp;amp;&lt;/span> j) &lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">override&lt;/span>
{
obj.&lt;span style="font-weight:bold">*&lt;/span>ptr &lt;span style="font-weight:bold">=&lt;/span> j;
}
json &lt;span style="color:#900;font-weight:bold">toJson&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj) &lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">override&lt;/span>
{
&lt;span style="font-weight:bold">return&lt;/span> json(obj.&lt;span style="font-weight:bold">*&lt;/span>ptr);
}
&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
T Class&lt;span style="font-weight:bold">::*&lt;/span> ptr;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Member&lt;/code> class stores a pointer to a class member which lets us get it directly from &lt;code>Class&lt;/code> instance (see how we need to pass it in &lt;code>fromJson&lt;/code> / &lt;code>toJson&lt;/code> function).&lt;/p>
&lt;p>And now for the class that will store all info about members of a particular class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">ClassMetaInfo&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="font-weight:bold">static&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> serialize(Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj, &lt;span style="font-weight:bold">const&lt;/span> json&lt;span style="font-weight:bold">&amp;amp;&lt;/span> j)
{
&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> pair : members) {
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> memberName &lt;span style="font-weight:bold">=&lt;/span> pair.first;
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> memberPtr &lt;span style="font-weight:bold">=&lt;/span> pair.second;
memberPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>fromJson(obj, j[memberName]);
}
}
&lt;span style="font-weight:bold">static&lt;/span> json &lt;span style="color:#900;font-weight:bold">deserialize&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> Class&lt;span style="font-weight:bold">&amp;amp;&lt;/span> obj)
{
json j;
&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> pair : members) {
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> memberName &lt;span style="font-weight:bold">=&lt;/span> pair.first;
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> memberPtr &lt;span style="font-weight:bold">=&lt;/span> pair.second;
j[memberName] &lt;span style="font-weight:bold">=&lt;/span> memberPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>toJson(obj);
}
&lt;span style="font-weight:bold">return&lt;/span> j;
}
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> T&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">static&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> registerMember(&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="color:#458;font-weight:bold">char&lt;/span>&lt;span style="font-weight:bold">*&lt;/span> name, T Class&lt;span style="font-weight:bold">::*&lt;/span> ptr)
{
members.emplace(name, std&lt;span style="font-weight:bold">::&lt;/span>make_unique&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Member&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class, T&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span>(ptr));
}
&lt;span style="font-weight:bold">using&lt;/span> MemberPtrType &lt;span style="font-weight:bold">=&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>unique_ptr&lt;span style="font-weight:bold">&amp;lt;&lt;/span>IMember&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span>;
&lt;span style="font-weight:bold">using&lt;/span> MemberMapType &lt;span style="font-weight:bold">=&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>unordered_map&lt;span style="font-weight:bold">&amp;lt;&lt;/span>std&lt;span style="font-weight:bold">::&lt;/span>string, MemberPtrType&lt;span style="font-weight:bold">&amp;gt;&lt;/span>;
&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="font-weight:bold">static&lt;/span> MemberMapType members;
};
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">typename&lt;/span> ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>MemberMapType ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>members;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ClassMetaInfo&lt;/code> class stores all members in members &lt;code>unordered_map&lt;/code>. We can&amp;rsquo;t store objects of different classes inside &lt;code>unordered_map&lt;/code>, because &lt;code>Member&amp;lt;Class, int&amp;gt;&lt;/code> and &lt;code>Member&amp;lt;Class, std::string&amp;gt;&lt;/code> have different types. That&amp;rsquo;s why they have the common base class and virtual functions which will help us get the original type back (at least for a function call).&lt;/p>
&lt;p>Let&amp;rsquo;s use it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Person&lt;/span> {
std&lt;span style="font-weight:bold">::&lt;/span>string name;
&lt;span style="color:#458;font-weight:bold">int&lt;/span> age;
&lt;span style="font-weight:bold">static&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">registerClass&lt;/span>()
{
ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>registerMember(&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>name);
ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>registerMember(&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>age);
}
};
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">main&lt;/span>()
{
Person&lt;span style="font-weight:bold">::&lt;/span>registerClass();
Person p{ &lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>, &lt;span style="color:#099">30&lt;/span> };
json j &lt;span style="font-weight:bold">=&lt;/span> ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>deserialize(p);
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>setw(&lt;span style="color:#099">4&lt;/span>) &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>endl;
Person p2;
ClassMetaInfo&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>serialize(p2, j);
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Name = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p2.name &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;, age = &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p2.age &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="font-weight:bold">{&lt;/span>
&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>: 30,
&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>
&lt;span style="font-weight:bold">}&lt;/span>
&lt;span style="color:#008080">Name&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> John, &lt;span style="color:#008080">age&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">30&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Okay, that worked!
This system worked well for me, until I understood that if I wanted to add another format (for example, XML), I&amp;rsquo;d have to add new &lt;code>toXml&lt;/code> / &lt;code>fromXml&lt;/code> virtual functions everywhere. Same for ImGui and anything else. The other problem was the need to call &lt;code>registerClass&lt;/code> function. If I forgot to do it, the &amp;ldquo;members&amp;rdquo; map will be empty for the corresponding class. It&amp;rsquo;s also very hard to implement serializer which will handle nested classes, as shown with &lt;code>Hero&lt;/code> / &lt;code>Health&lt;/code> example shown previously.&lt;/p>
&lt;h2 id="implementation-of-metastuff">Implementation of MetaStuff&lt;/h2>
&lt;p>Let&amp;rsquo;s see what had to be changed from a previous meta-library to get this functionality.&lt;/p>
&lt;p>First of all, instead of storing members in an &lt;code>unordered_map&lt;/code>, I store them in a &lt;code>tuple&lt;/code>. It looks like this for a &lt;code>Person&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">std&lt;span style="font-weight:bold">::&lt;/span>tuple&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Member&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person, std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;gt;&lt;/span>, Member&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person, &lt;span style="color:#458;font-weight:bold">int&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span> members;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With some template magic and Vittorio Romero&amp;rsquo;s help (see &lt;a href="https://www.youtube.com/watch?v=Za92Tz_g0zQ">this awesome video&lt;/a>), I implemented a function which calls some lambda for each member of the tuple. And that&amp;rsquo;s what &lt;code>meta::doForAllMembers&lt;/code> does: it iterates over all Member objects inside of members tuple and calls lambda passed as the function parameter for each of them. The lambda which is used is a &lt;a href="https://isocpp.org/wiki/faq/cpp14-language#generic-lambdas">generic one&lt;/a>, so on each call you get a &lt;code>Member&amp;lt;Class, T&amp;gt;&lt;/code> object without type erasure!&lt;/p>
&lt;p>Let&amp;rsquo;s look at class registration. To register &lt;code>Person&lt;/code> class, you have to write this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">namespace&lt;/span> meta {
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">inline&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span> registerMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>()
{
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#900;font-weight:bold">members&lt;/span>(
member(&lt;span style="color:#b84">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>age),
member(&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Person&lt;span style="font-weight:bold">::&lt;/span>name)
);
}
} &lt;span style="color:#998;font-style:italic">// end of namespace meta
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the &lt;code>auto&lt;/code> as the return type. You don&amp;rsquo;t want to write &lt;code>std::tuple&amp;lt;Member&amp;lt;Person, std::string&amp;gt;, Member&amp;lt;Person, int&amp;gt;&amp;gt;&lt;/code>, the compiler can just deduce it! Imagine the class with 50 members. The return type would be gigantic and the compiler does all the work for you.&lt;/p>
&lt;p>Okay, how do we make sure that this &lt;code>registerMembers&amp;lt;T&amp;gt;&lt;/code> function gets called? Simple! I just made class called &lt;a href="https://github.com/eliasdaler/MetaStuff/blob/master/include/detail/MetaHolder.h">MetaHolder&lt;/a>, which uses one nice trick. Let&amp;rsquo;s look at the implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#pragma once
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="font-weight:bold">namespace&lt;/span> meta
{
&lt;span style="font-weight:bold">namespace&lt;/span> detail
{
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> T, &lt;span style="font-weight:bold">typename&lt;/span> TupleType&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">MetaHolder&lt;/span> {
&lt;span style="font-weight:bold">static&lt;/span> TupleType members;
&lt;span style="font-weight:bold">static&lt;/span> &lt;span style="font-weight:bold">const&lt;/span> &lt;span style="color:#458;font-weight:bold">char&lt;/span>&lt;span style="font-weight:bold">*&lt;/span> &lt;span style="color:#900;font-weight:bold">name&lt;/span>()
{
&lt;span style="font-weight:bold">return&lt;/span> registerName&lt;span style="font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="font-weight:bold">&amp;gt;&lt;/span>();
}
};
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> T, &lt;span style="font-weight:bold">typename&lt;/span> TupleType&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
TupleType MetaHolder&lt;span style="font-weight:bold">&amp;lt;&lt;/span>T, TupleType&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>members &lt;span style="font-weight:bold">=&lt;/span> registerMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="font-weight:bold">&amp;gt;&lt;/span>();
} &lt;span style="color:#998;font-style:italic">// end of namespace detail
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>} &lt;span style="color:#998;font-style:italic">// end of namespace meta
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do we force the instantiation of this template to get generated? Simple, we just use some function from namespace &lt;code>meta&lt;/code>! For example, if you call &lt;code>meta::doForAllMembers&amp;lt;Person&amp;gt;&lt;/code>, it will use &lt;code>MetaHolder&amp;lt;Person, TupleType&amp;gt;&lt;/code> class, which will get compiler to generate this class! Its tuple is initialized by calling &lt;code>meta::registerMembers&amp;lt;Person&amp;gt;&lt;/code>, when the initialization of &lt;code>members&lt;/code> tuple is performed. But wait, how do I get &lt;code>TupleType&lt;/code>? I get it from &lt;code>registerMember&amp;lt;T&amp;gt;&lt;/code> function! So, &lt;code>TupleType = decltype(registerMembers&amp;lt;T&amp;gt;())&lt;/code>.&lt;/p>
&lt;p>So, we get a function like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="font-weight:bold">typename&lt;/span> Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> getMembers()
{
&lt;span style="font-weight:bold">return&lt;/span> detail&lt;span style="font-weight:bold">::&lt;/span>MetaHolder&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class, &lt;span style="font-weight:bold">decltype&lt;/span>(registerMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Class&lt;span style="font-weight:bold">&amp;gt;&lt;/span>())&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>members;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="doing-something-for-one-member">Doing something for one member&lt;/h3>
&lt;p>Suppose we want to do some things only for member called &amp;ldquo;name&amp;rdquo; using MetaStuff:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>doForAllMembers&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(
[&lt;span style="font-weight:bold">&amp;amp;&lt;/span>person](&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> member)
{
&lt;span style="font-weight:bold">if&lt;/span> (member.getName() &lt;span style="font-weight:bold">==&lt;/span> &lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>) {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Name starts with &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> member.get(person)[&lt;span style="color:#099">0&lt;/span>] &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#39;\n&amp;#39;&lt;/span>;
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sadly, this doesn&amp;rsquo;t work! Why? Because lambda gets generated for all registered types! Not just for strings, but for &lt;code>Person::age&lt;/code>, which is an &lt;code>int&lt;/code>. The code &lt;code>member.get(person)[0]&lt;/code> is not valid for &lt;code>Member&lt;/code> whose type is &lt;code>int&lt;/code>, so the compilation fails.&lt;/p>
&lt;p>We can use special &lt;code>doForMember&lt;/code> function, which will work well:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">meta&lt;span style="font-weight:bold">::&lt;/span>doForMember&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Person, std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>,
[&lt;span style="font-weight:bold">&amp;amp;&lt;/span>person](&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> member)
{
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Name starts with &amp;#34;&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> member.get(person)[&lt;span style="color:#099">0&lt;/span>] &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#39;\n&amp;#39;&lt;/span>;
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How does it work? With some SFINAE:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">bool&lt;/span> Test,
&lt;span style="font-weight:bold">typename&lt;/span> F, &lt;span style="font-weight:bold">typename&lt;/span>... Args,
&lt;span style="font-weight:bold">typename&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>enable_if_t&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Test&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span>
&lt;span style="color:#458;font-weight:bold">void&lt;/span> call_if(F&lt;span style="font-weight:bold">&amp;amp;&amp;amp;&lt;/span> f, Args&lt;span style="font-weight:bold">&amp;amp;&amp;amp;&lt;/span>... args)
{
f(std&lt;span style="font-weight:bold">::&lt;/span>forward&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Args&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(args)...);
}
&lt;span style="font-weight:bold">template&lt;/span> &lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">bool&lt;/span> Test,
&lt;span style="font-weight:bold">typename&lt;/span> F, &lt;span style="font-weight:bold">typename&lt;/span>... Args,
&lt;span style="font-weight:bold">typename&lt;/span>, &lt;span style="font-weight:bold">typename&lt;/span> &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#458;font-weight:bold">void&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#458;font-weight:bold">void&lt;/span> call_if(F&lt;span style="font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#998;font-style:italic">/* f */&lt;/span>, Args&lt;span style="font-weight:bold">&amp;amp;&amp;amp;&lt;/span>... &lt;span style="color:#998;font-style:italic">/* args */&lt;/span>)
{ &lt;span style="color:#998;font-style:italic">/* do nothing */&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then I do this in &lt;code>doForMember&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">detail&lt;span style="font-weight:bold">::&lt;/span>call_if&lt;span style="font-weight:bold">&amp;lt;&lt;/span>std&lt;span style="font-weight:bold">::&lt;/span>is_same&lt;span style="font-weight:bold">&amp;lt;&lt;/span>MemberT, T&lt;span style="font-weight:bold">&amp;gt;::&lt;/span>value&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(std&lt;span style="font-weight:bold">::&lt;/span>forward&lt;span style="font-weight:bold">&amp;lt;&lt;/span>F&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(f), member);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>std::is_same&lt;/code> returns &lt;code>true&lt;/code>, then &lt;code>call_if&lt;/code> with function call gets generated, otherwise &lt;code>call_if&lt;/code> function will be empty. Remember that &amp;ldquo;f&amp;rdquo; is most likely to be generic lambda, so if it doesn&amp;rsquo;t get called with some argument, then template instantiation for this type is not generated and everything works as expected.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>And that&amp;rsquo;s mostly how MetaStuff works! The library is a bit more complicated than that, because it lets you register classes without default constructors, register getters and setters and more.&lt;/p>
&lt;p>The library is still very simple and needs much more work on it. But it&amp;rsquo;s certainly one of the hardest things I&amp;rsquo;ve ever written and I&amp;rsquo;m very proud of it. I&amp;rsquo;ve learned a lot about templates, and I hope you did too. Maybe this article even will inspire you to write your own library or start using MetaStuff for you projects.&lt;/p>
&lt;p>Thank you for reading!&lt;/p></description></item><item><title>Re:creation dev log. December 2016 - March 2017.</title><link>https://eliasdaler.github.io/hugo-test/posts/re-creation-devlog-december-march/</link><pubDate>Wed, 19 Apr 2017 23:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/re-creation-devlog-december-march/</guid><description>&lt;p>No posts in four months! And I haven&amp;rsquo;t worked on the game for the last one and a half. Is the project dead? No! Let&amp;rsquo;s pretend that nothing happened and I&amp;rsquo;ll show what I did since December and will tell about my future plans in the end.&lt;/p>
&lt;figure>&lt;img src="child-parent.gif"/>&lt;figcaption>
&lt;h4>Child-parent example&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#lots-of-work-moving-everything-to-lua">Lots of work! Moving everything to Lua&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gui">GUI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-small-c-related-refactorings">Some small C++ related refactorings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#levels-and-tile-maps">Levels and tile maps&lt;/a>&lt;/li>
&lt;li>&lt;a href="#child-parent-hierarchy-and-relative-transforms">Child-parent hierarchy and relative transforms&lt;/a>&lt;/li>
&lt;li>&lt;a href="#other-small-things">Other small things&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion-and-plans">Conclusion and plans&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="lots-of-work-moving-everything-to-lua">Lots of work! Moving everything to Lua&lt;/h2>
&lt;p>I moved a lot of code to Lua! For quite some time I thought that this didn&amp;rsquo;t make much sense or was very difficult, but turns out it&amp;rsquo;s easier as the more and more code gets moved to Lua. Here&amp;rsquo;s a comparison of lines of code between two dates.&lt;/p>
&lt;p>&lt;strong>27.11.2016&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>files&lt;/th>
&lt;th>blank&lt;/th>
&lt;th>comment&lt;/th>
&lt;th>code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C++&lt;/td>
&lt;td>103&lt;/td>
&lt;td>2420&lt;/td>
&lt;td>533&lt;/td>
&lt;td>13073&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lua&lt;/td>
&lt;td>116&lt;/td>
&lt;td>510&lt;/td>
&lt;td>154&lt;/td>
&lt;td>5071&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C/C++ header&lt;/td>
&lt;td>123&lt;/td>
&lt;td>1386&lt;/td>
&lt;td>158&lt;/td>
&lt;td>4315&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>22.02.2017&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>files&lt;/th>
&lt;th>blank&lt;/th>
&lt;th>comment&lt;/th>
&lt;th>code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C++&lt;/td>
&lt;td>109&lt;/td>
&lt;td>1938&lt;/td>
&lt;td>330&lt;/td>
&lt;td>10590&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lua&lt;/td>
&lt;td>127&lt;/td>
&lt;td>706&lt;/td>
&lt;td>135&lt;/td>
&lt;td>5167&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C/C++ header&lt;/td>
&lt;td>133&lt;/td>
&lt;td>1296&lt;/td>
&lt;td>90&lt;/td>
&lt;td>4014&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note, that even though I&amp;rsquo;ve added a lot of new code, the resulting code is still smaller. And Lua code became larger just by 100 lines, even though I moved a lot of C++ code here! This may also look as a little work was done, but &lt;code>git diff&lt;/code> between commits made in December and March results in this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#099">460&lt;/span> files changed, &lt;span style="color:#099">14486&lt;/span> insertions&lt;span style="font-weight:bold">(&lt;/span>+&lt;span style="font-weight:bold">)&lt;/span>, &lt;span style="color:#099">16035&lt;/span> deletions&lt;span style="font-weight:bold">(&lt;/span>-&lt;span style="font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s a lot of changes!&lt;/p>
&lt;p>All game-specific components are now in Lua. For example, inventory, health components and others can be implemented in Lua efficiently because I don&amp;rsquo;t have to iterate them in tight loops in every frame. They&amp;rsquo;re mostly used for some basic logic and data storage. Only the following components are implemented in C++ now: Transform, Hierarchy, Graphics, Movement, Sound. As you can see, these components are pretty low-level and are mostly not tied to my game at all, which is great.
Here&amp;rsquo;s an example of a game specific component defined in Lua:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="color:#998;font-style:italic">-- ItemComponent.lua&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> Component &lt;span style="font-weight:bold">=&lt;/span> require(&lt;span style="color:#b84">&amp;#34;Component&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">local&lt;/span> ItemComponent &lt;span style="font-weight:bold">=&lt;/span> Component:subclass(&lt;span style="color:#b84">&amp;#34;ItemComponent&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">initialize&lt;/span>()
Component:initialize()
self.value &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">loadData&lt;/span>(data)
&lt;span style="font-weight:bold">if&lt;/span> data.value &lt;span style="font-weight:bold">then&lt;/span>
self.value &lt;span style="font-weight:bold">=&lt;/span> data.value
&lt;span style="font-weight:bold">end&lt;/span>
self.name &lt;span style="font-weight:bold">=&lt;/span> data.name
self.description &lt;span style="font-weight:bold">=&lt;/span> self.description
self.iconName &lt;span style="font-weight:bold">=&lt;/span> data.iconName
self.onEquipFunc &lt;span style="font-weight:bold">=&lt;/span> data.onEquip
self.onUnequipFunc &lt;span style="font-weight:bold">=&lt;/span> data.onUnequip
self.useFunc &lt;span style="font-weight:bold">=&lt;/span> data.use
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">use&lt;/span>(itemOwner)
&lt;span style="font-weight:bold">if&lt;/span> self.useFunc &lt;span style="font-weight:bold">then&lt;/span>
self:useFunc(itemOwner)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">onEquip&lt;/span>(itemOwner)
&lt;span style="font-weight:bold">if&lt;/span> self.onEquipFunc &lt;span style="font-weight:bold">then&lt;/span>
self:onEquipFunc(itemOwner)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">onUnequip&lt;/span>(itemOwner)
&lt;span style="font-weight:bold">if&lt;/span> self.onUnequipFunc &lt;span style="font-weight:bold">then&lt;/span>
self:onUnequipFunc(itemOwner)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#458;font-weight:bold">ItemComponent&lt;/span>:&lt;span style="color:#900;font-weight:bold">getIconName&lt;/span>()
&lt;span style="font-weight:bold">return&lt;/span> self.iconName
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> ItemComponent
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I also moved all of GUI logic to Lua too. The most complex GUI is dialogue GUI. It does a lot of stuff: it displays text character by character, speaking entity&amp;rsquo;s portrait; highlights some words, handles player&amp;rsquo;s choice in dialogues. I didn&amp;rsquo;t think that moving it to Lua would be real as the logic was pretty complex&amp;hellip; but I managed to do it! Here&amp;rsquo;s a reminder of how many things happen in dialogues:&lt;/p>
&lt;figure>&lt;img src="dialogue-cat.gif"/>&lt;figcaption>
&lt;h4>Dialogue example&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Now &lt;code>GuiState&lt;/code> in C++ just iterates over all GUIs in GUI stack and just calls update and draw functions, not caring about game-specific things. Oh yeah, I now have GUI stack, so I can implement complex GUI&amp;rsquo;s which stack on top of each other (e.g. pause screen GUI on top of game GUI)&lt;/p>
&lt;p>By moving some components and all GUI stuff to Lua I finished a pretty important thing: all the game logic is in Lua now! Absolutely everything! This makes me incredibly happy and lets me easily implement new things without caring how Lua and C++ will interact. And another great thing is that the code is now easier to read and it 2-3 times smaller!&lt;/p>
&lt;p>I also implemented game mode stack in Lua, which was previously handled in C++. This means that I can easily create new game modes without touching any C++ code.&lt;/p>
&lt;p>This makes my engine a lot more generic and separates it from the game, which is great. This means that I can easily reuse my engine in other projects later: I&amp;rsquo;ll just have to change scripts and resources and most of the C++ code will remain the same. I will probably explain my current engine structure a bit later, once I&amp;rsquo;m 100% confident that it works great.&lt;/p>
&lt;h2 id="gui">GUI&lt;/h2>
&lt;p>Let&amp;rsquo;s talk about GUI a bit more. First of all, now there&amp;rsquo;s a good parent-child relation between elements. I store child offset relative to parent, so I can easily group and move things together. For example, a portrait of talker is a child of a dialogue window and its relative position to the border of the window is (6,8). So if I render the dialogue window at (100, 200), I&amp;rsquo;ll render the dialogue portait at (106, 208) by combining local child&amp;rsquo;s transform and parent&amp;rsquo;s transform.&lt;/p>
&lt;p>I also implemented nine-patch windows. Previously I just stored a big sprites of windows, but now I can just store them like this:&lt;/p>
&lt;figure>&lt;img src="gui-nine-patch.png"/>&lt;figcaption>
&lt;h4>Nine-patch texture&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>and with some texture repeating, flipping and mirroring, I can get the dialogue window!
&lt;figure>&lt;img src="dialogue-window.png"/>&lt;figcaption>
&lt;h4>Resulting dialogue box&lt;/h4>
&lt;/figcaption>
&lt;/figure>
This not only saves texture space, but also allows me to easily create windows of different sizes.&lt;/p>
&lt;h2 id="some-small-c-related-refactorings">Some small C++ related refactorings&lt;/h2>
&lt;ul>
&lt;li>Added lots of &lt;code>const&lt;/code> where possible. The game was const correct most of the time, but there are quite a few places where I made non-const local variables which don&amp;rsquo;t change or failed to make some member function const, which they later became with some effort. Turns out that most of the time the things stay constant and very few things change, that&amp;rsquo;s why having most of the stuff const is great: you can easily see things that &lt;strong>do&lt;/strong> change.&lt;/li>
&lt;li>Stopped passing pointers in most functions and now pass everything by reference unless the pointer is really needed. A lot of this was in very old code, when I didn&amp;rsquo;t realize how perfect references are.&lt;/li>
&lt;li>Started using &lt;code>std::reference_wrapper&lt;/code> instead of raw non-owning pointers for storing references to stuff in &lt;code>std::vector&lt;/code>. This is a very useful indicator of &amp;ldquo;hey, this is just a reference!&amp;rdquo;&lt;/li>
&lt;li>Stopped handling each axis separately in some places, making changes like this:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">someX &lt;span style="font-weight:bold">=&lt;/span> otherX &lt;span style="font-weight:bold">+&lt;/span> &lt;span style="color:#099">5&lt;/span>;
someY &lt;span style="font-weight:bold">=&lt;/span> otherY &lt;span style="font-weight:bold">+&lt;/span> &lt;span style="color:#099">10&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and now I do this instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">someVector &lt;span style="font-weight:bold">+=&lt;/span> otherVector &lt;span style="font-weight:bold">+&lt;/span> sf&lt;span style="font-weight:bold">::&lt;/span>Vector2f(&lt;span style="color:#099">5&lt;/span>, &lt;span style="color:#099">10&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I used a lot of vectors before, but there were still places where I did computations for each vector&amp;rsquo;s coordinate or stored coordinates in two variables. It was pretty dumb, because most of the time you do the same thing for both X and Y, and duplicating the same code is not smart.&lt;/p>
&lt;ul>
&lt;li>Introduced lots of type aliases, for example &lt;code>TileIndex&lt;/code> instead of &lt;code>sf::Vector2i&lt;/code>, &lt;code>ComponentList&lt;/code> instead of &lt;code>std::vector&amp;lt;std::reference_wrapper&amp;lt;Component&amp;gt;&amp;gt;&lt;/code> and so on (wish there were strong typedefs in C++!). This made code much more readable, because it leaves you with less information and most of the time I just don&amp;rsquo;t care about the underlying type, I care about it&amp;rsquo;s meaning.&lt;/li>
&lt;/ul>
&lt;h2 id="levels-and-tile-maps">Levels and tile maps&lt;/h2>
&lt;p>A huge effort was put into remaking tile map system. Previously each tile map was a grid of chunks (each 8x8 tiles in size). This allowed me to save some space by not having to store a lot of empty tiles. But the data structure was pretty complicated. I used &lt;code>std::vector&amp;lt;std::vector&amp;lt;TilemapChunk&amp;gt;&amp;gt;&lt;/code> and so if some chunks were stored in negative coordinates, I had to store index of top-left chunk and make sure to keep it in mind when accessing other chunks, because I couldn&amp;rsquo;t store negative indices in &lt;code>std::vector&amp;lt;std::vector&amp;lt;TilemapChunk&amp;gt;&amp;gt;&lt;/code>. So, if &lt;code>minChunkIndex&lt;/code> was (-10, -20), I found real index of (-3, -4) chunk in vector of vectors by removing &lt;code>minChunkIndex&lt;/code>: (-3, -4) - (-10, -20) = (7, 16)&lt;/p>
&lt;p>It wasn&amp;rsquo;t very good system for various reasons, so I implemented a simpler structure: &lt;code>std::unordered_map&amp;lt;ChunkIndex, LevelChunk&amp;gt;&lt;/code> (&lt;code>ChunkIndex&lt;/code> is &lt;code>sf::Vector2i&lt;/code>). Now I don&amp;rsquo;t have to store &lt;code>minChunkIndex&lt;/code> and formulas are simplified. I also don&amp;rsquo;t waste space on empty chunks, which is another advantage of new system. It&amp;rsquo;s similar to implementing sparse matrices: instead of having large 2D array, I only store elements which are not zero (not empty in case of tile chunks).&lt;/p>
&lt;p>I also improved a lot of level editor code by completely removing all duplication, encapsulation breaks, etc. I previously thought like this:&amp;ldquo;It&amp;rsquo;s just a development tool, it doesn&amp;rsquo;t have to have very good code!&amp;rdquo;, but turns out that code here matters very much too! First of all, duplication is always bad. Secondly, encapsulation breaks make changes to other classes much harder.&lt;/p>
&lt;p>Thankfully, there weren&amp;rsquo;t much such breaks and I actually made a post previously about how having &lt;code>TileMap::setTile&lt;/code> function saved me a lot of time, as I could easily change data structures of level without having to modify level editor code. But there were still some places in which I had to access some private parts of &lt;code>TileMap&lt;/code>. So I made a lot of getters and setters. And it made &lt;code>TileMap&lt;/code> class not properly encapsulated and much longer than it needed to be. So I found a great alternative.&lt;/p>
&lt;p>&lt;a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Friendship_and_the_Attorney-Client">Attorney-Client pattern&lt;/a> is a great way of solving this problem. Basically, I let some encapsulation breaks by creating LevelModifier structure and making it a friend of TileMap and other level related classes. Now if I need to create an encapsulation breaking function, I create something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#458;font-weight:bold">void&lt;/span> LevelModifier&lt;span style="font-weight:bold">::&lt;/span>setTile(Tilemap&lt;span style="font-weight:bold">&amp;amp;&lt;/span> tilemap, &lt;span style="color:#998;font-style:italic">/* other args */&lt;/span>)
{
... &lt;span style="color:#998;font-style:italic">// can access private data members and member functions of TileMap
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function is static, so I can later call it in LevelEditor like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">if&lt;/span> (&lt;span style="color:#998;font-style:italic">/* left mouse button clicked */&lt;/span>) {
LevelModifier&lt;span style="font-weight:bold">::&lt;/span>setTile(tileMap, selectedTile);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Awesome. In fact, the number of such encapsulation functions is just 10. Pretty low and easily controllable. If I find myself in a situation where I had to change TileMap class considerably, I&amp;rsquo;ll be confident that I&amp;rsquo;ll have to deal with breaking changes in just a few functions.&lt;/p>
&lt;p>After this experience, I wondered how many functions of other classes I can make private. Previously I made them public by default for some reason, even if they were only called in member functions of this class. I managed to make quite a lot functions private without making significant changes to any code and improved encapsulation by doing so. There&amp;rsquo;s a small advantage to it: I can be sure that changing private function of the class won&amp;rsquo;t need many changes in other places.&lt;/p>
&lt;p>Back to levels. Previously all entity positions were stored in a level file and during level loading I just created each entity and placed them in the right spots of the map. This made some things pretty hard to load/save. I had to store position where entity spawned, I had to know if some entity will be saved to level file or not, etc.&lt;/p>
&lt;p>But then I realized one simple thing: what I considered &amp;ldquo;entity info&amp;rdquo; in level files was actually &amp;ldquo;spawn points info&amp;rdquo;. So if I just stored info about spawn points in tile map, I could then easily spawn entities with them later and also change them in level editor, instead of working with concrete entity instances. So, when I move entity in level editor, I don&amp;rsquo;t just move instance of this entity, but also its corresponding spawn point.&lt;/p>
&lt;p>It&amp;rsquo;s just separation of concerns. Entity doesn&amp;rsquo;t have to know about it&amp;rsquo;s spawn point most of the time. And when I save level, I don&amp;rsquo;t care about particular entities, I just care about spawn points. I can iterate through them and just save their properties. Restoring initial level state is also easier: I can just remove all entities and spawn new ones using spawn points.&lt;/p>
&lt;p>Trying to restore each entity&amp;rsquo;s initial state is more error prone. I guess this method of doing things explains bugs with saves in some games. In Fallout: New Vegas some NPCs may become hostile and attack you because of your actions, and after you reload your save, they may still attack you, even though in the loaded save state they were neutral to you! Probably this is explained by a bug when restoring entity&amp;rsquo;s state, if you reload the game, the game works as usual.&lt;/p>
&lt;p>I also started storing tile maps in JSON. Previously I stored them in a custom plain text format, but as the format got progressively harder to maintain (lots of parsing/saving code), I remade the whole thing in JSON. The code is much simpler to read and expand, so it&amp;rsquo;s great!&lt;/p>
&lt;p>Another thing I made is ability to hold mouse button down and paint tiles. Yes, this seems like a very easy thing to implement, but it wasn&amp;rsquo;t! I had to make sure that I could properly undo this action, create new level chunks on the fly, etc. And now I can easily create maps in any direction with this feature:&lt;/p>
&lt;figure>&lt;img src="infinite-maps.gif"/>
&lt;/figure>
&lt;h2 id="child-parent-hierarchy-and-relative-transforms">Child-parent hierarchy and relative transforms&lt;/h2>
&lt;p>Okay, if I made a more complex game, I would have made this a lot earlier, but here we go. Look at the gif:&lt;/p>
&lt;figure>&lt;img src="child-parent.gif"/>&lt;figcaption>
&lt;h4>Child-parent example&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Hat entity is a child of Renatus entity. Renatus is a child of moving platform entity. This simple hierarchy is easy to handle: the only thing that moves is a platform. It stores coordinate of Renatus relative to it and uses it for relative movement. As Renatus gets moved, the hat moves by the same offset as well. The system is very easy, I just traverse through hierarchy and apply the same movement delta to each entity.&lt;/p>
&lt;p>One small thing had given me lots of headache: sometimes the relative movement was a bit shaky. It was because of float rounding, the picture explains the problem:
&lt;img src="https://eliasdaler.github.io/hugo-test/assets/re_creation_dev_log_dec_march/floor_problem.png" alt="Floor problem">
&lt;figure>&lt;img src="floor-problem.png"/>
&lt;/figure>
In the example both entities move by 0.2 pixels, but due to rounding on the screen, you can see a gap between the two appearing. This was unacceptable!&lt;/p>
&lt;p>Check out the &lt;a href="https://en.sfml-dev.org/forums/index.php?topic=21626">thread I made about this&lt;/a>, if you&amp;rsquo;re interested in my solution. There were some interesting points made in the thread as well.&lt;/p>
&lt;h2 id="other-small-things">Other small things&lt;/h2>
&lt;p>And here are some other small things which I don&amp;rsquo;t want to write about, but if you&amp;rsquo;re interested in some, feel free to ask about them!&lt;/p>
&lt;ul>
&lt;li>Previously all side animations had copies in a sprite sheet (e.g. left and right walking animations). Now I just flip them on GPU by setting texture rect&amp;rsquo;s width to be negative, when I want to flip animation. I&amp;rsquo;ll be doing the same with mirrored/rotated tiles a bit later.&lt;/li>
&lt;li>Stupid collision optimization: I stopped checking collisions between static entities. There&amp;rsquo;s no need to check if static, unmovable tree collides with house or not. Both entities can&amp;rsquo;t move The number of collision checks reduced greatly in the result and collision is very fast now.&lt;/li>
&lt;li>Started using entity handles (see &lt;a href="https://eliasdaler.github.io/game-object-references/">my article&lt;/a> about them)&lt;/li>
&lt;li>Camera is an entity now. Of course, it has properties of an entity: transform, movement component, AI component (used for following the path). So I don&amp;rsquo;t have to rewrite the same code twice and can script all camera logic in Lua.&lt;/li>
&lt;li>Started using seconds instead of milliseconds everywhere. &lt;code>sf::Time::asSeconds&lt;/code> returns a &lt;code>float&lt;/code>, while &lt;code>sf::Time::asMilliseconds&lt;/code> returns a rounded &lt;code>int&lt;/code> (usually 16, corresponding to 60 FPS), the results are terrible for pixel perfect games, especially during camera scrolling. It results in camera having non-smooth movement, which has been a problem I was trying to fix for ages and finally did with such a simple change. Here&amp;rsquo;s &lt;a href="https://plus.google.com/+flibitijibibo/posts/PysMth9Y5kN">a post about the similar problem which FEZ apparently also had&lt;/a> which inspired me to do this.&lt;/li>
&lt;li>Made some multi-threading during loading. Basically, I can do most of the loading in another thread: sounds, scripts, level data, etc. But not textures, because OpenGL is not multi-threaded. The solution is simple: I load textures in RAM first and then move them to GPU in a main thread. It blocks the main thread, but it&amp;rsquo;s pretty fast and not really noticeable.&lt;/li>
&lt;li>Worked on diagonal collision. I previously worked on it, but it was very buggy, as the player could get stuck between tiles (I noticed that some SNES and GBA games have this problem, e.g. Earthbound, Mother 3). But I fixed it! I hope that I&amp;rsquo;ll never have to deal with tile collision in the near future. It&amp;rsquo;s so hard!&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="tile-collision.gif"/>
&lt;/figure>
&lt;p>There are probably a lot of things I missed, but I hope that it&amp;rsquo;s enough to show you how much stuff I&amp;rsquo;ve done.&lt;/p>
&lt;h2 id="conclusion-and-plans">Conclusion and plans&lt;/h2>
&lt;p>This semester is very intense. Lots of homework, project assignments and so on. This was the reason I stopped working on a game for a 1.5 months and probably won&amp;rsquo;t be working on it for another two and a half.&lt;/p>
&lt;p>In the meantime, I will be doing small things about the game which don&amp;rsquo;t require coding: improve plot, think about game mechanics and puzzles, limit my scope, etc. I also plan to read stuff about game development and think how I can further improve my code and engine structure. It&amp;rsquo;s not the main priority now, however. I&amp;rsquo;m mostly happy with most of my code and don&amp;rsquo;t think that a huge changes will come.&lt;/p>
&lt;p>What I want to have in the future is a stable foundation. You know, just some level with a lot of things going on: AI, NPCs, complex tile map, basic combat, particles and so on. A vertical slice of the game, working just fine. The confidence in the code base: that it works well and doesn&amp;rsquo;t require me write a lot of boilerplate code and that I&amp;rsquo;m not limited by it. Good resource system, neat organization in files, smooth content creation and so on.&lt;/p>
&lt;p>These are some things which take a lot of time, but once they&amp;rsquo;re achieved, they can provide a lot of confidence and comfort in the future and save me from having to change a lot of things at once.&lt;/p>
&lt;p>Don&amp;rsquo;t worry about the project: I&amp;rsquo;ve taken a few breaks from it before and coming back was as exciting as ever. As the time goes on, I don&amp;rsquo;t lose any motivation or confidence in it, in fact I love it more and more. And some of you may be disappointed in my slow progress, and I&amp;rsquo;m sorry for it, but not rushing is what makes it such a nice experience for me. And hey, even if you don&amp;rsquo;t get the playable game in the end, you can still learn something from my dev logs and tutorials. If I didn&amp;rsquo;t spend lots of time reiterating, researching, refactoring, I would have never figured out a lot of things which helped a lot of people.&lt;/p>
&lt;p>One more thing: art, dialogue, plot, atmosphere and whole concept just got a lot better as the time went by. If I finished the game with the art, plot and gameplay it had two years ago, it would not be very good. But as my skills improve, I apply them to the game and make it considerably better than before.&lt;/p>
&lt;p>Thanks for reading!&lt;/p></description></item><item><title>Making and storing references to game objects (entities) in C++ and Lua</title><link>https://eliasdaler.github.io/hugo-test/posts/game-object-references/</link><pubDate>Sun, 22 Jan 2017 14:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/game-object-references/</guid><description>&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shared_ptr-and-weak_ptr">shared_ptr and weak_ptr&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-unique-ids">Using unique ids&lt;/a>&lt;/li>
&lt;li>&lt;a href="#storing-references-to-entities-in-lua">Storing references to entities in Lua&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;figure>&lt;img src="ids.png"/>
&lt;/figure>
&lt;p>The problem of handling references to game objects (I&amp;rsquo;ll call them &lt;em>entities&lt;/em>) comes up very often. Sometimes it&amp;rsquo;s child-parent relationship between the entities, sometimes it&amp;rsquo;s useful to store a reference to an object in event data, some task scheduling class and so on.&lt;/p>
&lt;p>Sometimes a simple pointer, reference or &lt;code>std::reference_wrapper&lt;/code> is enough. But the problem with raw pointers and references is that once you use them, you have to make sure that the entity which is being referenced stays alive and is not moved in memory without notifying objects which hold references. And with good design you&amp;rsquo;ll probably be able to achieve that.&lt;/p>
&lt;p>But stale pointers/references give some of the worst bugs, which are difficult to track, crash your game and may not be easily identifiable. Some entities may start to occupy different addresses in memory (for example, after you reload a level and decide to create all entities from scratch). While it&amp;rsquo;s possible to manually update all pointers to previously referenced entities, it&amp;rsquo;s certainly will be better to do so automatically and without a chance of forgetting some pointers which will be stale.&lt;/p>
&lt;p>Let&amp;rsquo;s see all these problems can be solved. The latest solution (about storing references to Lua) was discovered by me not long ago and it is the point of me writing the article, but I want to show some other ways of solving the problem. Let&amp;rsquo;s start!&lt;/p>
&lt;h2 id="shared_ptr-and-weak_ptr">shared_ptr and weak_ptr&lt;/h2>
&lt;p>Some of the problems with raw references can be solved with &lt;code>std::shared_ptr&lt;/code> and &lt;code>std::weak_ptr&lt;/code>. First, you create your entities as with &lt;code>std::make_shared&lt;/code>. After that you&amp;rsquo;ll create all references to it with &lt;code>std::weak_ptr&lt;/code>s which won&amp;rsquo;t affect your entity&amp;rsquo;s lifetime. After that you can use &lt;code>std::weak_ptr&amp;lt;T&amp;gt;::expired&lt;/code> function to check if the reference is still valid.&lt;/p>
&lt;p>The solution is not perfect. First of all, it requires you to create all your entities as &lt;code>shared_ptr&lt;/code>s which may have some significant overhead compared to &lt;code>unique_ptr&lt;/code>s. And after all, it&amp;rsquo;s better for the lifetime of entities not to be shared and that semantic is better expressed with &lt;code>unique_ptr&lt;/code>. Shared pointers also don&amp;rsquo;t solve the problem of moving entities in memory: you can&amp;rsquo;t swap what&amp;rsquo;s inside the &lt;code>shared_ptr&lt;/code> and have all &lt;code>weak_ptr&lt;/code>s automatically update their pointers.&lt;/p>
&lt;h2 id="using-unique-ids">Using unique ids&lt;/h2>
&lt;p>One solution to the problem is just creating unique ids for entities and storing those ids instead of raw pointers or references. There a lots of ways to generate and represent entity ids. Ids can just be integers with &lt;code>EntityManager&lt;/code> having a counter which will be incremented as new entities are created: the first entity will get id=0, the second one id=1 and so on. Another way to generate ids is to use some hashing algorithm or &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID&lt;/a>s. No matter what, your ids should stay unique, unless you add some additional info (like entity creation time or some tags) to your id.&lt;/p>
&lt;p>Here&amp;rsquo;s how your &lt;code>EntityManager&lt;/code> class may look:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">EntityManager&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
Entity&lt;span style="font-weight:bold">*&lt;/span> getEntity(EntityId id) &lt;span style="font-weight:bold">const&lt;/span>;
&lt;span style="color:#458;font-weight:bold">bool&lt;/span> &lt;span style="color:#900;font-weight:bold">entityExists&lt;/span>(EntityId id) &lt;span style="font-weight:bold">const&lt;/span>;
&lt;span style="color:#998;font-style:italic">// ...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
std&lt;span style="font-weight:bold">::&lt;/span>unordered_map&lt;span style="font-weight:bold">&amp;lt;&lt;/span>EntityId, std&lt;span style="font-weight:bold">::&lt;/span>unique_ptr&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Entity&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span> entities;
&lt;span style="color:#998;font-style:italic">// ...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using ids also helps with recreation problem: you can easily reload/recreate the entity and just assign the same id to it as before. It will have a different adress in memory, but the next time someone calls &lt;code>getEntity&lt;/code> the updated entity is returned. You can also easily send these ids over the network or save them in your save files.&lt;/p>
&lt;p>Your code when using entity id becomes something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">auto&lt;/span> entityPtr &lt;span style="font-weight:bold">=&lt;/span> g_EntityManager.getEntity(entityId);
entityPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>doSomething();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course this creates some overhead because you now have a layer of indirection: you have to search &lt;code>unordered_map&lt;/code> inside the &lt;code>EntityManager&lt;/code> to get the raw reference to the entity, but if you don&amp;rsquo;t do it too often (and you most likely won&amp;rsquo;t), you&amp;rsquo;ll be fine!&lt;/p>
&lt;p>There&amp;rsquo;s another improvement which can be done: you can wrap your id inside the struct and then overload &lt;code>operator-&amp;gt;&lt;/code> for handle to act like a raw pointer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">EntityHandle&lt;/span> {
EntityId id;
EntityManager&lt;span style="font-weight:bold">*&lt;/span> entityManager;
EntityHandle(EntityId id, EntityManager&lt;span style="font-weight:bold">*&lt;/span> entityManager) &lt;span style="font-weight:bold">:&lt;/span>
id(id), entityManager(entityManager)
{}
Entity&lt;span style="font-weight:bold">*&lt;/span> &lt;span style="font-weight:bold">operator&lt;/span>&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>() &lt;span style="font-weight:bold">const&lt;/span> {
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="color:#900;font-weight:bold">get&lt;/span>();
}
Entity&lt;span style="font-weight:bold">*&lt;/span> &lt;span style="color:#900;font-weight:bold">get&lt;/span>() &lt;span style="font-weight:bold">const&lt;/span> {
assert(entityManager&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>entityExists(id));
&lt;span style="font-weight:bold">return&lt;/span> entityManager&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>getEntity(id);
}
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can do things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">EntityHandle &lt;span style="color:#900;font-weight:bold">handle&lt;/span>(someEntityId, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>g_EntityManager);
handle&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>doSomething();
&lt;span style="color:#998;font-style:italic">// or...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>
&lt;span style="font-weight:bold">auto&lt;/span> entityPtr &lt;span style="font-weight:bold">=&lt;/span> handle.get();
entityPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>doSomething();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that we also get some error checking with assert which checks validity of the reference.
Great! Now let&amp;rsquo;s see how we can reference entities in Lua scripts.&lt;/p>
&lt;h2 id="storing-references-to-entities-in-lua">Storing references to entities in Lua&lt;/h2>
&lt;blockquote class="hint-info">
Full implementation can be found here: &lt;a href="https://gist.github.com/eliasdaler/f5c2ee50fc7e42bf3ee18ad7d46d18f8">C++ part&lt;/a>, &lt;a href="https://gist.github.com/eliasdaler/f3516d3deabc32b465a7c244ff082cf0">Lua part&lt;/a>.
&lt;/blockquote>
&lt;p>First of all, it&amp;rsquo;s obvious that you can use the same approach in Lua. Your handle can just be a number or a table with &lt;code>__index&lt;/code> meta-method so that you can use your handle as if it was the raw reference. But there&amp;rsquo;s a neater method I recently came up with. Let&amp;rsquo;s see how it works.&lt;/p>
&lt;p>First of all, our handles will be tables with raw C++ references stored in them as userdata. They&amp;rsquo;ll also have a bool named &lt;code>isValid&lt;/code> which will help us test if the handle is still valid. We&amp;rsquo;ll also have a global table of references in Lua, so that you can easily get handle from any place without calling C++. What&amp;rsquo;s neat is that you&amp;rsquo;ll get &lt;strong>references&lt;/strong> to your handles, not a copy. It&amp;rsquo;s great, because you can easily compare two handles or even use them as table keys. You also don&amp;rsquo;t waste your memory, but that&amp;rsquo;s not a big concern as our handles are very light.&lt;/p>
&lt;p>If you want to remove and recreate some entity, you&amp;rsquo;ll just have to notify the main Lua handle which will be stored inside some global Lua table. And because all your handles in Lua will be references to original handle you won&amp;rsquo;t have to care about them: once you update the main handle, it&amp;rsquo;s updated everywhere.&lt;/p>
&lt;p>Another good thing is that once the entity is removed, we can just set &lt;code>isValid&lt;/code> to &lt;code>false&lt;/code> and raw reference to &lt;code>nil&lt;/code> just to be extra safe.&lt;/p>
&lt;p>Let&amp;rsquo;s get to implementation! We&amp;rsquo;ll use &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://github.com/ThePhD/sol2">sol2&lt;/a> as our Lua/C++ binding library. Let&amp;rsquo;s write a simple &lt;code>Entity&lt;/code> and &lt;code>EntityManager&lt;/code> classes for testing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">using&lt;/span> EntityId &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#458;font-weight:bold">int&lt;/span>;
&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">Entity&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
&lt;span style="font-weight:bold">explicit&lt;/span> Entity(EntityId id) &lt;span style="font-weight:bold">:&lt;/span>
name(&lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>), id(id)
{}
&lt;span style="font-weight:bold">const&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;amp;&lt;/span> getName() &lt;span style="font-weight:bold">const&lt;/span> { &lt;span style="font-weight:bold">return&lt;/span> name; }
&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">setName&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> std&lt;span style="font-weight:bold">::&lt;/span>string&lt;span style="font-weight:bold">&amp;amp;&lt;/span> n) { name &lt;span style="font-weight:bold">=&lt;/span> n; }
EntityId &lt;span style="color:#900;font-weight:bold">getId&lt;/span>() &lt;span style="font-weight:bold">const&lt;/span> { &lt;span style="font-weight:bold">return&lt;/span> id; }
&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
std&lt;span style="font-weight:bold">::&lt;/span>string name;
EntityId id;
};
sol&lt;span style="font-weight:bold">::&lt;/span>state lua; &lt;span style="color:#998;font-style:italic">// globals are bad, but we&amp;#39;ll use it for simpler implementation
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>
&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="color:#458;font-weight:bold">EntityManager&lt;/span> {
&lt;span style="font-weight:bold">public&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
EntityManager() &lt;span style="font-weight:bold">:&lt;/span> idCounter(&lt;span style="color:#099">0&lt;/span>) {}
Entity&lt;span style="font-weight:bold">&amp;amp;&lt;/span> createEntity()
{
&lt;span style="font-weight:bold">auto&lt;/span> id &lt;span style="font-weight:bold">=&lt;/span> idCounter;
&lt;span style="font-weight:bold">++&lt;/span>idCounter;
&lt;span style="font-weight:bold">auto&lt;/span> inserted &lt;span style="font-weight:bold">=&lt;/span> entities.emplace(id, std&lt;span style="font-weight:bold">::&lt;/span>make_unique&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Entity&lt;span style="font-weight:bold">&amp;gt;&lt;/span>(id));
&lt;span style="font-weight:bold">auto&lt;/span> it &lt;span style="font-weight:bold">=&lt;/span> inserted.first; &lt;span style="color:#998;font-style:italic">// iterator to created id/Entity pair
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> e &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">*&lt;/span>it&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>second; &lt;span style="color:#998;font-style:italic">// created entity
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> lua[&lt;span style="color:#b84">&amp;#34;createHandle&amp;#34;&lt;/span>](e);
&lt;span style="font-weight:bold">return&lt;/span> e;
}
&lt;span style="color:#458;font-weight:bold">void&lt;/span> &lt;span style="color:#900;font-weight:bold">removeEntity&lt;/span>(EntityId id)
{
lua[&lt;span style="color:#b84">&amp;#34;onEntityRemoved&amp;#34;&lt;/span>](id);
entities.erase(id);
}
&lt;span style="font-weight:bold">private&lt;/span>&lt;span style="font-weight:bold">:&lt;/span>
std&lt;span style="font-weight:bold">::&lt;/span>unordered_map&lt;span style="font-weight:bold">&amp;lt;&lt;/span>EntityId, std&lt;span style="font-weight:bold">::&lt;/span>unique_ptr&lt;span style="font-weight:bold">&amp;lt;&lt;/span>Entity&lt;span style="font-weight:bold">&amp;gt;&amp;gt;&lt;/span> entities;
EntityId idCounter;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s how we will create our handle in Lua:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">createHandle&lt;/span>(cppRef)
&lt;span style="font-weight:bold">local&lt;/span> handle &lt;span style="font-weight:bold">=&lt;/span> {
cppRef &lt;span style="font-weight:bold">=&lt;/span> cppRef,
isValid &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
}
setmetatable(handle, mt)
Handles[cppRef:getId()] &lt;span style="font-weight:bold">=&lt;/span> handle
&lt;span style="font-weight:bold">return&lt;/span> handle
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Handles&lt;/code> global table stores all handles so that we can easily get them later. As you can see, we still use integer ids for it as a tables key so that when we remove an entity, we can easily find its handle and modify it appropriately.&lt;/p>
&lt;p>The metatable has an important function: it will let us use the handle as if it was the original reference. Here&amp;rsquo;s how it&amp;rsquo;s written:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> mt &lt;span style="font-weight:bold">=&lt;/span> { }
mt.__index &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, key)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> handle.isValid &lt;span style="font-weight:bold">then&lt;/span>
print(debug.traceback())
error(&lt;span style="color:#b84">&amp;#34;Error: handle is not valid!&amp;#34;&lt;/span>, &lt;span style="color:#099">2&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, ...) &lt;span style="font-weight:bold">return&lt;/span> Entity[key](handle.cppRef, ...) &lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just a quick reminder: metatable&amp;rsquo;s &lt;code>__index&lt;/code> function gets called when the key in the table is not found and the table (our handle) and missing key are passed.&lt;/p>
&lt;p>Here&amp;rsquo;s an example of how it all works. When we do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">handle:setName(&lt;span style="color:#b84">&amp;#34;John&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lua checks if handle table has &amp;ldquo;setName&amp;rdquo; key, but it doesn&amp;rsquo;t, so it calls metatable&amp;rsquo;s &lt;code>__index&lt;/code> function with handle and &amp;ldquo;John&amp;rdquo; as parameters. The wrapper around &lt;code>Entity&lt;/code>&amp;rsquo;s member function is returned and it gets called. The function which gets returned is a closure which calls the &lt;code>Entity&lt;/code>&amp;rsquo;s class member function on original raw reference. Why can&amp;rsquo;t we just return &lt;code>Entity[key]&lt;/code>? The problem with that is that our handle will get passed into it while the function expects raw reference to be passed (&lt;code>cppRef:setName(&amp;quot;John&amp;quot;)&lt;/code> is the same as calling &lt;code>Entity.setName(cppRef, &amp;quot;John&amp;quot;)&lt;/code>).&lt;/p>
&lt;p>The error checking that we have here is extremely important and useful! It allows us to easily debug problems with our code: we even print the call stack to find the place where our code crashed!&lt;/p>
&lt;blockquote class="hint-info">
Notice that we pass &amp;ldquo;2&amp;rdquo; as the second argument in &lt;code>error&lt;/code> function. It tells it that the problem is not the function which called it, the bad one was below it in a call stack.
&lt;/blockquote>
&lt;p>Another great thing about this implementation is that it lets us handle error on Lua side, not C++ side. Once the C++ function is called from Lua, it&amp;rsquo;s hard to properly throw and catch an error from C++. You&amp;rsquo;ll have to compile Lua as C++ to do it without a crash. Throwing the error before calling C++ allows us to safely catch it on Lua side and handle it appropriately. We&amp;rsquo;ll see how it can be done a bit later.&lt;/p>
&lt;p>Let&amp;rsquo;s test out reference first:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">test&lt;/span>(cppRef)
&lt;span style="font-weight:bold">local&lt;/span> handle &lt;span style="font-weight:bold">=&lt;/span> createHandle(cppRef)
testHandle(handle)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">testHandle&lt;/span>(handle)
print(&lt;span style="color:#b84">&amp;#34;Hello, my name is &amp;#34;&lt;/span> &lt;span style="font-weight:bold">..&lt;/span> handle:getName())
handle:setName(&lt;span style="color:#b84">&amp;#34;Mark&amp;#34;&lt;/span>)
print(&lt;span style="color:#b84">&amp;#34;My name is &amp;#34;&lt;/span> &lt;span style="font-weight:bold">..&lt;/span> handle:getName() &lt;span style="font-weight:bold">..&lt;/span> &lt;span style="color:#b84">&amp;#34; now!&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>It works! What should we do when entity gets removed? Let&amp;rsquo;s create a function for that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">onEntityRemoved&lt;/span>(id)
&lt;span style="font-weight:bold">local&lt;/span> handle &lt;span style="font-weight:bold">=&lt;/span> Handles[id];
handle.cppRef &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span>
handle.isValid &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">false&lt;/span>
Handles[id] &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to call it before our entity gets removed and you can place it into &lt;code>Entity&lt;/code>&amp;rsquo;s destructor or into &lt;code>EntityManager&lt;/code>&amp;rsquo;s &lt;code>removeEntity&lt;/code> function. Note, that this doesn&amp;rsquo;t remove the handle itself: someone may still be referencing it, but setting corresponding value in &lt;code>Handles&lt;/code> table to &lt;code>nil&lt;/code> is still useful because if someone tries to grab a handle later, &lt;code>nil&lt;/code> will be returned. What&amp;rsquo;s more important is that &lt;code>isValid&lt;/code> is set to false so that the next time someone tries to use the handle, the error will be raised.&lt;/p>
&lt;p>Now let&amp;rsquo;s see what happens when we try to use invalid reference. We can even do our error handling in Lua now!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">testBadReference&lt;/span>()
&lt;span style="font-weight:bold">local&lt;/span> handle &lt;span style="font-weight:bold">=&lt;/span> Handles[&lt;span style="color:#099">0&lt;/span>] &lt;span style="color:#998;font-style:italic">-- this handle exists and is okay&lt;/span>
handle.isValid &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">false&lt;/span> &lt;span style="color:#998;font-style:italic">-- but suppose that entity was removed!&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> _, err &lt;span style="font-weight:bold">=&lt;/span> pcall(testHandle, handle)
&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">then&lt;/span>
print(err)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we call this function from C++ we don&amp;rsquo;t get a crash which would have been caused by using stale reference. Instead, we get a helpful error message and call stack:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">stack traceback:
script.lua:23: in &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#b84">&amp;#39;getName&amp;#39;&lt;/span>
script.lua:57: in &lt;span style="font-weight:bold">function&lt;/span> &amp;lt;script.lua:56&amp;gt;
&lt;span style="font-weight:bold">[&lt;/span>C&lt;span style="font-weight:bold">]&lt;/span>: in &lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#b84">&amp;#39;pcall&amp;#39;&lt;/span>
script.lua:65: in &lt;span style="font-weight:bold">function&lt;/span> &amp;lt;script.lua:62&amp;gt;
script.lua:57: Error: handle is not valid!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What about the performance? My tests show that it&amp;rsquo;s around &lt;strong>600 nanoseconds&lt;/strong> per C++ member function call. It&amp;rsquo;s not that bad, but still may be not good enough for some people. In that case it&amp;rsquo;s easy to get a raw reference and then use it without any additional overhead of error checking:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> rawRef &lt;span style="font-weight:bold">=&lt;/span> handle.cppRef
print(&lt;span style="color:#b84">&amp;#34;Raw reference used. Name: &amp;#34;&lt;/span> &lt;span style="font-weight:bold">..&lt;/span> rawRef:getName())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also speed up &lt;code>__index&lt;/code> function. I&amp;rsquo;ve found that its biggest overhead is creating a closure every time&amp;hellip; so let&amp;rsquo;s memoize our wrapper functions! First of all, we&amp;rsquo;ll create a table which will store our wrapper functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">local&lt;/span> memoizedFuncs &lt;span style="font-weight:bold">=&lt;/span> {}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then we change our &lt;code>__index&lt;/code> method to this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">mt.__index &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, key)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> handle.isValid &lt;span style="font-weight:bold">then&lt;/span>
print(debug.traceback())
error(&lt;span style="color:#b84">&amp;#34;Error: handle is not valid!&amp;#34;&lt;/span>, &lt;span style="color:#099">2&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">local&lt;/span> f &lt;span style="font-weight:bold">=&lt;/span> memoizedFuncs[key]
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> f &lt;span style="font-weight:bold">then&lt;/span>
f &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, ...) &lt;span style="font-weight:bold">return&lt;/span> Entity[key](handle.cppRef, ...) &lt;span style="font-weight:bold">end&lt;/span>
memoizedFuncs[key] &lt;span style="font-weight:bold">=&lt;/span> f
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> f
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The closure for each function will be created once and then will get reused. This speeds up things considerably! The overhead is roughly &lt;strong>200 nanoseconds&lt;/strong> per call.&lt;/p>
&lt;p>What else? Calling the function through &lt;code>__index&lt;/code> produces additional overhead too. Suppose that we use &lt;code>getName&lt;/code> function very often and want it to be part of our handle table so that it&amp;rsquo;s called directly. Ok, let&amp;rsquo;s do this!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">createHandle&lt;/span>(cppRef)
&lt;span style="font-weight:bold">local&lt;/span> handle &lt;span style="font-weight:bold">=&lt;/span> {
cppRef &lt;span style="font-weight:bold">=&lt;/span> cppRef,
isValid &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">true&lt;/span>
}
handle.getName &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, ...)
&lt;span style="font-weight:bold">return&lt;/span> Entity.getName(handle.cppRef, ...)
&lt;span style="font-weight:bold">end&lt;/span>
setmetatable(handle, mt)
Handles[cppRef:getId()] &lt;span style="font-weight:bold">=&lt;/span> handle
&lt;span style="font-weight:bold">return&lt;/span> handle
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait a second&amp;hellip; what happens when we call getName on bad handle? There&amp;rsquo;s no error checking! Let&amp;rsquo;s fix that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">&lt;span style="font-weight:bold">function&lt;/span> &lt;span style="color:#900;font-weight:bold">getWrappedSafeFunction&lt;/span>(f)
&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(handle, ...)
&lt;span style="font-weight:bold">if&lt;/span> &lt;span style="font-weight:bold">not&lt;/span> handle.isValid &lt;span style="font-weight:bold">then&lt;/span>
print(debug.traceback())
error(&lt;span style="color:#b84">&amp;#34;Error: handle is not valid!&amp;#34;&lt;/span>, &lt;span style="color:#099">2&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> f(handle.cppRef, ...)
&lt;span style="font-weight:bold">end&lt;/span>
&lt;span style="font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then in createHandle we&amp;rsquo;ll write:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">handle.getName &lt;span style="font-weight:bold">=&lt;/span> getWrappedSafeFunction(Entity.getName)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the overhead is just &lt;strong>70 nanoseconds&lt;/strong>. The only added overhead is additional function call, validity check and retrieval of raw reference from handle table, but I think it&amp;rsquo;s pretty small for gained benefits.&lt;/p></description></item><item><title>Re:creation dev log. July - November 2016</title><link>https://eliasdaler.github.io/hugo-test/posts/re-creation-devlog-july-november2016/</link><pubDate>Sun, 27 Nov 2016 15:00:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/re-creation-devlog-july-november2016/</guid><description>&lt;p>The last five months were really important for the game. It finally feels like I can work on the game itself now, not just the engine and basic systems which will let me implement different stuff in the game. It&amp;rsquo;s not just abstract stuff, stuff which I do &amp;ldquo;just in case&amp;rdquo;. No, I try to be pragmatic and implement things which are needed for the game and which will let me create stuff without much restrictions.&lt;/p>
&lt;p>I&amp;rsquo;m very glad to say this, but I feel like the core engine is almost done. There are still some important things which I&amp;rsquo;ll have to implement, but it still feels like I&amp;rsquo;m finally happy with the design I have. Mostly, it&amp;rsquo;s because I&amp;rsquo;ve removed lots of stuff and find lots of ways to minimize my code which in the end gives me ability to implement new stuff easier and makes the whole thing easier to expand, modify and debug.&lt;/p>
&lt;p>I&amp;rsquo;m finally ready to do a lot of prototyping. I&amp;rsquo;ve already done a lot of stuff about the game, but I still have the feeling that it&amp;rsquo;s just the beginning of the &amp;ldquo;real&amp;rdquo; development! And it feels great, because I feel like I&amp;rsquo;m in total control of every aspect of the game. There are no restrictions, no boundaries. Let&amp;rsquo;s see how it goes.&lt;/p>
&lt;p>One more small thing: I&amp;rsquo;ve got a new laptop! I&amp;rsquo;ve had it for two weeks now. It feels really great. I&amp;rsquo;m able to do stuff a lot quicker and without frustration (having a great mood is important to be productive)! I&amp;rsquo;ve had my previous laptop for six years and it was slowing me down a lot. It was constantly overheating, everything was running poorly, compilation took a long time, etc&amp;hellip; And recently I&amp;rsquo;ve realized how much it hurt my working process. There were lots of distractions, because even small change could take 1-2 minutes of recompilation. This means, that fast iteration was impossible. This also means that I constantly lost flow and couldn&amp;rsquo;t debug quickly. Hours of slow progress made it all exhausting. Won&amp;rsquo;t happen anymore!&lt;/p>
&lt;p>Okay, let&amp;rsquo;s begin!&lt;/p>
&lt;h1 id="art">Art&lt;/h1>
&lt;p>I haven&amp;rsquo;t done much art in the last months and most of the stuff I&amp;rsquo;ve done is still not finished, so I&amp;rsquo;ll show them a bit later. There&amp;rsquo;s a next graphics improvement coming and I&amp;rsquo;m glad that I didn&amp;rsquo;t have a lot of graphics done, because I&amp;rsquo;d have to redraw tons of stuff. Let&amp;rsquo;s hope it will be the last huge change!&lt;/p>
&lt;p>I&amp;rsquo;ve improved Renatus' design and walking animation, it&amp;rsquo;s nice to see how much my art improved over time:
&lt;img src="walk-animations.gif" alt="Re:cration walk cycles">&lt;/p>
&lt;p>I&amp;rsquo;ve also made some very small, but cool things&amp;hellip;
Unsynched idle animations make everything look more alive!
&lt;img src="torches.gif" alt="Torches">&lt;/p>
&lt;p>Cat doesn&amp;rsquo;t &amp;ldquo;talk&amp;rdquo; during &amp;ldquo;translation&amp;rdquo;
&lt;img src="cat-talk.gif" alt="Cat speaking">&lt;/p>
&lt;h1 id="multiple-tilemaps-in-one-level">Multiple tilemaps in one level&lt;/h1>
&lt;p>Previously the level was limited to one tile map. That meant that if I wanted to make indoor places I either had to switch to another level (which isn&amp;rsquo;t fast!) or place the indoor area somewhere far away and teleport the player there. The second approach is highly used in 3d games, but I&amp;rsquo;ve realized that it wasn&amp;rsquo;t as good in 2d tile-based games because it&amp;rsquo;s harder to move tiles and you have to account for empty areas in your tilemap which are created by placing some area far away.&lt;/p>
&lt;p>Eventually, I&amp;rsquo;ve made a decision to make levels which support multiple tilemaps. It wasn&amp;rsquo;t easy to make, because lots of assumptions were made about Level having only one tilemap, but fortunately it wasn&amp;rsquo;t that bad, so I&amp;rsquo;ve done it fairly quickly. Now I can easily switch tilemaps during the fade in / fade out effect during scene transitions.&lt;/p>
&lt;h1 id="input">Input&lt;/h1>
&lt;p>Previously I&amp;rsquo;ve used polling for input, but realized that events are a lot more efficient and let me easily move all the input in Lua! One more part of game logic moved from C++ to Lua again! Great.&lt;/p>
&lt;p>I&amp;rsquo;ve also made much better system for input in general. Now all keys can be mapped to &amp;ldquo;actions&amp;rdquo; or &amp;ldquo;axes&amp;rdquo; (plural of &amp;ldquo;axis&amp;rdquo;, not &amp;ldquo;axe&amp;rdquo;!). &amp;ldquo;Actions&amp;rdquo; and &amp;ldquo;Axes&amp;rdquo; can be binded to C++ or Lua callback. This makes low-level input decoupled from game input logic in a nice way.&lt;/p>
&lt;p>One advantage of event based scripting is being able to set only one callback for particular action at given time. For example, during dialogues the &amp;ldquo;Primary Action&amp;rdquo; input action will be assigned to &amp;ldquo;Skip dialogue&amp;rdquo;, not &amp;ldquo;Attack/Use Primary Item&amp;rdquo;, so I don&amp;rsquo;t have to worry that somehow the player will be able to attack during dialogues.&lt;/p>
&lt;p>My input manager now also has complete gamepad support (sticks and triggers are also supported and it&amp;rsquo;s possible to connect gamepad in-game!). Event based input will later make it easy to implement replay system which will just send input events at needed times, simulating real player pressing buttons. Easy to implement and very useful for debugging!&lt;/p>
&lt;h1 id="moved-entity-states-from-c-to-lua">Moved Entity states from C++ to Lua&lt;/h1>
&lt;p>This is a thing that I wanted to make for a long time. Basically, most of the game logic lives in entity states. State like &lt;code>MoveState&lt;/code>, &lt;code>AttackState&lt;/code>, etc. Previously they were hard-coded in C++ which made them hard to modify and control with Lua. Another problem was that the more stuff I added to Lua, the harder it became for me to access stuff one Lua side.&lt;/p>
&lt;p>For example, once I&amp;rsquo;ve implemented Action Lists in Lua, I&amp;rsquo;ve realized that some entity states can highly benefit from using them. But this meant that a lot of calls between Lua and C++ would happen.&lt;/p>
&lt;p>Rewriting entity states was extremely easy and I&amp;rsquo;ve discovered and fixed a lot of bugs along the way. I&amp;rsquo;ve also made entity states a lot more reusable, so that different entities can use the same code while adding bits that are different. For example, the same AttackState is used by player character, enemies with melee weapons and archers!&lt;/p>
&lt;p>Action lists are used to make code much easier to follow, basically the lists goes like this:&lt;/p>
&lt;ul>
&lt;li>Pre-attack animation (starting to swing a sword / aiming the arrow)&lt;/li>
&lt;li>Attack animation (continuing to swing a sword / shooting the arrow)
During this step the damage is created during some frame. For melee attackers it&amp;rsquo;s defined in their AttackComponent, for archer the damage is &amp;ldquo;arrow&amp;rdquo; entity which is created on the first frame of &amp;ldquo;shoot&amp;rdquo; animation&lt;/li>
&lt;li>Post attack animation&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve also implemented multiple state machines for entities. Most of the time the entity will have only one state machine which will describe it&amp;rsquo;s &amp;ldquo;main&amp;rdquo; state, but sometimes it&amp;rsquo;s useful to have another state machine which will, for example, describe it&amp;rsquo;s health state, so that if the entity has low health, it will play different &amp;ldquo;idle&amp;rdquo; animation.&lt;/p>
&lt;h1 id="private-messages-in-event-system">Private messages in event system&lt;/h1>
&lt;p>I&amp;rsquo;ve effectively used event system with global queue for quite some time, but then I&amp;rsquo;ve realized that it&amp;rsquo;s not efficient for some events to be implemented that way. One example of this is collision callbacks. When two entities collide, each entity&amp;rsquo;s onCollide function needs to be called with some additional info about which entity collided with it and maybe how it happened. In global queue each entity interested in collision event would receive this event and it would have to check if the collision happened with it or not. Of course that&amp;rsquo;s a huge waste of time, so that&amp;rsquo;s why I&amp;rsquo;ve made &amp;ldquo;private message&amp;rdquo; system which let&amp;rsquo;s entities specify sender and receiver for each event and then EventManager just sends this event to receiver object.&lt;/p>
&lt;h1 id="improved-dialogues-a-lot">Improved dialogues a lot&lt;/h1>
&lt;p>Dialogue system got some needed improvements! One such improvement is ability to insert delays and even function calls between words! It looks like this in a text:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{&lt;span style="color:#000080">&amp;#34;SOME_TEXT_TAG&amp;#34;&lt;/span> : &lt;span style="color:#b84">&amp;#34;Hello...[DELAY 500][X] I&amp;#39;ve been waiting for you&amp;#34;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>[DELAY 500]&lt;/code> creates a 500 ms delay. &lt;code>[X]&lt;/code> indicates that the function with tag &amp;ldquo;X&amp;rdquo; will be called. In scripts, it looks something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-lua" data-lang="lua">DialogueAction {
text &lt;span style="font-weight:bold">=&lt;/span> {&lt;span style="color:#b84">&amp;#34;SOME_TEXT_TAG&amp;#34;&lt;/span>},
functions &lt;span style="font-weight:bold">=&lt;/span> {
x &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">function&lt;/span>(talker)
talker:setAnimation(&lt;span style="color:#b84">&amp;#34;smile&amp;#34;&lt;/span>)
&lt;span style="font-weight:bold">end&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I later plan to add shaking or wave effects to text for better expression of characters' emotions.&lt;/p>
&lt;h1 id="dev-tools">Dev tools&lt;/h1>
&lt;p>I&amp;rsquo;ve made some useful in-game dev tools with ImGui. One such tool is in-game console which lets me execute Lua easily. Here&amp;rsquo;s a little demo of it in action!
&lt;img src="lua-console.gif" alt="Lua console">&lt;/p>
&lt;p>I&amp;rsquo;ve also made a tool for controlling time. Now it&amp;rsquo;s possible to slow down and pause the game at any moment. The game doesn&amp;rsquo;t slow down or stop, I just change deltaTime, so I can easily debug everything in Visual Studio.
&lt;img src="time-control.gif" alt="Time control">&lt;/p>
&lt;h1 id="removed-tons-of-components">Removed tons of components&lt;/h1>
&lt;p>I&amp;rsquo;ve also removed a lot of components which I found redundant and easily made with other components which have much larger role. Here&amp;rsquo;s what I&amp;rsquo;ve removed.&lt;/p>
&lt;h2 id="direction-component">Direction Component&lt;/h2>
&lt;p>Direction component stored just one thing: entity&amp;rsquo;s direction. But that meant that to access entity&amp;rsquo;s direction I had to get DirectionComponent and then get the direction. Getting component from entity isn&amp;rsquo;t very fast (because it involves a &lt;code>dynamic_cast&lt;/code> and &lt;code>std::unordered_map&lt;/code> search) so I&amp;rsquo;ve just started to store entity&amp;rsquo;s direction in Entity class. Yes, some entities won&amp;rsquo;t have a direction (invisible entities or trees, for example), but I just assign &lt;code>Direction::None&lt;/code> to them. Storing 1 additional byte inside of Entity isn&amp;rsquo;t a big deal!&lt;/p>
&lt;h2 id="trigger-component">Trigger Component&lt;/h2>
&lt;p>I&amp;rsquo;ve also removed trigger component. Previously it was used for triggers and made possible to realize the following callbacks: &lt;code>onEnter&lt;/code>, &lt;code>onStay&lt;/code> and &lt;code>onExit&lt;/code>. But how did I check when to call them? I checked if trigger collides with potentially interesting entities or not&amp;hellip; but then I&amp;rsquo;ve realized: why not just use &lt;code>CollisionComponent&lt;/code> for that and make a simple entity state machine which will track entities state which are: Idle or Triggered. OnEnter is called on transition from Idle to Triggered state, onStay is called when Triggered state is active and onExit is called during transition from Triggered to Idle state. &lt;code>CollisionEnter&lt;/code> and &lt;code>CollisionExit&lt;/code> events trigger state transitions. This means that TriggerComponent wasn&amp;rsquo;t needed anymore and I got rid of it with a huge satisfaction.&lt;/p>
&lt;p>I&amp;rsquo;ve also made &amp;ldquo;directed&amp;rdquo; triggers which are called only when the player faces the specific direction, for example cafe has a trigger which lets player exit it when his direction is &amp;ldquo;Down&amp;rdquo;.&lt;/p>
&lt;h2 id="interaction-component">Interaction Component&lt;/h2>
&lt;p>Interaction Component was used for player-entity interactions, for example speaking with NPCs. When the player enters the &amp;ldquo;interaction area&amp;rdquo;, the input changes and pressing a specific button will start dialogue. Hmmm&amp;hellip; seems familiar, isn&amp;rsquo;t it? Yes, this component isn&amp;rsquo;t needed too, because I can just make a trigger which will just change the input during onEnter/onExit function calls. Using it with &amp;ldquo;directed&amp;rdquo; triggers makes it perfect, because now it&amp;rsquo;s easy to make interaction possible only when the player faces the entity. (Previously it was possible to talk with NPCs while turning away from them, not cool!)&lt;/p>
&lt;h1 id="remade-damage-system">Remade damage system&lt;/h1>
&lt;p>Previously when player attacked, the &amp;ldquo;damage&amp;rdquo; entity was created and then destroyed. If something collided with it, the damage was registered. But on one random forum I&amp;rsquo;ve found much better solution: just have &amp;ldquo;damage&amp;rdquo; rect with melee attackers all the time and activate it only during attack. Simple and much more efficient!&lt;/p>
&lt;h1 id="sat-separating-axis-theorem-collision">SAT (Separating Axis Theorem) collision&lt;/h1>
&lt;p>After a lot of trying and failing, I&amp;rsquo;ve implemented SAT collision detection and response which will be used for some complex level geometry.
&lt;img src="sat.gif" alt="SAT in action">&lt;/p>
&lt;p>I&amp;rsquo;ve put my SAT implementation &lt;a href="https://gist.github.com/eliasdaler/502b54fcf1b515bcc50360ce874e81bc">here&lt;/a>. Feel free to use it for your projects!&lt;/p>
&lt;h1 id="refactoring">Refactoring&lt;/h1>
&lt;p>I&amp;rsquo;ve also done &lt;strong>a lot&lt;/strong> of refactoring. I&amp;rsquo;m mostly satisfied with most of my codebase, but there was some bad stuff that I needed to fix once and for all!
Mostly, I&amp;rsquo;ve been fixing pretty typical problems: unnecessary dependencies, some code duplication, problems with ownerships, etc. Not too much to say about that!
But the good thing about refactoring is that it just made my codebase a lot shorter. At some point it&amp;rsquo;s not a refactoring anymore, it&amp;rsquo;s restructuring, implementing better code, moving some stuff to Lua, etc.&lt;/p>
&lt;p>&lt;strong>C++&lt;/strong>: -4345 lines of code&lt;/p>
&lt;p>&lt;strong>Lua&lt;/strong>: +540 lines of code&lt;/p>
&lt;p>&lt;strong>Total&lt;/strong>: -3814 lines of code&lt;/p>
&lt;p>This makes me extremely happy, because shorter and cleaner code is much easier to manage and improve. Writing negative code feels great!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The last few months were very important and productive! While there wasn&amp;rsquo;t a huge progress about the game itself, the engine is almost done, I&amp;rsquo;m very happy with the code and engine structure now. The next few months will be spent prototyping and making &amp;ldquo;vertical slice&amp;rdquo; of the game and I hope I&amp;rsquo;ll be able to make game truly fun and enjoyable. See ya!&lt;/p></description></item><item><title>Using Dear ImGui with modern C++ and STL for creating awesome game dev tools</title><link>https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-2/</link><pubDate>Thu, 21 Jul 2016 20:34:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-2/</guid><description>&lt;p>Related article: &lt;a href="https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-1/">Using Dear ImGui with SFML for creating awesome game dev tools&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This is my second article about Dear ImGui! This article is a collection of useful things, hacks and other stuff I&amp;rsquo;ve found while using ImGui. Mostly it&amp;rsquo;s focused on using modern C++ and some parts of STL with ImGui.&lt;/p>
&lt;figure>&lt;img src="imgui-widgets.png"/>&lt;figcaption>
&lt;h4>Different Dear ImGui widgets&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#labels">Labels&lt;/a>&lt;/li>
&lt;li>&lt;a href="#getting-back-to-the-context-of-the-window-tree-etc">Getting back to the context of the window, tree, etc.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inputfloatn--struct">InputFloatN + struct&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-imgui-with-stl">Using ImGui with STL&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#arrays">Arrays&lt;/a>&lt;/li>
&lt;li>&lt;a href="#combobox-listbox">ComboBox, ListBox&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inputtext-and-stdstring">InputText and std::string&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="labels">Labels&lt;/h2>
&lt;p>Labels are used in ImGui as unique IDs for widgets. You shouldn&amp;rsquo;t use same labels for two different widgets as it will introduce collisions between widgets and that will lead to some unwanted behavior.&lt;/p>
&lt;p>Suppose you have two buttons with label &amp;ldquo;Meow&amp;rdquo; and you have a code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Meow&amp;#34;&lt;/span>)) {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Meow&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Meow&amp;#34;&lt;/span>)) {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Purr&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first button works as expected, but the second doesn&amp;rsquo;t work at all! These are the things that can happen when collisions occur between IDs. This won&amp;rsquo;t happen most of the time, after all there&amp;rsquo;s mostly no need to place two buttons which say the same thing in one window. But what if you &lt;em>really&lt;/em> need these two &amp;ldquo;Meow&amp;rdquo; buttons? The solution is simple: you just have to add &amp;ldquo;##&amp;rdquo; and some stuff after that to resolve the collision:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Meow&amp;#34;&lt;/span>)) {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Meow&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Meow##Second&amp;#34;&lt;/span>)) {
std&lt;span style="font-weight:bold">::&lt;/span>cout &lt;span style="font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#b84">&amp;#34;Purr&lt;/span>&lt;span style="color:#b84">\n&lt;/span>&lt;span style="color:#b84">&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All the text after &amp;ldquo;##&amp;rdquo; is not displayed and only used to give unique IDs to widgets with same labels.
IDs should be unique in the same scope, so it&amp;rsquo;s okay to have two widgets with the same label in two different windows or have one of them in some tree or list (trees, lists and some other widgets have their own scopes, so collisions won&amp;rsquo;t happen between items in them and other items).&lt;/p>
&lt;p>Let&amp;rsquo;s look at another situation. Suppose you have an array of &lt;code>int&lt;/code>s:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">std&lt;span style="font-weight:bold">::&lt;/span>array&lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">int&lt;/span>, &lt;span style="color:#099">10&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="font-weight:bold">=&lt;/span> { &lt;span style="color:#099">0&lt;/span> };
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now you want to create a bunch of &lt;code>InputInt&lt;/code> widgets for each array element. &lt;code>ImGui::PushID&lt;/code>/&lt;code>PopID&lt;/code> come to the rescue! You can push &lt;code>int&lt;/code>s, &lt;code>const char*&lt;/code> or &lt;code>void*&lt;/code> as IDs which will be appended to the label of the next created widget (but won&amp;rsquo;t be shown). For example, you can do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="color:#458;font-weight:bold">int&lt;/span> i &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>; i &lt;span style="font-weight:bold">&amp;lt;&lt;/span> arr.size(); &lt;span style="font-weight:bold">++&lt;/span>i) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>PushID(i);
ImGui&lt;span style="font-weight:bold">::&lt;/span>InputInt(&lt;span style="color:#b84">&amp;#34;##&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>arr[i]);
ImGui&lt;span style="font-weight:bold">::&lt;/span>PopID();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are some situations where you don&amp;rsquo;t have an &lt;code>int&lt;/code> which you can use as part of ID, for example if you want to use for-ranged loop with the &lt;code>std::array&lt;/code>. In that case, you can use pointers to elements of the array which will be unique:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> elem : arr) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>PushID(&lt;span style="font-weight:bold">&amp;amp;&lt;/span>elem);
ImGui&lt;span style="font-weight:bold">::&lt;/span>InputInt(&lt;span style="color:#b84">&amp;#34;##&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>elem);
ImGui&lt;span style="font-weight:bold">::&lt;/span>PopID();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getting-back-to-the-context-of-the-window-tree-etc">Getting back to the context of the window, tree, etc.&lt;/h2>
&lt;p>Suppose that you need to add some stuff to the window you&amp;rsquo;ve created before but you already called &lt;code>ImGui::End&lt;/code>. No problem, just call &lt;code>ImGui::Begin&lt;/code> with the name of the window in which you want to append stuff. Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">ImGui&lt;span style="font-weight:bold">::&lt;/span>Begin(&lt;span style="color:#b84">&amp;#34;First window&amp;#34;&lt;/span>); &lt;span style="color:#998;font-style:italic">// begin first window
&lt;/span>&lt;span style="color:#998;font-style:italic">// some stuff
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>ImGui&lt;span style="font-weight:bold">::&lt;/span>End();
ImGui&lt;span style="font-weight:bold">::&lt;/span>Begin(&lt;span style="color:#b84">&amp;#34;Another window&amp;#34;&lt;/span>); &lt;span style="color:#998;font-style:italic">// begin second window
&lt;/span>&lt;span style="color:#998;font-style:italic">// some another stuff
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>ImGui&lt;span style="font-weight:bold">::&lt;/span>End();
&lt;span style="color:#998;font-style:italic">// oops, forgot to add some stuff!
&lt;/span>&lt;span style="color:#998;font-style:italic">// let&amp;#39;s go back to the context of the first window
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>ImGui&lt;span style="font-weight:bold">::&lt;/span>Begin(&lt;span style="color:#b84">&amp;#34;First window&amp;#34;&lt;/span>);
&lt;span style="color:#998;font-style:italic">// forgotten stuff
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>ImGui&lt;span style="font-weight:bold">::&lt;/span>End();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="inputfloatn--struct">InputFloatN + struct&lt;/h2>
&lt;p>Sometimes it&amp;rsquo;s useful to use &lt;code>InputFloat2&lt;/code> or &lt;code>InputFloat4&lt;/code> with your point or rectangle structs which can be defined like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Point&lt;/span> {
&lt;span style="color:#458;font-weight:bold">float&lt;/span> x;
&lt;span style="color:#458;font-weight:bold">float&lt;/span> y;
};
&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Rect&lt;/span> {
&lt;span style="color:#458;font-weight:bold">float&lt;/span> x;
&lt;span style="color:#458;font-weight:bold">float&lt;/span> y;
&lt;span style="color:#458;font-weight:bold">float&lt;/span> w;
&lt;span style="color:#458;font-weight:bold">float&lt;/span> h;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using them with &lt;code>InputFloat2&lt;/code> or &lt;code>InputFloat4&lt;/code> is easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">Point p{ &lt;span style="color:#099">0.f&lt;/span>, &lt;span style="color:#099">0.f&lt;/span> };
Rect r{ &lt;span style="color:#099">0.f&lt;/span>, &lt;span style="color:#099">0.f&lt;/span>, &lt;span style="color:#099">0.f&lt;/span>, &lt;span style="color:#099">0.f&lt;/span> };
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">ImGui&lt;span style="font-weight:bold">::&lt;/span>InputFloat2(&lt;span style="color:#b84">&amp;#34;Point&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>p.x);
ImGui&lt;span style="font-weight:bold">::&lt;/span>InputFloat4(&lt;span style="color:#b84">&amp;#34;Rect&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>r.x);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works because both &lt;code>Point&lt;/code> and &lt;code>Rect&lt;/code> structs are &lt;a href="http://en.cppreference.com/w/cpp/concept/PODType">POD&lt;/a> and don&amp;rsquo;t have &amp;ldquo;holes&amp;rdquo; in them, so the data they store is contiguous and can be interpreted as array of floats.&lt;/p>
&lt;p>This method is not very safe, of course, so use it at your own risk. Someone can modify the struct and this may break your code which assumed that the floats you want to modify are stored contiguously. Unfortunately, there&amp;rsquo;s no way to pass array of pointers to &lt;code>InputFloat2&lt;/code> or &lt;code>InputFloat4&lt;/code>, but you can easily create your own solution. Let&amp;rsquo;s make a function which creates a widget similar to &lt;code>InputFloat4&lt;/code> and uses members of &lt;code>Rect&lt;/code> struct explicitly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">namespace&lt;/span> imgui_util {
&lt;span style="color:#458;font-weight:bold">bool&lt;/span> &lt;span style="color:#900;font-weight:bold">InputRect&lt;/span>(&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="color:#458;font-weight:bold">char&lt;/span>&lt;span style="font-weight:bold">*&lt;/span> label, Rect&lt;span style="font-weight:bold">*&lt;/span> rectPtr,
&lt;span style="color:#458;font-weight:bold">int&lt;/span> decimal_precision &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="font-weight:bold">-&lt;/span>&lt;span style="color:#099">1&lt;/span>, ImGuiInputTextFlags extra_flags &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>)
{
ImGui&lt;span style="font-weight:bold">::&lt;/span>PushID(label);
ImGui&lt;span style="font-weight:bold">::&lt;/span>BeginGroup();
&lt;span style="color:#458;font-weight:bold">bool&lt;/span> valueChanged &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#999">false&lt;/span>;
std&lt;span style="font-weight:bold">::&lt;/span>array&lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">float&lt;/span>&lt;span style="font-weight:bold">*&lt;/span>, &lt;span style="color:#099">4&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="font-weight:bold">=&lt;/span> { &lt;span style="font-weight:bold">&amp;amp;&lt;/span>rectPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>x, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>rectPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>y,
&lt;span style="font-weight:bold">&amp;amp;&lt;/span>rectPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>w, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>rectPtr&lt;span style="font-weight:bold">-&amp;gt;&lt;/span>h };
&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="font-weight:bold">auto&lt;/span>&lt;span style="font-weight:bold">&amp;amp;&lt;/span> elem : arr) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>PushID(elem);
ImGui&lt;span style="font-weight:bold">::&lt;/span>PushItemWidth(&lt;span style="color:#099">64.f&lt;/span>);
valueChanged &lt;span style="font-weight:bold">|=&lt;/span> ImGui&lt;span style="font-weight:bold">::&lt;/span>InputFloat(&lt;span style="color:#b84">&amp;#34;##arr&amp;#34;&lt;/span>, elem, &lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">0&lt;/span>,
decimal_precision, extra_flags);
ImGui&lt;span style="font-weight:bold">::&lt;/span>PopID();
ImGui&lt;span style="font-weight:bold">::&lt;/span>SameLine();
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>SameLine();
ImGui&lt;span style="font-weight:bold">::&lt;/span>TextUnformatted(label);
ImGui&lt;span style="font-weight:bold">::&lt;/span>EndGroup();
ImGui&lt;span style="font-weight:bold">::&lt;/span>PopID(); &lt;span style="color:#998;font-style:italic">// pop label id;
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>
&lt;span style="font-weight:bold">return&lt;/span> valueChanged;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now you can do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">imgui_util&lt;span style="font-weight:bold">::&lt;/span>InputRect(&lt;span style="color:#b84">&amp;#34;Rect&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>r);
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="using-imgui-with-stl">Using ImGui with STL&lt;/h2>
&lt;p>There are lots of things to be said about using ImGui with STL. ImGui doesn&amp;rsquo;t use STL at all and users have to pass raw arrays and &lt;code>const char*&lt;/code>s instead of &lt;code>std::vector&lt;/code>s and &lt;code>std::string&lt;/code>s, so you can&amp;rsquo;t just use STL and some modern C++ right away, but it can be done with some work.&lt;/p>
&lt;h3 id="arrays">Arrays&lt;/h3>
&lt;p>Some widgets require you to use raw arrays but those are not the best because you can&amp;rsquo;t use them with algorithms, for ranged loops, etc. And the other problem is that you have to manage the memory of variable size arrays yourself using &lt;code>new&lt;/code> and &lt;code>delete&lt;/code>. Using &lt;code>std::array&lt;/code> with &lt;code>Imgui::InputInt4&lt;/code> which expects you to pass raw array is easy, just do it like this:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">std&lt;span style="font-weight:bold">::&lt;/span>array&lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">int&lt;/span>, &lt;span style="color:#099">4&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span> arr2 &lt;span style="font-weight:bold">=&lt;/span> { &lt;span style="color:#099">0&lt;/span> };
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">ImGui&lt;span style="font-weight:bold">::&lt;/span>InputInt4(&lt;span style="color:#b84">&amp;#34;IntRect&amp;#34;&lt;/span>, arr2.data());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>std::array::data&lt;/code> returns a pointer to raw int array which can be passed to &lt;code>ImGui::InputInt4&lt;/code>.&lt;/p>
&lt;p>The same can be done with &lt;code>std::vector&lt;/code>s which are guaranteed to be contiguous, so you can just use &lt;code>std::vector::data&lt;/code> the same way:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">std&lt;span style="font-weight:bold">::&lt;/span>vector&lt;span style="font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#458;font-weight:bold">int&lt;/span>&lt;span style="font-weight:bold">&amp;gt;&lt;/span> arr3(&lt;span style="color:#099">4&lt;/span>, &lt;span style="color:#099">0&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">ImGui&lt;span style="font-weight:bold">::&lt;/span>InputInt4(&lt;span style="color:#b84">&amp;#34;IntRect&amp;#34;&lt;/span>, arr3.data());
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="combobox-listbox">ComboBox, ListBox&lt;/h3>
&lt;p>&lt;code>ComboBox&lt;/code> and &lt;code>ListBox&lt;/code> can be used with arrays of &lt;code>const char&lt;/code>s, but what if you have &lt;code>std::vector&amp;lt;std::string&amp;gt;&lt;/code> instead? No problem, just use &lt;code>BeginCombo&lt;/code>/&lt;code>EndCombo&lt;/code>/&lt;code>Selectable&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">std&lt;span style="font-weight:bold">::&lt;/span>vector items{&lt;span style="color:#b84">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#b84">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#b84">&amp;#34;c&amp;#34;&lt;/span>}; &lt;span style="color:#998;font-style:italic">// defined somewhere
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">int&lt;/span> selectedIndex &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>; &lt;span style="color:#998;font-style:italic">// you need to store this state somewhere
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>
&lt;span style="color:#998;font-style:italic">// later in your code...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>BeginCombo(&lt;span style="color:#b84">&amp;#34;combo&amp;#34;&lt;/span>)) {
&lt;span style="font-weight:bold">for&lt;/span> (&lt;span style="color:#458;font-weight:bold">int&lt;/span> i &lt;span style="font-weight:bold">=&lt;/span> &lt;span style="color:#099">0&lt;/span>; i &lt;span style="font-weight:bold">&amp;lt;&lt;/span> items.size(); &lt;span style="font-weight:bold">++&lt;/span>i) {
&lt;span style="font-weight:bold">const&lt;/span> &lt;span style="color:#458;font-weight:bold">bool&lt;/span> isSelected &lt;span style="font-weight:bold">=&lt;/span> (selectedIndex &lt;span style="font-weight:bold">==&lt;/span> i);
&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Selectable(items[i], isSelected)) {
selectedIndex &lt;span style="font-weight:bold">=&lt;/span> i;
}
&lt;span style="color:#998;font-style:italic">// Set the initial focus when opening the combo
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="color:#998;font-style:italic">// (scrolling + keyboard navigation focus)
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> &lt;span style="font-weight:bold">if&lt;/span> (isSelected) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>SetItemDefaultFocus();
}
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>EndCombo();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inputtext-and-stdstring">InputText and std::string&lt;/h3>
&lt;p>Dear ImGui lets you pass char array in &lt;code>InputText&lt;/code> and then it modifies it when user enters some text in the input field. The problem is that it&amp;rsquo;s hard to know the size of input in advance, so you have to allocate large enough buffer and then pass it in &lt;code>InputText&lt;/code>.&lt;/p>
&lt;p>However, there&amp;rsquo;s a special overload for &lt;code>InputText&lt;/code> and &lt;code>InputTextMultiline&lt;/code> which allows you to use &lt;code>std::string&lt;/code> with it. You need to include a special header to access it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;misc/cpp/imgui_stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="font-weight:bold">struct&lt;/span> &lt;span style="color:#458;font-weight:bold">Person&lt;/span> {
std&lt;span style="font-weight:bold">::&lt;/span>string name;
};
&lt;span style="color:#998;font-style:italic">// later in code...
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>InputText(&lt;span style="color:#b84">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="font-weight:bold">&amp;amp;&lt;/span>person.name) { ... }
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Using Dear ImGui with SFML for creating awesome game dev tools</title><link>https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-1/</link><pubDate>Sun, 10 Jul 2016 15:42:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-1/</guid><description>&lt;p>Related article: &lt;a href="https://eliasdaler.github.io/hugo-test/posts/using-imgui-with-sfml-pt-2/">Using ImGui with modern C++ and STL&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This is the first part of tutorial about Dear ImGui (AKA ImGui) and it&amp;rsquo;ll show you how to set it up with SFML. The second part will be library agnostic and will talk about common ways of doing stuff in ImGui, some awesome widgets and some useful STL overloads.&lt;/p>
&lt;figure>&lt;img src="imgui-widgets.png"/>&lt;figcaption>
&lt;h4>Different Dear ImGui widgets&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dear-imgui-and-immediate-mode-gui-concept">Dear ImGui and immediate mode GUI concept&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-imgui-sfml">Using ImGui-SFML&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#option-a-using-imgui-sfml-with-cmake">Option A. Using ImGui-SFML with CMake&lt;/a>&lt;/li>
&lt;li>&lt;a href="#option-b-using-imgui-sfml-with-vcpkg-and-conan">Option B. Using ImGui-SFML with vcpkg and Conan&lt;/a>&lt;/li>
&lt;li>&lt;a href="#option-c-manual-integration">Option C. Manual integration&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#useful-overloads-for-sfml">Useful overloads for SFML&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Having good content creation (level editor, resource editor, etc.) and debugging
tools for your game is very important and can lead to productivity and
creativity boost. Here are some examples of tools I managed to make with ImGui
for my games.&lt;/p>
&lt;figure>&lt;img src="tomb-painter-dev-tools.png"/>&lt;figcaption>
&lt;h4>Tomb Painter dev tools&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="recreation-level-editor.gif"/>&lt;figcaption>
&lt;h4>Level editor in Re:creation&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="recreation-lua-console.gif"/>&lt;figcaption>
&lt;h4>Lua console&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="recreation-animation-editor.gif"/>&lt;figcaption>
&lt;h4>Animation editor&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>As you can see there&amp;rsquo;s a wide range of widgets that ImGui provides and there are lots of other great examples of how other people use it here.&lt;/p>
&lt;h2 id="dear-imgui-and-immediate-mode-gui-concept">Dear ImGui and immediate mode GUI concept&lt;/h2>
&lt;p>Dear ImGui is an immediate mode GUI library which makes making GUI for all kinds of tools very easy.&lt;/p>
&lt;p>&lt;strong>Immediate mode GUI&lt;/strong> is a bit different to what people think when they hear “GUI” (“retained mode” is a classic way of doing GUI).
Immediate mode GUI is a way of doing GUI which involves creating and drawing widgets in each frame. Instead of creating some &lt;code>Button&lt;/code> object and adding a callback to it, you write something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="font-weight:bold">if&lt;/span> (ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Some Button&amp;#34;&lt;/span>)) {
... &lt;span style="color:#998;font-style:italic">// code which will be called on button pressed
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple as that!&lt;/p>
&lt;p>For a great in-depth talk on this concept, I recommend to check out &lt;a href="https://mollyrocket.com/861">Casey Muratori&amp;rsquo;s talk on IMGUI&lt;/a>.&lt;/p>
&lt;p>Back to Dear ImGui. It&amp;rsquo;s:&lt;/p>
&lt;ul>
&lt;li>MIT Licensed&lt;/li>
&lt;li>Very fast and light&lt;/li>
&lt;li>Constantly updated and expanded&lt;/li>
&lt;li>Doesn&amp;rsquo;t do dynamic allocation/deallocation&lt;/li>
&lt;li>Very portable – has lots of bindings for different libraries and frameworks&lt;/li>
&lt;li>Easily expandable&lt;/li>
&lt;/ul>
&lt;h2 id="using-imgui-sfml">Using ImGui-SFML&lt;/h2>
&lt;p>&lt;a href="https://github.com/eliasdaler/imgui-sfml">ImGui-SFML&lt;/a> is a binding I wrote to
simplify usage of ImGui with SFML. Here&amp;rsquo;s how you can use it.&lt;/p>
&lt;h3 id="option-a-using-imgui-sfml-with-cmake">Option A. Using ImGui-SFML with CMake&lt;/h3>
&lt;blockquote class="hint-info">
You can just see this &lt;a href="https://github.com/eliasdaler/imgui-sfml-fetchcontent">example&lt;/a> of how to use FetchContent to make it easy.
&lt;/blockquote>
&lt;p>First, you need to download Dear ImGui, ImGui-SFML and build SFML somewhere.&lt;/p>
&lt;p>Then, run this where you want to build ImGui-SFML:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake &amp;lt;ImGui-SFML repo folder&amp;gt; -DIMGUI_DIR&lt;span style="font-weight:bold">=&lt;/span>&amp;lt;ImGui repo folder&amp;gt; &lt;span style="color:#b84">\
&lt;/span>&lt;span style="color:#b84">&lt;/span> -DSFML_DIR&lt;span style="font-weight:bold">=&lt;/span>&amp;lt;path with built SFML&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have SFML installed on your system, you don&amp;rsquo;t need to set SFML_DIR during
configuration.&lt;/p>
&lt;p>You can also specify &lt;code>BUILD_SHARED_LIBS=ON&lt;/code> to build ImGui-SFML as a shared library. To build ImGui-SFML examples, set &lt;code>IMGUI_SFML_BUILD_EXAMPLES=ON&lt;/code>.&lt;/p>
&lt;p>After the building, you can install the library on your system by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cmake --build . --target install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you set &lt;code>CMAKE_INSTALL_PREFIX&lt;/code> during configuration, you can install ImGui-SFML locally.&lt;/p>
&lt;p>Integrating into your project is simple:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="color:#999">find_package&lt;/span>(&lt;span style="color:#b84">ImGui-SFML&lt;/span> &lt;span style="color:#b84">REQUIRED&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999">target_link_libraries&lt;/span>(&lt;span style="color:#b84">my_target&lt;/span> &lt;span style="color:#b84">PRIVATE&lt;/span> &lt;span style="color:#b84">ImGui-SFML::ImGui-SFML&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If CMake can&amp;rsquo;t find ImGui-SFML on your system (or you didn&amp;rsquo;t install it), just define &lt;code>ImGui-SFML_DIR&lt;/code> before calling &lt;code>find_package&lt;/code>.&lt;/p>
&lt;h3 id="option-b-using-imgui-sfml-with-vcpkg-and-conan">Option B. Using ImGui-SFML with vcpkg and Conan&lt;/h3>
&lt;blockquote class="hint-warning">
I don&amp;rsquo;t maintain these packages so they might lag behind, so building &lt;code>ImGui-SFML&lt;/code> manually is recommended
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://vcpkg.info/port/imgui-sfml">vcpkg package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bincrafters.jfrog.io/ui/packages/conan:%2F%2Fimgui-sfml?name=imgui-sfml&amp;amp;type=packages">Conan package&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="option-c-manual-integration">Option C. Manual integration&lt;/h3>
&lt;p>This is slightly more complex&amp;hellip;&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use SFML to get a simple window to show up. Follow the “Getting started” tutorial &lt;a href="http://www.sfml-dev.org/tutorials/2.3/">here&lt;/a> if you have never done it before.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download &lt;a href="https://github.com/ocornut/imgui">Dear ImGui&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download &lt;a href="https://github.com/eliasdaler/imgui-sfml">ImGui-SFML&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Important&lt;/strong>: you have to add the contents of &lt;strong>imconfig-SFML.h&lt;/strong> to ImGui&amp;rsquo;s &lt;strong>imconfig.h&lt;/strong> to get implicit &lt;code>ImVec2&lt;/code> {% icon fa-arrows-h %} &lt;code>sf::Vector2f&lt;/code> conversion working!
{: .message}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add ImGui and ImGui-SFML directories to your include directories.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add these files to your build / project:&lt;/p>
&lt;ul>
&lt;li>imgui.cpp&lt;/li>
&lt;li>imgui_draw.cpp&lt;/li>
&lt;li>imgui_widgets.cpp&lt;/li>
&lt;li>imgui-SFML.cpp&lt;/li>
&lt;li>imgui_demo.cpp&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>(Optional) If you get linking errors, link OpenGL to your project.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s a complete example of using ImGui and SMFL together.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;#34;imgui.h&amp;#34;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;#34;imgui-SFML.h&amp;#34;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Graphics/CircleShape.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Graphics/RenderWindow.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/System/Clock.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">#include&lt;/span> &lt;span style="color:#999;font-weight:bold">&amp;lt;SFML/Window/Event.hpp&amp;gt;&lt;/span>&lt;span style="color:#999;font-weight:bold">
&lt;/span>&lt;span style="color:#999;font-weight:bold">&lt;/span>
&lt;span style="color:#458;font-weight:bold">int&lt;/span> &lt;span style="color:#900;font-weight:bold">main&lt;/span>() {
sf&lt;span style="font-weight:bold">::&lt;/span>RenderWindow window(sf&lt;span style="font-weight:bold">::&lt;/span>VideoMode(&lt;span style="color:#099">640&lt;/span>, &lt;span style="color:#099">480&lt;/span>), &lt;span style="color:#b84">&amp;#34;ImGui + SFML = &amp;lt;3&amp;#34;&lt;/span>);
window.setFramerateLimit(&lt;span style="color:#099">60&lt;/span>);
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Init(window);
sf&lt;span style="font-weight:bold">::&lt;/span>CircleShape shape(&lt;span style="color:#099">100.f&lt;/span>);
shape.setFillColor(sf&lt;span style="font-weight:bold">::&lt;/span>Color&lt;span style="font-weight:bold">::&lt;/span>Green);
sf&lt;span style="font-weight:bold">::&lt;/span>Clock deltaClock;
&lt;span style="font-weight:bold">while&lt;/span> (window.isOpen()) {
sf&lt;span style="font-weight:bold">::&lt;/span>Event event;
&lt;span style="font-weight:bold">while&lt;/span> (window.pollEvent(event)) {
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>ProcessEvent(window, event);
&lt;span style="font-weight:bold">if&lt;/span> (event.type &lt;span style="font-weight:bold">==&lt;/span> sf&lt;span style="font-weight:bold">::&lt;/span>Event&lt;span style="font-weight:bold">::&lt;/span>Closed) {
window.close();
}
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Update(window, deltaClock.restart());
ImGui&lt;span style="font-weight:bold">::&lt;/span>Begin(&lt;span style="color:#b84">&amp;#34;Hello, world!&amp;#34;&lt;/span>);
ImGui&lt;span style="font-weight:bold">::&lt;/span>Button(&lt;span style="color:#b84">&amp;#34;Look at this pretty button&amp;#34;&lt;/span>);
ImGui&lt;span style="font-weight:bold">::&lt;/span>End();
window.clear();
window.draw(shape);
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Render(window);
window.display();
}
ImGui&lt;span style="font-weight:bold">::&lt;/span>SFML&lt;span style="font-weight:bold">::&lt;/span>Shutdown();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll see something like this:&lt;/p>
&lt;p>&lt;img src="rgb1.png" alt="First example">&lt;/p>
&lt;p>Try to change some stuff. Double click on r/g/b field to set values precisely, or just drag some widgets to change window&amp;rsquo;s background color. Press the button to change window title.
Here, it works!&lt;/p>
&lt;p>&lt;img src="rgb2.png" alt="First example">
Awesome! Now let&amp;rsquo;s see how it works.&lt;/p>
&lt;p>ImGui is initialized by calling &lt;code>ImGui::SFML::Init&lt;/code> function to which you pass your &lt;code>sf::RenderWindow&lt;/code>. This creates internal default font atlas. See how you can use other fonts in &lt;a href="https://github.com/eliasdaler/imgui-sfml#fonts-how-to">Fonts how-to section&lt;/a> of imgui-sfml&amp;rsquo;s README.&lt;/p>
&lt;p>Shutting down is done with &lt;code>ImGui::SFML::Shutdown&lt;/code> call which cleans some things up. (Deleting internal font atlas, if it&amp;rsquo;s used, for example).&lt;/p>
&lt;p>There are two phases of using ImGui in your game loop: &lt;strong>update&lt;/strong> and &lt;strong>render&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Updating&lt;/strong> consists of &lt;em>event processing&lt;/em>, &lt;em>state update&lt;/em> and &lt;em>widget update&lt;/em>. Event processing is done by calling &lt;code>ImGui::SFML::ProcessEvent&lt;/code> and it&amp;rsquo;s almost the same as processing SFML events. It&amp;rsquo;s used to process keyboard and mouse input and handle window resize and focus events. State update (which is being done by calling &lt;code>ImGui::SFML::Update&lt;/code>) updates delta time which ImGui uses internally, so you have to pass it using your delta time clock, as well as mouse coordinates (or your window relative to which mouse coordinates will be taken). &lt;code>ImGui::NewFrame&lt;/code> is also being called here and you can call ImGui widget creation functions after that. Calling stuff like &lt;code>ImGui::Button&lt;/code> or &lt;code>ImGui::Color3Edit&lt;/code> updates widgets and it also generates one draw list which is used for rendering later.&lt;/p>
&lt;p>&lt;strong>Drawing&lt;/strong> is done with &lt;code>ImGui::SFML::Render&lt;/code> call.&lt;/p>
&lt;blockquote class="hint-danger">
Don&amp;rsquo;t call &lt;code>ImGui::Render&lt;/code>, only call &lt;code>ImGui::SFML::Render&lt;/code>
&lt;/blockquote>
&lt;blockquote class="hint-info">
You must create all widgets between &lt;code>ImGui::SFML::Update()&lt;/code> and &lt;code>ImGui::Render()&lt;/code>.
&lt;/blockquote>
&lt;p>If you&amp;rsquo;re updating more than you draw, then you can either update ImGui once per frame or call &lt;code>ImGui::EndFrame&lt;/code> at the end of your update function.&lt;/p>
&lt;p>Widgets are easily created by calling corresponding functions (more about them in the next part). For example, you can call &lt;code>ImGui::InputInt&lt;/code> and pass a pointer to int there.When you change widget&amp;rsquo;s value, the integer is changed too.
Buttons work pretty easy too – they don&amp;rsquo;t need callbacks, you just wrap code which you want to call after the button is pressed in &lt;code>if(ImGui::Button(…)) { … }&lt;/code> and that&amp;rsquo;s all you have to do.&lt;/p>
&lt;p>Call &lt;code>ImGui::ShowTestWindow&lt;/code> somewhere when you create widgets and you&amp;rsquo;ll get a nice window with lots of examples of ImGui stuff. This is very useful as example of how to do stuff with ImGui. Just look for the thing you want to make in this test window and you&amp;rsquo;ll easily find how to do it in corresponding part of imgui_demo.cpp.&lt;/p>
&lt;h2 id="useful-overloads-for-sfml">Useful overloads for SFML&lt;/h2>
&lt;p>There are also some useful overloads implemented in SFML ImGui binding. For example, you can use &lt;code>ImGui::Image&lt;/code> and &lt;code>ImGui::ImageButton&lt;/code> with &lt;code>sf::Textures&lt;/code> and &lt;code>sf::Sprites&lt;/code>! I&amp;rsquo;ve also defined implicit conversions between &lt;code>ImVec2&lt;/code> and &lt;code>sf::Vector2f&lt;/code>, so you can pass &lt;code>sf::Vector2f&lt;/code> to ImGui&amp;rsquo;s functions without needing to cast explicitly. You can also draw lines and rects with &lt;code>DrawLine&lt;/code>, &lt;code>DrawRect&lt;/code>, &lt;code>DrawRectFilled&lt;/code>.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>As you can see, using ImGui is easy and it&amp;rsquo;s easy to start doing really impressive and useful stuff with it right away. Thank you for reading this tutorial, I hope it was useful and that ImGui will help you make better tools and greater games as the result of having awesome tools.&lt;/p></description></item><item><title>CppCast</title><link>https://eliasdaler.github.io/hugo-test/posts/cppcast/</link><pubDate>Sat, 09 Jul 2016 01:05:00 +0300</pubDate><guid>https://eliasdaler.github.io/hugo-test/posts/cppcast/</guid><description>&lt;p>&lt;img src="cppcast.jpg" alt="Me on CppCast">&lt;/p>
&lt;p>I recently gave an interview on &lt;strong>CppCast&lt;/strong>!
Listen to it &lt;a href="http://cppcast.com/2016/07/elias-daler">here&lt;/a>.&lt;/p>
&lt;p>Here are my some thoughts about CppCast and the episode.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="about-cppcast">About CppCast&lt;/h2>
&lt;p>If you&amp;rsquo;re never heard of &lt;strong>CppCast&lt;/strong> before - it&amp;rsquo;s one of the most amazing podcasts ever! The guests are always interesting and the discussions are very informative. The hosts know what to ask and what to talk about - they&amp;rsquo;re C++ developers themselves.
They also get awesome guests on the show. For example, there are episodes with people like &lt;a href="http://cppcast.com/2015/09/scott-meyers/">Scott Meyers&lt;/a>, &lt;a href="http://cppcast.com/2015/10/andrei-alexandrescu/">Andrei Alexandrescu&lt;/a> and &lt;a href="http://cppcast.com/2016/06/herb-sutter/">Herb Sutter&lt;/a>. These people are my heroes of programming, so it&amp;rsquo;s a big pleasure to be interviewed on the podcast of that caliber.&lt;/p>
&lt;h2 id="episode-with-me">Episode with me&lt;/h2>
&lt;p>I&amp;rsquo;ve never expected to be on the show so soon. I&amp;rsquo;ve joked about it: &amp;ldquo;Ah, I&amp;rsquo;ll be there in &lt;em>X&lt;/em> years when I get really successful&amp;rdquo;. It&amp;rsquo;s a big honor for me and I&amp;rsquo;m very thankful for Rob and Jason for making my dream of being on podcast come true.&lt;/p>
&lt;p>I&amp;rsquo;m sorry if I come of kinda derpy or awkward at times during the interview. First of all, I was pretty nervous and secondly, English is not my native language and I don&amp;rsquo;t speak in it in real life at all.
But still, I think I did pretty well and we discussed lots of neat stuff during the episode.&lt;/p>
&lt;h2 id="if-you-want-to-learn-about-luac-integration-andor-read-my-other-blog-posts">If you want to learn about Lua/C++ integration and/or read my other blog posts&lt;/h2>
&lt;p>This is my new blog, so check out my &lt;a href="https://eliasdaler.wordpress.com">old blog&lt;/a> for all the mentioned articles. If you want to start with Lua and C++, check out &lt;a href="https://eliasdaler.wordpress.com/2014/07/18/using-lua-with-cpp-luabridge/">LuaBridge tutorial&lt;/a> (though I recommend to use &lt;a href="https://github.com/ThePhD/sol2">sol2&lt;/a> as a binding library). If you want to see how you can use Lua in Practice, check out &lt;a href="https://eliasdaler.wordpress.com/2015/08/10/using-lua-and-cpp-in-practice/">Using Lua in practice&lt;/a> articles (there are five of them!). And check out &lt;a href="https://eliasdaler.wordpress.com/tag/dev-log/">Re:creation dev logs&lt;/a> for in-depth explanation of what I did about the game and how I make my game engine.&lt;/p>
&lt;p>The new articles are coming very soon, check out what I&amp;rsquo;m planning to write &lt;a href="https://eliasdaler.github.io/first-post">here&lt;/a> (I promised that there&amp;rsquo;ll be some when the podcast airs, but I didn&amp;rsquo;t think that episode will come out so soon, so sorry about that). I think these articles will be even better, there&amp;rsquo;s a lot of things I&amp;rsquo;ve learned during the last few years.&lt;/p>
&lt;p>Thanks for reading and listening. Please let me know what you thought of the episode in the comments!&lt;/p></description></item></channel></rss>